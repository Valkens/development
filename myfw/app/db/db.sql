/*
SQLyog Ultimate v10.00 Beta1
MySQL - 5.5.27 : Database - dev_blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
/*Table structure for table `category` */

CREATE TABLE `category` (
  `id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `slug` varchar(100) NOT NULL DEFAULT '',
  `id_parent` tinyint(4) unsigned NOT NULL,
  `meta_description` text,
  `sort` tinyint(3) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

/*Data for the table `category` */

insert  into `category`(`id`,`name`,`slug`,`id_parent`,`meta_description`,`sort`) values (1,'Tutorial','tutorial',0,'Php tutorial, Html tutorial, Css tutorial',0),(2,'Tips','tips',0,'Php tips, Html tips, Css tips',1),(3,'Php','php',1,'Php tutorial',0),(4,'Css','css',1,'Css tutorials',1);

/*Table structure for table `post` */

CREATE TABLE `post` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `id_subcategory` tinyint(3) unsigned NOT NULL,
  `id_user` tinyint(3) unsigned DEFAULT NULL,
  `creation_date` int(11) unsigned NOT NULL,
  `modified_date` int(11) unsigned DEFAULT NULL,
  `title` varchar(255) NOT NULL,
  `meta_description` text,
  `description` text NOT NULL,
  `status` tinyint(1) unsigned NOT NULL DEFAULT '1',
  `comment_allowed` tinyint(1) unsigned NOT NULL DEFAULT '1',
  `slug` varchar(255) NOT NULL,
  `comment_count` int(11) unsigned NOT NULL,
  `featured_status` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `thumbnail` text,
  `content` longtext NOT NULL,
  `id_category` tinyint(3) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `id_category` (`id_category`),
  KEY `id_subcategory` (`id_subcategory`),
  KEY `title` (`title`(20))
) ENGINE=InnoDB AUTO_INCREMENT=82 DEFAULT CHARSET=utf8;

/*Data for the table `post` */

insert  into `post`(`id`,`id_subcategory`,`id_user`,`creation_date`,`modified_date`,`title`,`meta_description`,`description`,`status`,`comment_allowed`,`slug`,`comment_count`,`featured_status`,`thumbnail`,`content`,`id_category`) values (1,3,1,1358016487,NULL,' Build Your First Admin Bundle for Laravel ','It\'s hard to deny the fact that the PHP community is excited for Laravel 4. Among other things, the framework leverages the power of Composer, which means it\'s able to utilize any package or script from Packagist.In the meantime, Laravel offers \"Bundles\", which allow us to modularize code for use in future projects. The bundle directory is full of excellent scripts and packages that you can use in your applications. In this lesson, I’ll show you how to build one from scratch!','It\'s hard to deny the fact that the PHP community is excited for Laravel 4. Among other things, the framework leverages the power of Composer, which means it\'s able to utilize any package or script from Packagist.In the meantime, Laravel offers \"Bundles\", which allow us to modularize code for use in future projects. The bundle directory is full of excellent scripts and packages that you can use in your applications. In this lesson, I’ll show you how to build one from scratch!',1,1,'build-your-first-admin-bundle-for-laravel',346,0,'http://cdn.tutsplus.com/net.tutsplus.com/authors/jeffreyway/laravel-bundles.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"https://github.com/NETTUTS/Build-Your-First-Admin-Bundle-for-Laravel\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-28918\'), post_id: 28918, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>It&#39;s hard to deny the fact that the PHP community is excited for Laravel 4. Among other things, the framework leverages the power of Composer, which means it&#39;s able to utilize any package or script from <a\nhref=\"http://packagist.org\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'packagist.org\']);\">Packagist</a>.</p><p>In the meantime, Laravel offers &quot;Bundles&quot;, which allow us to modularize code for use in future projects. The <a\nhref=\"http://bundles.laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bundles.laravel.com\']);\">bundle directory</a> is full of excellent scripts and packages that you can use in your applications. In this lesson, I&#8217;ll show you how to build one from scratch!</p><p><span\nid=\"more-28918\"></span></p><hr\n/><h2>Wait, What&#39;s a Bundle?</h2><p>Bundles offer an easy way to group related code. If you&#8217;re familiar with CodeIgniter, bundles are quite similar to &quot;Sparks&quot;. This is apparent when you take a look at the folder structure.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://cdn.tutsplus.com/net.tutsplus.com/authors/jeffreyway/Folder-Structure.png\" alt=\"Folder Structure\"></div><p>Creating a bundle is fairly simple. To illustrate the process, we&#8217;ll build an admin panel boilerplate that we can use within future projects. Firstly, we need to create an &#39;admin&#39; directory within our &#39;bundles&#39; folder. Try to replicate the folder structure from the image above.</p><p>Before we begin adding anything to our bundle, we need to first register it with Laravel. This is done in your application&#39;s <code>bundles.php</code> file. Once you open this file, you should see an array being returned; we simply need to add our bundle and define a <code>handle</code>. This will become the URI in which we access our admin panel.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\'admin\' =&gt; array(\'handles\' =&gt; \'admin\')\n</pre><p>Here, I&#39;ve named mine, &#8220;admin,&#8221; but feel free to call yours whatever you wish.</p><p>Once we&#39;ve got that setup, we need to create a <code>start.php</code> file. Here, we&#39;re going to set up a few things, such as our namespaces. <em>If you&#39;re not bothered by this, then you don&#39;t actually need a start file for your bundle to work, as expected.</em></p><p>Laravel&#39;s autoloader class allows us to do a couple of things: map our base controller, and autoload namespaces.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">Autoloader::map(array(\n    \'Admin_Base_Controller\' =&gt; Bundle::path(\'admin\').\'controllers/base.php\',\n));\nAutoloader::namespaces(array(\n    \'Admin\\Models\' =&gt; Bundle::path(\'admin\').\'models\',\n    \'Admin\\Libraries\' =&gt; Bundle::path(\'admin\').\'libraries\',\n));\n</pre><p>Namespacing will ensure that we don&#39;t conflict with any other models or libraries already included in our application. You&#39;ll notice that we haven&#39;t opted to not namespace our controllers to make things a little easier.</p><hr\n/><h2>Publishing Assets</h2><p>For the admin panel, we&#39;ll take advantage of <a\nhref=\"http://twitter.github.com/bootstrap/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'twitter.github.com\']);\">Twitter&#39;s Bootstrap</a>, so go grab a copy. We can pop this into a <code>public</code> folder inside our bundle in order to publish to our application later on.</p><p>When you&#39;re ready to publish them, just run the following command through artisan.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">php artisan bundle:publish admin\n</pre><p>This will copy the folder structure and files to the <code>bundles</code> directory in our <code>public</code> folder, within the root of the Laravel installation. We can then use this in our bundle&#39;s base controller.</p><hr\n/><h2>Setting up the Base Controller</h2><p>It&#39;s always a smart idea to setup a base controller, and extend from there. Here, we can setup restful controllers, define the layout, and include any assets. We just need to call this file, <code>base.php</code>, and pop it into our controller&#8217;s directory.</p><p>Firstly, let&#39;s get some housekeeping out of the way. We&#39;ll of course want to use Laravel&#39;s restful controllers.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">public $restful = true;\n</pre><p>And we&#39;ll specify a layout that we&#39;ll create shortly. If you&#39;re not used to controller layouts, then you&#39;re in for a treat.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">public $layout = \'admin::layouts.main\';\n</pre><p>The bundle name, followed by two colons, is a paradigm in Laravel we&#39;ll be seeing more of in the future, so keep an eye out.</p><p>When handling assets within our bundle, we can do things as expected and specify the path from the root of the public folder. Thankfully, Laravel is there to make our lives easier. In our construct, we need to specify the bundle, before adding to our asset containers.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">Asset::container(\'header\')-&gt;bundle(\'admin\');\nAsset::container(\'footer\')-&gt;bundle(\'admin\');\n</pre><p>If you&#39;re unfamiliar with asset containers, don&#39;t worry; they&#39;re merely sections of a page where you want to house your assets. Here, we&#39;ll be including stylesheets in the header, and scripts in the footer.</p><p>Now, with that out of the way, we can include our bootstrap styles and scripts easily. Our completed base controller should look similar to:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class Admin_Base_Controller extends Controller {\n    public $restful = true;\n    public $layout = \'admin::layouts.main\';\n    public function __construct(){\n        parent::__construct();\n        Asset::container(\'header\')-&gt;bundle(\'admin\');\n        Asset::container(\'header\')-&gt;add(\'bootstrap\', \'css/bootstrap.min.css\');\n        Asset::container(\'footer\')-&gt;bundle(\'admin\');\n        Asset::container(\'footer\')-&gt;add(\'jquery\', \'http://code.jquery.com/jquery-latest.min.js\');\n        Asset::container(\'footer\')-&gt;add(\'bootstrapjs\', \'js/bootstrap.min.js\');\n    }\n    /**\n     * Catch-all method for requests that can\'t be matched.\n     *\n     * @param  string    $method\n     * @param  array     $parameters\n     * @return Response\n     */\n    public function __call($method, $parameters){\n        return Response::error(\'404\');\n    }\n}\n</pre><p>We&#39;ve also brought across the catch-all request from the application&#39;s base controller to return a 404 response, should a page not be found.</p><p>Before we do anything else, let&#39;s make the file for that layout, <code>views/layout/main.blade.php</code>, so we don&#39;t encounter any errors later on.</p><hr\n/><h2>Securing the Bundle</h2><p>As we&#39;re building an admin panel, we&#39;re going to want to keep people out. Thankfully, we can use Laravel&#39;s built in <code>Auth</code> class to accomplish this with ease..</p><p>First, we need to create our table; I&#39;m going to be using &#39;admins&#39; as my table name, but you can change it, if you wish. Artisan will generate a migration, and pop it into our bundle&#39;s migrations directory. Just run the following in the command line.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">php artisan migrate:make admin::create_admins_table\n</pre><h3>Building the Schema</h3><p>If you&#39;re unfamiliar with the schema builder, I recommend that you take a glance at <a\nhref=\"http://laravel.com/docs/database/schema\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\">the documentation</a>. We&#39;re going to include a few columns:</p><ul><li>id &#8211; This will auto-increment and become our primary key</li><li>name</li><li>username</li><li>password</li><li>email</li><li>role &#8211; We won&#39;t be taking advantage of this today, but it will allow you to extend the bundle later on</li></ul><p>We&#39;ll also include the default timestamps, in order to follow best practices.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">/**\n * Make changes to the database.\n *\n * @return void\n */\npublic function up()\n{\n    Schema::create(\'admins\', function($table)\n    {\n        $table-&gt;increments(\'id\');\n        $table-&gt;string(\'name\', 200);\n        $table-&gt;string(\'username\', 32)-&gt;unique();\n        $table-&gt;string(\'password\', 64);\n        $table-&gt;string(\'email\', 320)-&gt;unique();\n        $table-&gt;string(\'role\', 32);\n        $table-&gt;timestamps();\n    });\n}\n/**\n * Revert the changes to the database.\n *\n * @return void\n */\npublic function down()\n{\n    Schema::drop(\'admins\');\n}\n</pre><p>Now that we&#39;ve got our database structure in place, we need to create an associated model for the table. This process is essentially identical to how we might accomplish this in our main application. We create the file and model, based on the singular form of our table name &#8211; but we do need to ensure that we namespace correctly.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">namespace Admin\\Models;\nuse \\Laravel\\Database\\Eloquent\\Model as Eloquent;\nclass Admin extends Eloquent {\n}\n</pre><p>Above, we&#39;ve ensured that we&#39;re using the namespace that we defined in <code>start.php</code>. Also, so we can reference Eloquent correctly, we create an alias.</p><h3>Extending Auth</h3><p>To keep our bundle entirely self contained, we&#8217;ll need to extend <code>auth</code>. This will allow us to define a table <em>just</em> to login to our admin panel, and not interfere with the main application.</p><p>Before we create our custom driver, we&#39;ll create a configuration file, where you can choose if you&#39;d like to use the <code>username</code> or <code>email</code> columns from the database table.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">return array(\n    \'username\' =&gt; \'username\',\n    \'password\' =&gt; \'password\',\n);\n</pre><p>If you want to alter the columns that we&#39;ll be using, simply adjust the values here.</p><p>We next need to create the driver. Let&#39;s call it, &#8220;AdminAuth,&#8221; and include it in our libraries folder. Since we&#39;re extending Auth, we only need to overwrite a couple of methods to get everything working, as we  intended.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nnamespace Admin\\Libraries;\nuse Admin\\Models\\Admin as Admin, Laravel\\Auth\\Drivers\\Eloquent as Eloquent, Laravel\\Hash, Laravel\\Config;\nclass AdminAuth extends Eloquent {\n/**\n * Get the current user of the application.\n *\n * If the user is a guest, null should be returned.\n *\n * @param  int|object  $token\n * @return mixed|null\n */\npublic function retrieve($token)\n{\n    // We return an object here either if the passed token is an integer (ID)\n    // or if we are passed a model object of the correct type\n    if (filter_var($token, FILTER_VALIDATE_INT) !== false)\n    {\n        return $this-&gt;model()-&gt;find($token);\n    }\n    else if (get_class($token) == new Admin)\n    {\n        return $token;\n    }\n}\n/**\n * Attempt to log a user into the application.\n *\n * @param  array $arguments\n * @return void\n */\npublic function attempt($arguments = array())\n{\n    $user = $this-&gt;model()-&gt;where(function($query) use($arguments)\n    {\n        $username = Config::get(\'admin::auth.username\');\n        $query-&gt;where($username, \'=\', $arguments[\'username\']);\n        foreach(array_except($arguments, array(\'username\', \'password\', \'remember\')) as $column =&gt; $val)\n        {\n            $query-&gt;where($column, \'=\', $val);\n        }\n    })-&gt;first();\n    // If the credentials match what is in the database, we will just\n    // log the user into the application and remember them if asked.\n    $password = $arguments[\'password\'];\n    $password_field = Config::get(\'admin::auth.password\', \'password\');\n    if ( ! is_null($user) and Hash::check($password, $user-&gt;{$password_field}))\n    {\n        return $this-&gt;login($user-&gt;get_key(), array_get($arguments, \'remember\'));\n    }\n    return false;\n}\nprotected function model(){\n    return new Admin;\n}\n}\n</pre><p>Now that we&#39;ve created the driver, we need to let Laravel know. We can use Auth&#39;s <code>extend</code> method to do this in our <code>start.php</code> file.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">Auth::extend(\'adminauth\', function() {\n    return new Admin\\Libraries\\AdminAuth;\n});\n</pre><p>One final thing that we need to do is configure Auth to use this at runtime. We can do this in our base controller&#39;s constructor with the following.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: php; title: ; notranslate\" title=\"\">Config::set(\'auth.driver\', \'adminauth\');\n</pre><hr\n/><h2>Routes &amp; Controllers</h2><p>Before we can route to anything, we need to create a controller. Let&#39;s create our dashboard controller, which is what we&#39;ll see after logging in.</p><p>As we&#39;ll want this to show up at the root of our bundle (i.e. the handle we defined earlier), we&#39;ll need to call this <code>home.php</code>. Laravel uses the &#39;home&#39; keyword to establish what you want to show up at the root of your application or bundle.</p><p>Extend your base controller, and create an index view. For now, simply return &#39;Hello World&#39; so we can ensure that everything is working okay.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class Admin_Home_Controller extends Admin_Base_Controller {\n    public function get_index(){\n        return \'Hello World\';\n    }\n}\n</pre><p>Now that our controller is setup, we can route to it. Create a <code>routes.php</code> within your bundle, if you haven&#39;t already. Similar to our main application, each bundle can have its own routes file that works identically.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">Route::controller(array(\n    \'admin::home\',\n));\n</pre><p>Here, I&#39;ve registered the home controller, which Laravel will automatically assign to <code>/</code>. Later , we&#39;ll add our login controller to the array.</p><p>If you head to <code>/admin</code> (or whatever handle you defined earlier) in your browser, then you should see &#39;Hello World&#39;.</p><hr\n/><h2>Building the Login Form</h2><p>Let&#8217;s create the login controller, however, rather than extending the base controller, we&#8217;ll instead extend Laravel&#39;s main controller. The reason behind this decision will become apparent shortly.</p><p>Because we&#39;re not extending, we need to set a couple of things up before beginning &#8211; namely restful layouts, the correct auth driver, and our assets.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class Admin_Login_Controller extends Controller {\n    public $restful = true;\n    public function __construct(){\n        parent::__construct();\n        Config::set(\'auth.driver\', \'adminauth\');\n        Asset::container(\'header\')-&gt;bundle(\'admin\');\n        Asset::container(\'header\')-&gt;add(\'bootstrap\', \'css/bootstrap.min.css\');\n    }\n}\n</pre><p>Let&#39;s also create our view. We&#39;re going to be using Blade &#8211; Laravel&#39;s templating engine &#8211; to speed things up a bit. Within your bundles views directory, create a &#39;login&#39; directory and an &#39;index.blade.php&#39; file within it.</p><p>We&#39;ll pop in a standard HTML page structure and echo the assets.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;Login&lt;/title&gt;\n    {{Asset::container(\'header\')-&gt;styles()}}\n    &lt;!--[if lt IE 9]&gt;\n    &lt;script src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;\n    &lt;![endif]--&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre><p>Now, let&#39;s make sure that the view is being created in the controller. As we&#39;re using restful controllers, we can take advantage of the &#39;get&#39; verb in our method.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">public function get_index(){\n    return View::make(\'admin::login.index\');\n}\n</pre><p>Awesome! We&#39;re now good to start building our form, which we can create with the <code>Form</code> class.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">{{Form::open()}}\n{{Form::label(\'username\', \'Username\')}}\n{{Form::text(\'username\')}}\n{{Form::label(\'password\', \'Password\')}}\n{{Form::password(\'password\')}}\n{{Form::submit(\'Login\', array(\'class\' =&gt; \'btn btn-success\'))}}\n{{Form::token()}}\n{{Form::close()}}\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://cdn.tutsplus.com/net.tutsplus.com/authors/jeffreyway/login.jpg\" alt=\"Login Form\"></div><p>Above, we created a form that will post to itself (exactly what we want), along with various form elements and labels to go with it. The next step is to process the form.</p><p>As we&#39;re posting the form to itself and using restful controllers, we just need to create the <code>post_index</code> method and use this to process our login. If you&#39;ve never used Auth before, then go and have a peek at <a\nhref=\"http://laravel.com/docs/auth/usage#login\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\">the documentation</a> before moving on.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">public function post_index(){\n    $creds = array(\n        \'username\' =&gt; Input::get(\'username\'),\n        \'password\' =&gt; Input::get(\'password\'),\n    );\n    if (Auth::attempt($creds)) {\n        return Redirect::to(URL::to_action(\'admin::home@index\'));\n    } else {\n        return Redirect::back()-&gt;with(\'error\', true);\n    }\n}\n</pre><p>If the credentials are correct, the user will be redirected to the dashboard. Otherwise, they&#39;ll be redirected back with an error that we can check for in the login view. As this is just session data, and not validation errors, we only need to implement a simple check.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">@if(Session::get(\'error\'))\n    Sorry, your username or password was incorrect.\n@endif\n</pre><p>We&#39;ll also need to log users out; so let&#39;s create a <code>get_logout</code> method, and add the following. This will log users out, and then redirect them when visiting <code>/admin/login/logout</code>.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">public function get_logout(){\n    Auth::logout();\n    return Redirect::to(URL::to_action(\'admin::home@index\'));\n}\n</pre><p>The last thing we should do is add the login controller to our routes file.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">Route::controller(array(\n    \'admin::home\',\n    \'admin::login\',\n));\n</pre><h3>Filtering routes</h3><p>To stop people from bypassing our login screen, we need to filter our routes to determine if they&#39;re authorized users. We can create the filter in our <code>routes.php</code>, and attach it to our base controller, to filter before the route is displayed.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">Route::filter(\'auth\', function() {\n    if (Auth::guest()) return Redirect::to(URL::to_action(\'admin::login\'));\n});\n</pre><p>At this point, all that&#39;s left to do is call this in our base controller&#39;s constructor. If we extended our login controller from our base, then we&#39;d have an infinite loop that would eventually time out.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">$this-&gt;filter(\'before\', \'auth\');\n</pre><hr\n/><h2>Setting up the Views</h2><p>Earlier, we created our <code>main.blade.php</code> layout; now, we&#8217;re going to do something with it. Let&#39;s get an HTML page and our assets being brought in.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;title&gt;{{$title}}&lt;/title&gt;\n    {{Asset::container(\'header\')-&gt;styles()}}\n    &lt;!--[if lt IE 9]&gt;\n    &lt;script src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&gt;&lt;/script&gt;\n    &lt;![endif]--&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=&quot;container&quot;&gt;\n        {{$content}}\n    &lt;/div&gt;\n  {{Asset::container(\'footer\')-&gt;scripts()}}\n  &lt;/body&gt;\n  &lt;/html&gt;\n</pre><p>You&#39;ll notice that I&#39;ve also echoed out a couple of variables: <code>$title</code> and <code>$content</code>. We&#39;ll be able to use magic methods from our controller to pass data through to these. I&#39;ve also popped <code>$content</code> inside the container <code>div</code> that Bootstrap will provide the styling for.</p><p>Next, let&#39;s create the view for our dashboard. As we&#39;ll be nesting this, we only need to put the content we want to put into our container.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;h1&gt;Hello&lt;/h1&gt;\n&lt;p class=&quot;lead&quot;&gt;This is our dashboard view&lt;/p&gt;\n</pre><p>Save this as <code>index.blade.php</code> within the <code>views/dashboard</code> directory inside of your bundle.</p><p>We now need to set our controller to take advantage of the layout and view files that we just created. Within the <code>get_index</code> method that we created earlier, add the following.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">$this-&gt;layout-&gt;title = \'Dashboard\';\n$this-&gt;layout-&gt;nest(\'content\', \'admin::dashboard.index\');\n</pre><p><code>title</code> is a magic method that we can then echo out as a variable in our layout. By using <code>nest</code>, we&#39;re able to include a view inside the layout straight from our controller.</p><hr\n/><h2>Creating a Task</h2><p>In order to speed things up, Laravel provides us with an easy way to execute code from the command line. These are called &quot;Tasks&quot;; it&#39;s a good idea to create one to add a new user to the database easily.</p><p>We simply need to ensure that the file takes on the name of our task, and pop it into our bundle&#39;s tasks directory. I&#39;m going to call this <code>setup.php</code>, as we&#39;ll use it just after installing the bundle.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nuse Laravel\\CLI\\Command as Command;\nuse Admin\\Models\\Admin as Admin;\nclass Admin_Setup_Task {\npublic function run($arguments){\n    if(empty($arguments) || count($arguments) &lt; 5){\n        die(&quot;Error: Please enter first name, last name, username, email address and password\\n&quot;);\n    }\n    Command::run(array(\'bundle:publish\', \'admin\'));\n    $role = (!isset($arguments[5])) ? \'admin\' : $arguments[5];\n    $data = array(\n        \'name\' =&gt; $arguments[0].\' \'.$arguments[1],\n        \'username\' =&gt; $arguments[2],\n        \'email\' =&gt; $arguments[3],\n        \'password\' =&gt; Hash::make($arguments[4]),\n        \'role\' =&gt; $role,\n    );\n    $user = Admin::create($data);\n    echo ($user) ? \'Admin created successfully!\' : \'Error creating admin!\';\n}\n}\n</pre><p>Laravel will pass through an array of arguments; we can count these to ensure that we&#39;re getting exactly what we want. If not, we&#39;ll echo out an error. You&#39;ll also notice that we&#39;re using the <code>Command</code> class to run <code>bundle:publish</code>. This will allow you to run any command line task built into Laravel inside your application or bundle.</p><p>The main thing this task does is grab the arguments passed through to it, hash the password, and insert a new admin into the <code>Admins</code> table. To run this, we need to use the following in the command line.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">php artisan admin::setup firstname lastname username email@address.com password\n</pre><hr\n/><h2>What Now?</h2><p>In this tutorial, we created an boilerplate admin panel that is quite easy to extend. For example, the <code>roles</code> column that we created could allow you to limit what your clients are able to see.</p><p>A bundle can be anything from an admin panel, like we built today, to Markdown parsers &#8211; or even the entire <a\nhref=\"http://bundles.laravel.com/bundle/zendframework\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bundles.laravel.com\']);\">Zend Framework</a> (I&#39;m not kidding). Everything that we covered here will set you on your way to writing awesome Laravel bundles, which can be published to <a\nhref=\"http://bundles.laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bundles.laravel.com\']);\">Laravel&#39;s bundle directory</a>.</p><blockquote><p> Learn more about <a\nhref=\"http://net.tutsplus.com/tutorials/php/the-essentials-of-creating-laravel-bundles/\" >creating Laravel bundles</a> here on Nettuts+.</p></blockquote><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(2,3,1,1358016488,NULL,' Building Ribbit in PHP ','In the initial entry in this series, we took care of the UI-aspect of our Twitter-clone, called Ribbit. Now, we’ll begin coding the application in a number of languages. This lesson will leverage standard PHP (with homegrown MVC), but, in future articles, we’ll review other implementations, such as with Rails or Laravel.There is a lot to cover, so let’s get started.','In the initial entry in this series, we took care of the UI-aspect of our Twitter-clone, called Ribbit. Now, we’ll begin coding the application in a number of languages. This lesson will leverage standard PHP (with homegrown MVC), but, in future articles, we’ll review other implementations, such as with Rails or Laravel.There is a lot to cover, so let’s get started.',1,1,'building-ribbit-in-php',216,0,'http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak/ribbit.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\"> <a\nhref=\"https://github.com/NETTUTS/Ribbit-PHP\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div><div\nclass=\"big_btn\"> <a\nhref=\"http://ribbitphp.pagodabox.com/home\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-28802\'), post_id: 28802, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In the <a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/build-a-twitter-clone-from-scratch-the-design/\" >initial entry</a> in this series, we took care of the UI-aspect of our Twitter-clone, called Ribbit. Now, we&#8217;ll begin coding the application in a number of languages. This lesson will leverage standard PHP (with homegrown MVC), but, in future articles, we&#8217;ll review other implementations, such as with Rails or Laravel.</p><p>There is a lot to cover, so let&#8217;s get started.</p><p><span\nid=\"more-28802\"></span></p><hr\n/><h2>Where We Last Left Off</h2><div\nclass=\"tutorial_image\"> <a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/build-a-twitter-clone-from-scratch-the-design/\" ><br\n/><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2170_ribbit/images/buddies_small.jpg\" alt=\"Ribbit\"></a></div><p>For the unfamiliar, MVC stands for Model-View-Controller. You can thing of MVC as Database-HTML-Logic Code. Separating your code into these distinct parts makes it easier to replace one or more of the components without interfering with the rest of your app. As you will see below, this level of abstraction also encourages you to write small, concise functions that rely on lower-level functions.</p><p>I like to start with the Model when building this type of application&#8211;everything tends to connect to it (I.E. signup, posts, etc). Let&#8217;s setup the database.</p><hr\n/><h2>The Database</h2><p>We require four tables for this application. They are:</p><ul><li><code>Users</code> &#8211; holds the user&#8217;s info.</li><li><code>Ribbits</code> &#8211; contains the actual ribbits (posts).</li><li><code>Follows</code> &#8211; the list of who follows who.</li><li><code>UserAuth</code> &#8211; the table for holding the login authentications</li></ul><p>I&#8217;ll show you how to create these tables from the terminal. If you use an admin program (such as phpMyAdmin), then you can either click the SQL button to directly enter the commands or add the tables through the GUI.</p><p>To start, open up a terminal window, and enter the following command:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nmysql -u username -h hostAddress -P portNumber -p\n</pre><p>If you are running this command on a MySQL machine, and the port number was not modified, you may omit the <code>-h</code><br\n/> and <code>-P</code> arguments. The command defaults to localhost and port 3306, respectively. Once you login, you can create the database using the following SQL:</p><pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nCREATE DATABASE Ribbit;\nUSE Ribbit;\n</pre><p>Let&#8217;s begin by creating the <code>Users</code> table:</p><pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nCREATE TABLE Users (\n    id              INT NOT NULL AUTO_INCREMENT,\n    username        VARCHAR(18) NOT NULL,\n    name            VARCHAR(36),\n    password        VARCHAR(64),\n    created_at      DATETIME,\n    email           TEXT,\n    gravatar_hash   VARCHAR(32),\n    PRIMARY KEY(id, username)\n);\n</pre><p>This gives us the following table:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak/P1.png\" border=\"0\" /><br\n/><em>Users Table</em></div><p>The next table I want to create is the <code>Ribbits</code> table. This table should have four fields: <code>id</code>, <code>user_id</code>, <code>ribbit</code> and <code>created_at</code>. The SQL code for this table is:</p><pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nCREATE TABLE Ribbits (\n    id            INT NOT NULL AUTO_INCREMENT,\n    user_id       INT NOT NULL,\n    ribbit        VARCHAR(140),\n    created_at    DATETIME,\n    PRIMARY KEY(id, user_id)\n);\n</pre><div\nclass=\"tutorial_image\"><img\nsrc=\"http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak/P2.png\" border=\"0\" /><br\n/><em>Ribbits Table</em></div><p>This is fairly simple stuff, so I won&#8217;t elaborate too much.</p><p>Next, the <code>Follows</code> table. This simply holds the <code>id</code>s of both the follower and followee:</p><pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nCREATE Table Follows (\n    id            INT NOT NULL AUTO_INCREMENT,\n    user_id       INT NOT NULL,\n    followee_id   INT,\n    PRIMARY KEY(id, user_id)\n);\n</pre><div\nclass=\"tutorial_image\"><img\nsrc=\"http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak/P3.png\" border=\"0\" /><br\n/><em>Follows Table</em></div><p>Finally, we have a table, called <code>UserAuth</code>. This holds the user&#8217;s username and password hash. I opted not to use the user&#8217;s ID, because the program already stores the username, when logging in and signing up (the two times when entries are added to this table), but the program would need to make an extra call to get the user&#8217;s ID number. Extra calls mean more latency, so I chose not to use the user&#8217;s ID.</p><p>In a real world project, you may want to add another field like &#8216;hash2&#8242; or &#8216;secret&#8217;. If all you need to authenticate a user is one hash, then an attacker only has to guess that one hash. For example: I randomly enter characters into the hash field in the cookie. If there are enough users, it might just match someone. But if you have to guess and match two hashes, then the chance of someone guessing the correct pair drops exponentially (the same applies to adding three, etc). But to keep things simple, I will only have one hash.</p><p>Here&#8217;s the SQL code:</p><pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nCREATE TABLE UserAuth (\n    id        INT NOT NULL AUTO_INCREMENT,\n    hash      VARCHAR(52) NOT NULL,\n    username  VARCHAR(18),\n    PRIMARY KEY(id, hash)\n);\n</pre><p>And this final table looks like the following image:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak/P4.png\" border=\"0\" /><br\n/><em>UserAuth Table</em></div><p>Now that we have all the tables setup, you should have a pretty good idea of how the overall site will work. We can start writing the Model class in our MVC framework.</p><hr\n/><h2>The Model</h2><p>Create a file, called <code>model.php</code> and enter the following class declaration:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Model{\n    private $db; // Holds mysqli Variable\n    function __construct(){\n    	$this-&gt;db = new mysqli(\'localhost\', \'user\', \'pass\', \'Ribbit\');\n    }\n}\n</pre><p>This looks familiar to you if you have written PHP classes in the past. This code basically creates a class called <code>Model</code>. It has one private property named <code>$db</code> which holds a <code>mysqli</code> object. Inside the constructor, I initialized the <code>$db</code> property using the connection info to my database. The parameter order is: address, username, password and database name.</p><blockquote><p>Before we get into any page-specific code, I want to create a few low-level commands that abstract the common mySQL functions like <code>SELECT</code> and <code>INSERT</code>.</p></blockquote><p>The first function I want to implement is <code>select()</code>. It accepts a string for the table&#8217;s name and an array of properties for building the <code>WHERE</code> clause. Here is the entire function, and it should go right after the constructor:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">//--- private function for performing standard SELECTs\nprivate function select($table, $arr){\n    $query = &quot;SELECT * FROM &quot; . $table;\n    $pref = &quot; WHERE &quot;;\n    foreach($arr as $key =&gt; $value)\n    {\n        $query .= $pref . $key . &quot;=\'&quot; . $value . &quot;\'&quot;;\n        $pref = &quot; AND &quot;;\n    }\n    $query .= &quot;;&quot;;\n    return $this-&gt;db-&gt;query($query);\n}\n</pre><p>The function builds a query string using the table&#8217;s name and the array of properties. It then returns a result object which we get by passing the query string through <code>mysqli</code>&#8216;s <code>query()</code> function. The next two functions are very similar; they are the <code>insert()</code> function and the <code>delete()</code> function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n    //--- private function for performing standard INSERTs\n    private function insert($table, $arr)\n    {\n        $query = &quot;INSERT INTO &quot; . $table . &quot; (&quot;;\n        $pref = &quot;&quot;;\n        foreach($arr as $key =&gt; $value)\n        {\n            $query .= $pref . $key;\n            $pref = &quot;, &quot;;\n        }\n        $query .= &quot;) VALUES (&quot;;\n        $pref = &quot;&quot;;\n        foreach($arr as $key =&gt; $value)\n        {\n            $query .= $pref . &quot;\'&quot; . $value . &quot;\'&quot;;\n            $pref = &quot;, &quot;;\n        }\n        $query .= &quot;);&quot;;\n        return $this-&gt;db-&gt;query($query);\n    }\n    //--- private function for performing standard DELETEs\n    private function delete($table, $arr){\n        $query = &quot;DELETE FROM &quot; . $table;\n        $pref = &quot; WHERE &quot;;\n        foreach($arr as $key =&gt; $value)\n        {\n            $query .= $pref . $key . &quot;=\'&quot; . $value . &quot;\'&quot;;\n            $pref = &quot; AND &quot;;\n        }\n        $query .= &quot;;&quot;;\n        return $this-&gt;db-&gt;query($query);\n    }\n</pre><p>As you may have guessed, both functions generate a SQL query and return a result. I want to add one more helper function: the <code>exists()</code> function. This will simply check if a row exists in a specified table. Here is the function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n//--- private function for checking if a row exists\nprivate function exists($table, $arr){\n    $res = $this-&gt;select($table, $arr);\n    return ($res-&gt;num_rows &gt; 0) ? true : false;\n}\n</pre><p>Before we make the more page-specific functions, we should probably make the actual pages. Save this file and we&#8217;ll start on URL routing.</p><hr\n/><h2>The Router</h2><p>In a MVC framework, all HTTP requests usually go to a single controller, and the controller determines which function to execute based on the requested URL. We are going to do this with a class called <code>Router</code>. It will accept a string (the requested page) and will return the name of the function that the controller should execute. You can think of it as a phone book for function names instead of numbers.</p><p>Here is the completed class&#8217;s structure; just save this to a file called <code>router.php</code>:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Router{\n	private $routes;\n	function __construct(){\n		$this-&gt;routes = array();\n	}\n	public function lookup($query)\n	{\n		if(array_key_exists($query, $this-&gt;routes))\n		{\n			return $this-&gt;routes[$query];\n		}\n		else\n		{\n			return false;\n		}\n	}\n}\n</pre><p>This class has one private property called <code>routes</code>, which is the &#8220;phone book&#8221; for our controllers. There&#8217;s also a simple function called <code>lookup()</code>, which returns a string if the path exists in the <code>routes</code> property. To save time, I will list the ten functions that our controller will have:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n	function __construct(){\n		$this-&gt;routes = array(\n			&quot;home&quot; =&gt; &quot;indexPage&quot;,\n            &quot;signup&quot; =&gt; &quot;signUp&quot;,\n            &quot;login&quot; =&gt; &quot;login&quot;,\n            &quot;buddies&quot; =&gt; &quot;buddies&quot;,\n            &quot;ribbit&quot; =&gt; &quot;newRibbit&quot;,\n            &quot;logout&quot; =&gt; &quot;logout&quot;,\n            &quot;public&quot; =&gt; &quot;publicPage&quot;,\n            &quot;profiles&quot; =&gt; &quot;profiles&quot;,\n            &quot;unfollow&quot; =&gt; &quot;unfollow&quot;,\n            &quot;follow&quot; =&gt; &quot;follow&quot;\n		);\n	}\n</pre><p>The list goes by the format of <code>\'url\' => \'function name\'</code>. For example, if someone goes to <code>ribbit.com/home</code>, then the router tells the controller to execute the <code>indexPage()</code> function.</p><p>The router is only half the solution; we need to tell Apache to redirect all traffic to the controller. We&#8217;ll achieve this by creating a file called <code>.htaccess</code> in the root directory of the site and adding the following to the file:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nRewriteEngine On\nRewriteRule ^/?Resource/(.*)$ /$1 [L]\nRewriteRule ^$ /home [redirect]\nRewriteRule ^([a-zA-Z]+)/?([a-zA-Z0-9/]*)$ /app.php?page=$1&amp;query=$2 [L]\n</pre><p>This may seem a little intimidating if you&#8217;ve never used apache&#8217;s mod_rewrite. But don&#8217;t worry; I&#8217;ll walk you through it line by line.</p><blockquote\nclass=\"pullquote\"><p>In a MVC framework, all HTTP requests usually go to a single controller.</p></blockquote><p>The first line tells Apache to enable mod_rewrite; the remaining lines are the rewrite rules. With mod_rewrite, you can take an incoming request with a certain URL and pass the request onto a different file. In our case, we want all requests to be handled by a single file so that we can process them with the controller. The mod_rewrite module also lets us have URLs like <code>ribbit.com/profile/username</code> instead of <code>ribbit.com/profile.php?username=username</code>&#8211;making the overall feel of your app more professional.</p><p>I said, we want all requests to go to a single file, but that&#8217;s really not accurate. We want Apache to normally handle requests for resources like images, CSS files, etc. The first rewrite rule tells Apache to handle requests that start with <code>Resource/</code> in a regular fashion. It&#8217;s a regular expression that takes everything after the word <code>Resource/</code> (notice the grouping brackets) and uses it as the real URL to the file. So for example: the link <code>ribbit.com/Resource/css/main.css</code> loads the file located at <code>ribbit.com/css/main.css</code>.</p><blockquote><p>The next rule tells Apache to redirect blank requests (i.e. a request to the websites root) to <code>/home</code>.</p></blockquote><p>The word &#8220;redirect&#8221; in the square brackets at the end of the line tells Apache to actually redirect the browser, as opposed rewriting on URL to another (like in the previous rule).</p><blockquote\nclass=\"pullquote\"><p>There are different kinds of flashes: error, warning and notice.</p></blockquote><p>The last rule is the one we came for; it takes all requests (other than those that start with <code>Resource/</code>) and sends them to a PHP file called <code>app.php</code>. That is the file that loads the controller and runs the whole application.</p><p>The &#8220;<code>^</code>&#8221; symbol represents the beginning of the string and the &#8220;<code>$</code>&#8221; represents the end. So the regular expression can be translated into English as: &#8220;Take everything from the beginning of the URL until the first slash, and put it in group 1. Then take everything after the slash, and put it in group 2. Finally, pass the link to Apache as if it said <code>app.php?page=group1&#038;query=group2</code>.&#8221; The &#8220;<code>[L]</code>&#8221; that is in the first and third line tells Apache to stop after that line. So if the request is a resource URL, it shouldn&#8217;t continue to the next rule; it should break after the first one.</p><p>I hope all that made sense; the following picture better illustrates what&#8217;s going on.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak/P5.png\" border=\"0\" /></div><p>If you are still unclear on the actual regular expression, then we have <a\nhref=\"http://net.tutsplus.com/tutorials/other/8-regular-expressions-you-should-know/\"  alt=\"8 regular expressions you should know\">a very nice article that you can read</a>.</p><p>Now that we have everything setup URL-wise, let&#8217;s create the controller.</p><hr\n/><h2>The Controller</h2><p>The controller is where most of the magic happens; all the other pieces of the app, including the model and router, connect through here. Let&#8217;s begin by creating a file called <code>controller.php</code> and enter in the following:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nrequire(&quot;model.php&quot;);\nrequire(&quot;router.php&quot;);\nclass Controller{\n	private $model;\n	private $router;\n	//Constructor\n	function __construct(){\n		//initialize private variables\n		$this-&gt;model = new Model();\n		$this-&gt;router = new Router();\n        //Proccess Query String\n        $queryParams = false;\n        if(strlen($_GET[\'query\']) &gt; 0)\n        {\n            $queryParams = explode(&quot;/&quot;, $_GET[\'query\']);\n        }\n        $page = $_GET[\'page\'];\n		//Handle Page Load\n		$endpoint = $this-&gt;router-&gt;lookup($page);\n		if($endpoint === false)\n		{\n			header(&quot;HTTP/1.0 404 Not Found&quot;);\n		}\n		else\n		{\n            $this-&gt;$endpoint($queryParams);\n		}\n	}\n</pre><blockquote\nclass=\"pullquote\"><p>With mod_rewrite, you can take an incoming request with a certain URL and pass the request onto a different file.</p></blockquote><p>We first load our model and router files, and we then create a class called <code>Controller</code>. It has two private variables: one for the model and one for the router. Inside the constructor, we initialize these variables and process the query string.</p><p>If you remember, the query can contain multiple values (we wrote in the <code>.htaccess</code> file that everything after the first slash gets put in the query&#8211;this includes all slashes that may follow). So we split the query string by slashes, allowing us to pass multiple query parameters if needed.</p><p>Next, we pass whatever was in the <code>$page</code> variable to the router to determine the function to execute. If the router returns a string, then we will call the specified function and pass it the query parameters. If the router returns <code>false</code>, the controller sends the 404 status code. You can redirect the page to a custom 404 view if you so desire, but I&#8217;ll keep things simple.</p><p>The framework is starting to take shape; you can now call a specific function based on a URL. The next step is to add a few functions to the controller class to take care of the lower-level tasks, such as loading a view and redirecting the page.</p><p>The first function simply redirects the browser to a different page. We do this a lot, so it&#8217;s a good idea to make a function for it:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function redirect($url){\n    header(&quot;Location: /&quot; . $url);\n}\n</pre><p>The next two functions load a view and a page, respectively:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function loadView($view, $data = null){\n    if (is_array($data))\n    {\n        extract($data);\n    }\n    require(&quot;Views/&quot; . $view . &quot;.php&quot;);\n}\nprivate function loadPage($user, $view, $data = null, $flash = false){\n    $this-&gt;loadView(&quot;header&quot;, array(\'User\' =&gt; $user));\n    if ($flash !== false)\n    {\n        $flash-&gt;display();\n    }\n    $this-&gt;loadView($view, $data);\n    $this-&gt;loadView(&quot;footer&quot;);\n}\n</pre><p>The first function loads a single view from the &#8220;Views&#8221; folder, optionally extracting the variables from the attached array. The second function is the one we will reference, and it loads the header and footer (they are the same on all pages around the specified view for that page) and any other messages (flash i.e. an error message, greetings, etc).</p><p>There is one last function that we need to implement which is required on all pages: the <code>checkAuth()</code> function. This function will check if a user is signed in, and if so, pass the user&#8217;s data to the page. Otherwise, it returns false. Here is the function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function checkAuth(){\n    if(isset($_COOKIE[\'Auth\']))\n    {\n        return $this-&gt;model-&gt;userForAuth($_COOKIE[\'Auth\']);\n    }\n    else\n    {\n        return false;\n    }\n}\n</pre><p>We first check whether or not the <code>Auth</code> cookie is set. This is where the hash we talked about earlier will be placed. If the cookie exists, then the function tries to verify it with the database, returning either the user on a successful match or false if it&#8217;s not in the table.</p><p>Now let&#8217;s implement that function in the model class.</p><hr\n/><h2>A Few Odds and Ends</h2><p>In the <code>Model</code> class, right after the <code>exists()</code> function, add the following function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function userForAuth($hash){\n    $query = &quot;SELECT Users.* FROM Users JOIN (SELECT username FROM UserAuth WHERE hash = \'&quot;;\n    $query .= $hash . &quot;\' LIMIT 1) AS UA WHERE Users.username = UA.username LIMIT 1&quot;;\n    $res = $this-&gt;db-&gt;query($query);\n    if($res-&gt;num_rows &gt; 0)\n    {\n        return $res-&gt;fetch_object();\n    }\n    else\n    {\n        return false;\n    }\n}\n</pre><p>If you remember our tables, we have a <code>UserAuth</code> table that contains the hash along with a username. This SQL query retrieves the row that contains the hash from the cookie and returns the user with the matching username.</p><p>That&#8217;s all we have to do in this class for now. Let&#8217;s go back into the <code>controller.php</code> file and implement the <code>Flash</code> class.</p><blockquote><p>In the <code>loadPage()</code> function, there was an option to pass a <code>flash</code> object, a message that appears above all the content.</p></blockquote><p>For example: if an unauthenticated user tries to post something, the app displays a message similar to, &#8220;You have to be signed in to perform that action.&#8221; There are different kinds of flashes: error, warning and notice, and I decided it is easier to create a <code>Flash</code> class instead of passing multiple variables (like <code>msg</code> and <code>type</code>. Additionally, the class will have the ability to output a flash&#8217;s HTML.</p><p>Here is the complete <code>Flash</code> class, you can add this to <code>controller.php</code> before the <code>Controller</code> class definition:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Flash{\n    public $msg;\n    public $type;\n    function __construct($msg, $type)\n    {\n        $this-&gt;msg = $msg;\n        $this-&gt;type = $type;\n    }\n    public function display(){\n        echo &quot;&lt;div class=\\&quot;flash &quot; . $this-&gt;type . &quot;\\&quot;&gt;&quot; . $this-&gt;msg . &quot;&lt;/div&gt;&quot;;\n    }\n}\n</pre><p>This class is straight-forward. It has two properties and a function to output the flash&#8217;s HTML.</p><p>We now have all the pieces needed to start displaying pages, so let&#8217;s create the <code>app.php</code> file. Create the file and insert the following code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;?php\n	require(&quot;controller.php&quot;);\n	$app = new Controller();\n</pre><p>And that&#8217;s it! The controller reads the request from the GET variable, passes it to the router, and calls the appropriate function. Let&#8217;s create some of the views to finally get something displayed in the browser.</p><hr\n/><h2>The Views</h2><p>Create a folder in the root of your site called <code>Views</code>. As you may have already guessed, this directory will contains all the actual views. If you are unfamiliar with the concept of a view, you can think of them as files that generate pieces of HTML that build the page. Basically, we&#8217;ll have a view for the header, footer and one for each page. These pieces combine into the final result (i.e. header + page_view + footer = final_page).</p><p>Let&#8217;s start with the footer; it is just standard HTML. Create a file called <code>footer.php</code> inside the <code>Views</code> folder and add the following HTML:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n		&lt;/div&gt;\n	&lt;/div&gt;\n    &lt;footer&gt;\n		&lt;div class=&quot;wrapper&quot;&gt;\n			Ribbit - A Twitter Clone Tutorial&lt;img src=&quot;http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak//Resource/gfx/logo-nettuts.png&quot;&gt;\n		&lt;/div&gt;\n	&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre><p>I think this demonstrates two things very well:</p><ul><li>These are simply pieces of an actual page.</li><li>To access the images that are in the <code>gfx</code> folder, I added <code>Resources/</code> to the beginning of the path (for the mod_rewrite rule).</li></ul><p>Next, let\'s create the <code>header.php</code> file. The header is a bit more complicated because it must determine if the user is signed in. If the user is logged in, it displays the menu bar; otherwise, it displays a login form. Here is the complete <code>header.php</code> file:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n	&lt;head&gt;\n		&lt;link rel=&quot;stylesheet/less&quot; href=&quot;/Resource/style.less&quot;&gt;\n		&lt;script src=&quot;/Resource/less.js&quot;&gt;&lt;/script&gt;\n	&lt;/head&gt;\n	&lt;body&gt;\n		&lt;header&gt;\n			&lt;div class=&quot;wrapper&quot;&gt;\n				&lt;img src=&quot;http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak//Resource/gfx/logo.png&quot;&gt;\n				&lt;span&gt;Twitter Clone&lt;/span&gt;\n				&lt;?php if($User !== false){ ?&gt;\n	                &lt;nav&gt;\n	                    &lt;a href=&quot;/buddies&quot;&gt;Your Buddies&lt;/a&gt;\n	                    &lt;a href=&quot;/public&quot;&gt;Public Ribbits&lt;/a&gt;\n	                    &lt;a href=&quot;/profiles&quot;&gt;Profiles&lt;/a&gt;\n	                &lt;/nav&gt;\n	                &lt;form action=&quot;/logout&quot; method=&quot;get&quot;&gt;\n	                    &lt;input type=&quot;submit&quot; id=&quot;btnLogOut&quot; value=&quot;Log Out&quot;&gt;\n	                &lt;/form&gt;\n	            &lt;?php }else{ ?&gt;\n	                &lt;form method=&quot;post&quot; action=&quot;/login&quot;&gt;\n	                    &lt;input name=&quot;username&quot; type=&quot;text&quot; placeholder=&quot;username&quot;&gt;\n	                    &lt;input name=&quot;password&quot; type=&quot;password&quot; placeholder=&quot;password&quot;&gt;\n	                    &lt;input type=&quot;submit&quot; id=&quot;btnLogIn&quot; value=&quot;Log In&quot;&gt;\n	                &lt;/form&gt;\n	            &lt;?php } ?&gt;\n			&lt;/div&gt;\n		&lt;/header&gt;\n	    &lt;div id=&quot;content&quot;&gt;\n			&lt;div class=&quot;wrapper&quot;&gt;\n</pre><p>I\'m not going to explain much of the HTML. Overall, this view loads in the CSS style sheet and builds the correct header based on the user\'s authentication status. This is accomplished with a simple <code>if</code> statement and the variable passed from the controller.</p><p>The last view for the homepage is the actual <code>home.php </code>view. This view contains the greeting picture and signup form. Here is the code for <code>home.php</code>:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;img src=&quot;http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak//Resource/gfx/frog.jpg&quot;&gt;\n&lt;div class=&quot;panel right&quot;&gt;\n  &lt;h1&gt;New to Ribbit?&lt;/h1&gt;\n  &lt;p&gt;\n  &lt;form action=&quot;/signup&quot; method=&quot;post&quot;&gt;\n    &lt;input name=&quot;email&quot; type=&quot;text&quot; placeholder=&quot;Email&quot;&gt;\n    &lt;input name=&quot;username&quot; type=&quot;text&quot; placeholder=&quot;Username&quot;&gt;\n    &lt;input name=&quot;name&quot; type=&quot;text&quot; placeholder=&quot;Full Name&quot;&gt;\n    &lt;input name=&quot;password&quot; type=&quot;password&quot; placeholder=&quot;Password&quot;&gt;\n    &lt;input name=&quot;password2&quot; type=&quot;password&quot; placeholder=&quot;Confirm Password&quot;&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;Create Account&quot;&gt;\n  &lt;/form&gt;\n  &lt;/p&gt;\n&lt;/div&gt;\n</pre><p>Together, these three views complete the homepage. Now let\'s go write the function for the home page.</p><hr\n/><h2>The Home Page</h2><p>We need to write a function in the <code>Controller</code> class called <code>indexPage()</code> to load the home page (this is what we set up in the router class). The following complete function should go in the <code>Controller</code> class after the <code>checkAuth()</code> function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function indexPage($params){\n  $user = $this-&gt;checkAuth();\n  if($user !== false) { $this-&gt;redirect(&quot;buddies&quot;); }\n  else\n  {\n    $flash = false;\n    if($params !== false)\n    {\n      $flashArr = array(\n        &quot;0&quot; =&gt; new Flash(&quot;Your Username and/or Password was incorrect.&quot;, &quot;error&quot;),\n        &quot;1&quot; =&gt; new Flash(&quot;There\'s already a user with that email address.&quot;, &quot;error&quot;),\n        &quot;2&quot; =&gt; new Flash(&quot;That username has already been taken.&quot;, &quot;error&quot;),\n        &quot;3&quot; =&gt; new Flash(&quot;Passwords don\'t match.&quot;, &quot;error&quot;),\n        &quot;4&quot; =&gt; new Flash(&quot;Your Password must be at least 6 characters long.&quot;, &quot;error&quot;),\n        &quot;5&quot; =&gt; new Flash(&quot;You must enter a valid Email address.&quot;, &quot;error&quot;),\n        &quot;6&quot; =&gt; new Flash(&quot;You must enter a username.&quot;, &quot;error&quot;),\n        &quot;7&quot; =&gt; new Flash(&quot;You have to be signed in to acces that page.&quot;, &quot;warning&quot;)\n      );\n      $flash = $flashArr[$params[0]];\n    }\n    $this-&gt;loadPage($user, &quot;home&quot;, array(), $flash);\n  }\n}\n</pre><p>The first two lines check if the user is already signed in. If so, the function redirects the user to the \"buddies\" page where they can read their friends\' posts and view their profile. If the user is not signed in, then it continues to load the home page, checking if there are any flashes to display. So for instance, if the user goes to <code>ribbit.com/home/0</code>, then it this function shows the first error and so on for the next seven flashes. Afterwards, we call the <code>loadPage()</code> function to display everything on the screen.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p>At this point if you have everything setup correctly (i.e. Apache and our code so far), then you should be able to go to the root of your site (e.g. localhost) and see the home page.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak/P6.png\" border=\"0\" /></div><p>Congratulations!! It\'s smooth sailing from here on out... well at least smoother sailing. It\'s just a matter of repeating the previous steps for the other nine functions that we defined in the router.</p><hr\n/><h2>Rinse and Repeat</h2><p>The next logical step is to create the signup function, you can add this right after the <code>indexPage()</code>:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function signUp(){\n  if($_POST[\'email\'] == &quot;&quot; || strpos($_POST[\'email\'], &quot;@&quot;) === false){\n    $this-&gt;redirect(&quot;home/5&quot;);\n  }\n  else if($_POST[\'username\'] == &quot;&quot;){\n    $this-&gt;redirect(&quot;home/6&quot;);\n  }\n  else if(strlen($_POST[\'password\']) &lt; 6)\n  {\n    $this-&gt;redirect(&quot;home/4&quot;);\n  }\n  else if($_POST[\'password\'] != $_POST[\'password2\'])\n  {\n    $this-&gt;redirect(&quot;home/3&quot;);\n  }\n  else{\n    $pass = hash(\'sha256\', $_POST[\'password\']);\n    $signupInfo = array(\n      \'username\' =&gt; $_POST[\'username\'],\n      \'email\' =&gt; $_POST[\'email\'],\n      \'password\' =&gt; $pass,\n      \'name\' =&gt; $_POST[\'name\']\n    );\n    $resp = $this-&gt;model-&gt;signupUser($signupInfo);\n    if($resp === true)\n    {\n      $this-&gt;redirect(&quot;buddies/1&quot;);\n    }\n    else\n    {\n      $this-&gt;redirect(&quot;home/&quot; . $resp);\n    }\n  }\n}\n</pre><p>This function goes through a standard signup process by making sure everything checks out. If any of the user\'s info doesn\'t pass, the function redirects the user back to the home page with the appropriate error code for the <code>indexPage()</code> function to display.</p><blockquote><p>The checks for existing usernames and passwords cannot be performed here.</p></blockquote><p>Those checks need to happen in the <code>Model</code> class because we need a connection to the database. Let\'s go back to the <code>Model</code> class and implement the <code>signupUser()</code> function. You should put this right after the <code>userForAuth()</code> function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function signupUser($user){\n  $emailCheck = $this-&gt;exists(&quot;Users&quot;, array(&quot;email&quot; =&gt; $user[\'email\']));\n  if($emailCheck){\n    return 1;\n  }\n  else {\n    $userCheck = $this-&gt;exists(&quot;Users&quot;, array(&quot;username&quot; =&gt; $user[\'username\']));\n    if($userCheck){\n      return 2;\n    }\n    else{\n      $user[\'created_at\'] = date( \'Y-m-d H:i:s\');\n      $user[\'gravatar_hash\'] = md5(strtolower(trim($user[\'email\'])));\n      $this-&gt;insert(&quot;Users&quot;, $user);\n      $this-&gt;authorizeUser($user);\n      return true;\n    }\n  }\n}\n</pre><p>We use our <code>exists()</code> function to check the provided email or username, returning an error code either already exists. If everything passes, then we add the final few fields, <code>created_at</code> and <code>gravatar_hash</code>, and insert them into the database.</p><p>Before returning <code>true</code>, we authorize the user. This function adds the Auth cookie and inserts the credentials into the <code>UserAuth</code> database. Let\'s add the <code>authorizeUser()</code> function now:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function authorizeUser($user){\n  $chars = &quot;qazwsxedcrfvtgbyhnujmikolp1234567890QAZWSXEDCRFVTGBYHNUJMIKOLP&quot;;\n  $hash = sha1($user[\'username\']);\n  for($i = 0; $i&lt;12; $i++)\n  {\n    $hash .= $chars[rand(0, 61)];\n  }\n  $this-&gt;insert(&quot;UserAuth&quot;, array(&quot;hash&quot; =&gt; $hash, &quot;username&quot; =&gt; $user[\'username\']));\n  setcookie(&quot;Auth&quot;, $hash);\n}\n</pre><p>This function builds the unique hash for a user on sign up and login. This isn\'t a very secure method of generating hashes, but I combine the sha1 hash of the username along with twelve random alphanumeric characters to keep things simple.</p><blockquote><p>It\'s good to attach some of the user\'s info to the hash because it helps make the hashes unique to that user.</p></blockquote><p>There is a finite set of unique character combinations, and you\'ll eventually have two users with the same hash. But if you add the user\'s ID to the hash, then you are guaranteed a unique hash for every user.</p><hr\n/><h2>Login and Logout</h2><p>To finish the functions for the home page, let\'s implement the <code>login()</code> and <code>logout()</code> functions. Add the following to the <code>Controller</code> class after the <code>login()</code> function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function login(){\n  $pass = hash(\'sha256\', $_POST[\'password\']);\n  $loginInfo = array(\n    \'username\' =&gt; $_POST[\'username\'],\n    \'password\' =&gt; $pass\n  );\n  if($this-&gt;model-&gt;attemptLogin($loginInfo))\n  {\n    $this-&gt;redirect(&quot;buddies/0&quot;);\n  }\n  else\n  {\n    $this-&gt;redirect(&quot;home/0&quot;);\n  }\n}\n</pre><p>This simply takes the POST fields from the login form and attempts to login. On a successful login, it takes the user to the \"buddies\" page. Otherwise, it redirects back to the homepage to display the appropriate error. Next, I\'ll show you the <code>logout()</code> function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function logout() {\n  $this-&gt;model-&gt;logoutUser($_COOKIE[\'Auth\']);\n  $this-&gt;redirect(&quot;home&quot;);\n}\n</pre><p>The <code>logout()</code> function is even simpler than <code>login()</code>. It executes one of <code>Model</code>\'s functions to erase the cookie and remove the entry from the database.</p><p>Let\'s jump over to the <code>Model</code> class and add the necessary functions for these to updates. The first is <code>attemptLogin()</code> which tries to login and returns <code>true</code> or <code>false</code>. Then we have <code>logoutUser()</code>:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function attemptLogin($userInfo){\n  if($this-&gt;exists(&quot;Users&quot;, $userInfo)){\n    $this-&gt;authorizeUser($userInfo);\n    return true;\n  }\n  else{\n    return false;\n  }\n}\npublic function logoutUser($hash){\n  $this-&gt;delete(&quot;UserAuth&quot;, array(&quot;hash&quot; =&gt; $hash));\n  setcookie (&quot;Auth&quot;, &quot;&quot;, time() - 3600);\n}\n</pre><hr\n/><h2>The Buddies Page</h2><p>Hang with me; we are getting close to the end! Let\'s build the \"Buddies\" page. This page contains your profile information and a list of posts from you and the people you follow. Let\'s start with the actual view, so create a file called <code>buddies.php</code> in the <code>Views</code> folder and insert the following:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;div id=&quot;createRibbit&quot; class=&quot;panel right&quot;&gt;\n    &lt;h1&gt;Create a Ribbit&lt;/h1&gt;\n    &lt;p&gt;\n        &lt;form action=&quot;/ribbit&quot; method=&quot;post&quot;&gt;\n            &lt;textarea name=&quot;text&quot; class=&quot;ribbitText&quot;&gt;&lt;/textarea&gt;\n            &lt;input type=&quot;submit&quot; value=&quot;Ribbit!&quot;&gt;\n        &lt;/form&gt;\n    &lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=&quot;ribbits&quot; class=&quot;panel left&quot;&gt;\n	&lt;h1&gt;Your Ribbit Profile&lt;/h1&gt;\n	&lt;div class=&quot;ribbitWrapper&quot;&gt;\n		&lt;img class=&quot;avatar&quot; src=&quot;http://www.gravatar.com/avatar/&lt;?php echo $User-&gt;gravatar_hash; ?&gt;&quot;&gt;\n		&lt;span class=&quot;name&quot;&gt;&lt;?php echo $User-&gt;name; ?&gt;&lt;/span&gt; @&lt;?php echo $User-&gt;username; ?&gt;\n		&lt;p&gt;\n			&lt;?php echo $userData-&gt;ribbit_count . &quot; &quot;; echo ($userData-&gt;ribbit_count != 1) ? &quot;Ribbits&quot; : &quot;Ribbit&quot;; ?&gt;\n            &lt;span class=&quot;spacing&quot;&gt;&lt;?php echo $userData-&gt;followers . &quot; &quot;; echo ($userData-&gt;followers != 1) ? &quot;Followers&quot; : &quot;Follower&quot;; ?&gt;&lt;/span&gt;\n            &lt;span class=&quot;spacing&quot;&gt;&lt;?php echo $userData-&gt;following . &quot; Following&quot;; ?&gt;&lt;/span&gt;&lt;br&gt;\n			&lt;?php echo $userData-&gt;ribbit; ?&gt;\n		&lt;/p&gt;\n	&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;panel left&quot;&gt;\n	&lt;h1&gt;Your Ribbit Buddies&lt;/h1&gt;\n    &lt;?php foreach($fribbits as $ribbit){ ?&gt;\n            &lt;div class=&quot;ribbitWrapper&quot;&gt;\n                &lt;img class=&quot;avatar&quot; src=&quot;http://www.gravatar.com/avatar/&lt;?php echo $ribbit-&gt;gravatar_hash; ?&gt;&quot;&gt;\n                &lt;span class=&quot;name&quot;&gt;&lt;?php echo $ribbit-&gt;name; ?&gt;&lt;/span&gt; @&lt;?php echo $ribbit-&gt;username; ?&gt;\n                &lt;span class=&quot;time&quot;&gt;\n                &lt;?php\n                    $timeSince = time() - strtotime($ribbit-&gt;created_at);\n                    if($timeSince &lt; 60)\n                    {\n                        echo $timeSince . &quot;s&quot;;\n                    }\n                    else if($timeSince &lt; 3600)\n                    {\n                        echo floor($timeSince / 60) . &quot;m&quot;;\n                    }\n                    else if($timeSince &lt; 86400)\n                    {\n                        echo floor($timeSince / 3600) . &quot;h&quot;;\n                    }\n                    else{\n                        echo floor($timeSince / 86400) . &quot;d&quot;;\n                    }\n                ?&gt;\n                &lt;/span&gt;\n                &lt;p&gt;&lt;?php echo $ribbit-&gt;ribbit; ?&gt;&lt;/p&gt;\n            &lt;/div&gt;\n  &lt;?php } ?&gt;\n&lt;/div&gt;\n</pre><p>The first div is the form for creating new \"ribbits\". The next div displays the user\'s profile information, and the last section is the <code>for</code> loop that displays each \"ribbit\". Again, I\'m not going to go into to much detail for the sake of time, but everything here is pretty straight forward.</p><p>Now, in the <code>Controller</code> class, we have to add the <code>buddies()</code> function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function buddies($params){\n  $user = $this-&gt;checkAuth();\n  if($user === false){ $this-&gt;redirect(&quot;home/7&quot;); }\n  else\n  {\n    $userData = $this-&gt;model-&gt;getUserInfo($user);\n    $fribbits = $this-&gt;model-&gt;getFollowersRibbits($user);\n    $flash = false;\n    if(isset($params[0]))\n    {\n      $flashArr = array(\n        &quot;0&quot; =&gt; new Flash(&quot;Welcome Back, &quot; . $user-&gt;name, &quot;notice&quot;),\n        &quot;1&quot; =&gt; new Flash(&quot;Welcome to Ribbit, Thanks for signing up.&quot;, &quot;notice&quot;),\n        &quot;2&quot; =&gt; new Flash(&quot;You have exceeded the 140 character limit for Ribbits&quot;, &quot;error&quot;)\n      );\n      $flash = $flashArr[$params[0]];\n    }\n    $this-&gt;loadPage($user, &quot;buddies&quot;, array(\'User\' =&gt; $user, &quot;userData&quot; =&gt; $userData, &quot;fribbits&quot; =&gt; $fribbits), $flash);\n  }\n}\n</pre><p>This function follows the same structure as the <code>indexPage()</code> function: we first check if the user is logged in and redirect them to the home page if not.</p><blockquote><p>We then call two functions from the <code>Model</code> class: one to get the user\'s profile information and one to get the posts from the user\'s followers.</p></blockquote><p>We have three possible flashes here: one for signup, one for login and one for if the user exceeds the 140 character limit on a new ribbit. Finally, we call the <code>loadPage()</code> function to display everything.</p><p>Now in the <code>Model</code> class we have to enter the two functions we called above. First we have the \'getUserInfo\' function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function getUserInfo($user)\n{\n  $query = &quot;SELECT ribbit_count, IF(ribbit IS NULL, \'You have no Ribbits\', ribbit) as ribbit, followers, following &quot;;\n  $query .= &quot;FROM (SELECT COUNT(*) AS ribbit_count FROM Ribbits WHERE user_id = &quot; . $user-&gt;id . &quot;) AS RC &quot;;\n  $query .= &quot;LEFT JOIN (SELECT user_id, ribbit FROM Ribbits WHERE user_id = &quot; . $user-&gt;id . &quot; ORDER BY created_at DESC LIMIT 1) AS R &quot;;\n  $query .= &quot;ON R.user_id = &quot; . $user-&gt;id . &quot; JOIN ( SELECT COUNT(*) AS followers FROM Follows WHERE followee_id = &quot; . $user-&gt;id;\n  $query .=  &quot;) AS FE JOIN (SELECT COUNT(*) AS following FROM Follows WHERE user_id = &quot; . $user-&gt;id . &quot;) AS FR;&quot;;\n  $res = $this-&gt;db-&gt;query($query);\n  return $res-&gt;fetch_object();\n}\n</pre><p>The function itself is simple. We execute a SQL query and return the result. The query, on the other hand, may seem a bit complex. It combines the necessary information for the profile section into a single row. The information returned by this query includes the amount of ribbits you made, your latest ribbit, how many followers you have and how many people you are following. This query basically combines one normal <code>SELECT</code> query for each of these properties and then joins everything together.</p><p>Next we had the <code>getFollowersRibbits()</code> function which looks like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function getFollowersRibbits($user)\n{\n  $query = &quot;SELECT name, username, gravatar_hash, ribbit, Ribbits.created_at FROM Ribbits JOIN (&quot;;\n  $query .= &quot;SELECT Users.* FROM Users LEFT JOIN (SELECT followee_id FROM Follows WHERE user_id = &quot;;\n  $query .= $user-&gt;id . &quot; ) AS Follows ON followee_id = id WHERE followee_id = id OR id = &quot; . $user-&gt;id;\n  $query .= &quot;) AS Users on user_id = Users.id ORDER BY Ribbits.created_at DESC LIMIT 10;&quot;;\n  $res = $this-&gt;db-&gt;query($query);\n  $fribbits = array();\n  while($row = $res-&gt;fetch_object())\n  {\n    array_push($fribbits, $row);\n  }\n  return $fribbits;\n}\n</pre><p>Similar to the previous function, the only complicated part here is the query. We need the following information to display for each post: name, username, gravatar image, the actual ribbit, and the date when the ribbit was created. This query sorts through your posts and the posts from the people you follow, and returns the latest ten ribbits to display on the buddies page.</p><p>You should now be able to signup, login and view the buddies page. We are still not able to create ribbits so let\'s get on that next.</p><hr\n/><h2>Posting Your First Ribbit</h2><p>This step is pretty easy. We don\'t have a view to work with; we just need a function in the <code>Controller</code> and <code>Model</code> classes. In <code>Controller</code>, add the following function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function newRibbit($params){\n  $user = $this-&gt;checkAuth();\n  if($user === false){ $this-&gt;redirect(&quot;home/7&quot;); }\n  else{\n    $text = mysql_real_escape_string($_POST[\'text\']);\n    if(strlen($text) &gt; 140)\n    {\n      $this-&gt;redirect(&quot;buddies/2&quot;);\n    }\n    else\n    {\n      $this-&gt;model-&gt;postRibbit($user, $text);\n      $this-&gt;redirect(&quot;buddies&quot;);\n    }\n  }\n}\n</pre><p>Again we start by checking if the user is logged in, and if so, we ensure the post is not over the 140 character limit. We\'ll then call <code>postRibbit()</code> from the model and redirect back to the buddies page.</p><p>Now in the <code>Model</code> class, add the <code>postRibbit()</code> function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function postRibbit($user, $text){\n  $r = array(\n    &quot;ribbit&quot; =&gt; $text,\n    &quot;created_at&quot; =&gt; date( \'Y-m-d H:i:s\'),\n    &quot;user_id&quot; =&gt; $user-&gt;id\n  );\n  $this-&gt;insert(&quot;Ribbits&quot;, $r);\n}\n</pre><p>We are back to standard queries with this one; just combine the data into an array and insert it with our insert function. You should now be able to post Ribbits, so go try to post a few. We still have a little more work to do, so come back after you post a few ribbits.</p><hr\n/><h2>The Last Two Pages</h2><p>The next two pages have almost identical functions in the controller so I\'m going to post them together:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function publicPage($params){\n  $user = $this-&gt;checkAuth();\n  if($user === false){ $this-&gt;redirect(&quot;home/7&quot;); }\n  else\n  {\n    $q = false;\n    if(isset($_POST[\'query\']))\n    {\n      $q = $_POST[\'query\'];\n    }\n    $ribbits = $this-&gt;model-&gt;getPublicRibbits($q);\n    $this-&gt;loadPage($user, &quot;public&quot;, array(\'ribbits\' =&gt; $ribbits));\n  }\n}\nprivate function profiles($params){\n  $user = $this-&gt;checkAuth();\n  if($user === false){ $this-&gt;redirect(&quot;home/7&quot;); }\n  else{\n    $q = false;\n    if(isset($_POST[\'query\']))\n    {\n      $q = $_POST[\'query\'];\n    }\n    $profiles = $this-&gt;model-&gt;getPublicProfiles($user, $q);\n    $this-&gt;loadPage($user, &quot;profiles&quot;, array(\'profiles\' =&gt; $profiles));\n  }\n}\n</pre><p>These functions both get an array of data; one gets ribbits and the other profiles. They both allow you to search by a POST string option, and they both get the info from the <code>Model</code>. Now let\'s go put their corresponding views in the <code>Views</code> folder.</p><p>For the ribbits just create a file called <code>public.php</code> and put the following inside:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;div class=&quot;panel right&quot;&gt;\n	&lt;h1&gt;Search Ribbits&lt;/h1&gt;\n	&lt;p&gt;\n		&lt;/p&gt;&lt;form action=&quot;/public&quot; method=&quot;post&quot;&gt;\n			&lt;input name=&quot;query&quot; type=&quot;text&quot;&gt;\n			&lt;input type=&quot;submit&quot; value=&quot;Search!&quot;&gt;\n		&lt;/form&gt;\n	&lt;p&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=&quot;ribbits&quot; class=&quot;panel left&quot;&gt;\n	&lt;h1&gt;Public Ribbits&lt;/h1&gt;\n		&lt;?php foreach($ribbits as $ribbit){ ?&gt;\n	        &lt;div class=&quot;ribbitWrapper&quot;&gt;\n	            &lt;img class=&quot;avatar&quot; src=&quot;http://www.gravatar.com/avatar/&lt;?php echo $ribbit-&gt;gravatar_hash; ?&gt;&quot;&gt;\n	            &lt;span class=&quot;name&quot;&gt;&lt;?php echo $ribbit-&gt;name; ?&gt;&lt;/span&gt; @&lt;?php echo $ribbit-&gt;username; ?&gt;\n	            &lt;span class=&quot;time&quot;&gt;\n	            &lt;?php\n	                $timeSince = time() - strtotime($ribbit-&gt;created_at);\n	                if($timeSince &lt; 60)\n	                {\n	                    echo $timeSince . &quot;s&quot;;\n	                }\n	                else if($timeSince &lt; 3600)\n	                {\n	                    echo floor($timeSince / 60) . &quot;m&quot;;\n	                }\n	                else if($timeSince &lt; 86400)\n	                {\n	                    echo floor($timeSince / 3600) . &quot;h&quot;;\n	                }\n	                else{\n	                    echo floor($timeSince / 86400) . &quot;d&quot;;\n	                }\n	            ?&gt;\n	            &lt;/span&gt;\n	            &lt;p&gt;&lt;?php echo $ribbit-&gt;ribbit; ?&gt;&lt;/p&gt;\n	        &lt;/div&gt;\n		&lt;?php } ?&gt;\n&lt;/div&gt;\n</pre><p>The first div is the ribbit search form, and the second div displays the public ribbits.</p><p>And here is the last view which is the <code>profiles.php</code> view:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;div class=&quot;panel right&quot;&gt;\n	&lt;h1&gt;Search for Profiles&lt;/h1&gt;\n	&lt;p&gt;\n		&lt;/p&gt;&lt;form action=&quot;/profiles&quot; method=&quot;post&quot;&gt;\n			&lt;input name=&quot;query&quot; type=&quot;text&quot;&gt;\n			&lt;input type=&quot;submit&quot; value=&quot;Search!&quot;&gt;\n		&lt;/form&gt;\n	&lt;p&gt;&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=&quot;ribbits&quot; class=&quot;panel left&quot;&gt;\n    &lt;h1&gt;Public Profiles&lt;/h1&gt;\n    &lt;?php foreach($profiles as $user){ ?&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;http://www.gravatar.com/avatar/&lt;?php echo $user-&gt;gravatar_hash; ?&gt;&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;&lt;?php echo $user-&gt;name; ?&gt;&lt;/span&gt; @&lt;?php echo $user-&gt;username; ?&gt;\n        &lt;span class=&quot;time&quot;&gt;&lt;?php echo $user-&gt;followers; echo ($user-&gt;followers &gt; 1) ? &quot; followers &quot; : &quot; follower &quot;; ?&gt;\n            &lt;a href=&quot;&lt;?php echo ($user-&gt;followed) ? &quot;unfollow&quot; : &quot;follow&quot;; ?&gt;/&lt;?php echo $user-&gt;id; ?&gt;&quot;&gt;&lt;?php echo ($user-&gt;followed) ? &quot;unfollow&quot; : &quot;follow&quot;; ?&gt;&lt;/a&gt;&lt;/span&gt;\n        &lt;p&gt;\n            &lt;?php echo $user-&gt;ribbit; ?&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;?php } ?&gt;\n&lt;/div&gt;\n</pre><p>This is very similar to the <code>public.php</code> view.</p><p>The last step needed to get these two pages working is to add their dependency functions to the <code>Model</code> class. Let\'s start with the function to get the public ribbits. Add the following to the <code>Model</code> class:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function getPublicRibbits($q){\n  if($q === false)\n  {\n    $query = &quot;SELECT name, username, gravatar_hash, ribbit, Ribbits.created_at FROM Ribbits JOIN Users &quot;;\n    $query .= &quot;ON user_id = Users.id ORDER BY Ribbits.created_at DESC LIMIT 10;&quot;;\n  }\n  else{\n    $query = &quot;SELECT name, username, gravatar_hash, ribbit, Ribbits.created_at FROM Ribbits JOIN Users &quot;;\n    $query .= &quot;ON user_id = Users.id WHERE ribbit LIKE \\&quot;%&quot; . $q .&quot;%\\&quot; ORDER BY Ribbits.created_at DESC LIMIT 10;&quot;;\n  }\n  $res = $this-&gt;db-&gt;query($query);\n  $ribbits = array();\n  while($row = $res-&gt;fetch_object())\n  {\n    array_push($ribbits, $row);\n  }\n  return $ribbits;\n}\n</pre><p>If a search query was passed, then we only select ribbits that match the provided search. Otherwise, it just takes the ten newest ribbits. The next function is a bit more complicated as we need  to make multiple SQL queries. Enter this function to get the public profiles:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function getPublicProfiles($user, $q){\n  if($q === false)\n  {\n    $query = &quot;SELECT id, name, username, gravatar_hash FROM Users WHERE id != &quot; . $user-&gt;id;\n    $query .= &quot; ORDER BY created_at DESC LIMIT 10&quot;;\n  }\n  else{\n    $query = &quot;SELECT id, name, username, gravatar_hash FROM Users WHERE id != &quot; . $user-&gt;id;\n    $query .= &quot; AND (name LIKE \\&quot;%&quot; . $q . &quot;%\\&quot; OR username LIKE \\&quot;%&quot; . $q . &quot;%\\&quot;) ORDER BY created_at DESC LIMIT 10&quot;;\n  }\n  $userRes = $this-&gt;db-&gt;query($query);\n  if($userRes-&gt;num_rows &gt; 0){\n    $userArr = array();\n    $query = &quot;&quot;;\n    while($row = $userRes-&gt;fetch_assoc()){\n      $i = $row[\'id\'];\n      $query .= &quot;SELECT &quot; . $i . &quot; AS id, followers, IF(ribbit IS NULL, \'This user has no ribbits.\', ribbit) &quot;;\n      $query .= &quot;AS ribbit, followed FROM (SELECT COUNT(*) as followers FROM Follows WHERE followee_id = &quot; . $i . &quot;) &quot;;\n      $query .= &quot;AS F LEFT JOIN (SELECT user_id, ribbit FROM Ribbits WHERE user_id = &quot; . $i;\n      $query .= &quot; ORDER BY created_at DESC LIMIT 1) AS R ON R.user_id = &quot; . $i . &quot; JOIN (SELECT COUNT(*) &quot;;\n      $query .= &quot;AS followed FROM Follows WHERE followee_id = &quot; . $i . &quot; AND user_id = &quot; . $user-&gt;id . &quot;) AS F2 LIMIT 1;&quot;;\n      $userArr[$i] = $row;\n    }\n    $this-&gt;db-&gt;multi_query($query);\n    $profiles = array();\n    do{\n      $row = $this-&gt;db-&gt;store_result()-&gt;fetch_object();\n      $i = $row-&gt;id;\n      $userArr[$i][\'followers\'] = $row-&gt;followers;\n      $userArr[$i][\'followed\'] = $row-&gt;followed;\n      $userArr[$i][\'ribbit\'] = $row-&gt;ribbit;\n      array_push($profiles, (object)$userArr[$i]);\n    }while($this-&gt;db-&gt;next_result());\n    return $profiles;\n  }\n  else\n  {\n    return null;\n  }\n}\n</pre><p>It\'s a lot to take in, so I\'ll go over it slowly. The first <code>if...else</code> statement checks whether or not the user passed a search query and generates the appropriate SQL to retrieve ten users. Then we make sure that the query returned some users, and if so, it moves on to generate a second query for each user, retrieving there latest ribbit and info.</p><blockquote><p>After that, we send all the queries to the database with the <code>multi_query</code> command to minimize unnecessary trips to the database.</p></blockquote><p>Then, we take the results and combine them with the user\'s information from the first query. All this data is returned to display in the profiles view.</p><p>If you have done everything correctly, you should be able to traverse through all the pages and post ribbits. The only thing we have left to do is add the functions to follow and unfollow other people.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://cdn.tutsplus.com/net.tutsplus.com/authors/jeremymcpeak/P7.png\" border=\"0\" /></div><hr\n/><h2>Tying up the Loose Ends</h2><p>There is no view associated with these functions, so these will be quick. Let\'s start with the functions in the <code>Controller</code> class:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate function follow($params){\n  $user = $this-&gt;checkAuth();\n  if($user === false){ $this-&gt;redirect(&quot;home/7&quot;); }\n  else{\n    $this-&gt;model-&gt;follow($user, $params[0]);\n    $this-&gt;redirect(&quot;profiles&quot;);\n  }\n}\nprivate function unfollow($params){\n  $user = $this-&gt;checkAuth();\n  if($user === false){ $this-&gt;redirect(&quot;home/7&quot;); }\n  else{\n    $this-&gt;model-&gt;unfollow($user, $params[0]);\n    $this-&gt;redirect(&quot;profiles&quot;);\n  }\n}\n</pre><p>These functions, as you can probably see, are almost identical. The only difference is that one adds a record to the <code>Follows</code> table and one removes a record. Now let\'s finish it up with the functions in the <code>Model</code> class:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function follow($user, $fId){\n  $this-&gt;insert(&quot;Follows&quot;, array(&quot;user_id&quot; =&gt; $user-&gt;id, &quot;followee_id&quot; =&gt; $fId));\n}\npublic function unfollow($user, $fId){\n  $this-&gt;delete(&quot;Follows&quot;, array(&quot;user_id&quot; =&gt; $user-&gt;id, &quot;followee_id&quot; =&gt; $fId));\n}\n</pre><p>These functions are basically the same; they only differ by the methods they call.</p><p>The site is now fully operational!!! The last thing which I want to add is another <code>.htaccess</code> file inside the <code>Views</code> folder. Here are its contents:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nOrder allow,deny\nDeny from all\n</pre><p>This is not strictly necessary, but it is good to restrict access to private files.</p><hr\n/><h2>Conclusion</h2><blockquote\nclass=\"pullquote\"><p>We definitely built a Twitter clone from scratch!</p></blockquote><p>This has been a very long article, but we covered a lot! We setup a database and created our very own MVC framework. We definitely built a Twitter clone from scratch!</p><p>Please note that, due to length restraints, I had to omit a lot of the features that you might find in a real production application, such as Ajax, protection against SQL injection, and a character counter for the Ribbit box (probably a lot of other things as well). That said, overall, I think we accomplished a great deal!</p><p>I hope you enjoyed this article, feel free to leave me a comment if you have any thoughts or questions. Thank you for reading!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(3,3,1,1358016489,NULL,' How to Setup Laravel 4 ','As you may know, here at Nettuts+, we’ve covered the popular Laravel framework a great deal. With version 4 on the near horizon, I’ve received quite a few emails and comments, requesting a screencast that describes exactly how to clone and work with the alpha version of Laravel 4, as well as Composer. Hope this helps!(Continue)','As you may know, here at Nettuts+, we’ve covered the popular Laravel framework a great deal. With version 4 on the near horizon, I’ve received quite a few emails and comments, requesting a screencast that describes exactly how to clone and work with the alpha version of Laravel 4, as well as Composer. Hope this helps!(Continue)',1,1,'how-to-setup-laravel-4',102,0,'http://cdn.tutsplus.com/net.tutsplus.com/authors/jeffreyway/laravel-4.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-28614\'), post_id: 28614, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>As you may know, here at Nettuts+, we&#8217;ve covered the popular <a\nhref=\"http://laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\">Laravel</a> framework a great deal. With version 4 on the near horizon, I&#8217;ve received quite a few emails and comments, requesting a screencast that describes exactly how to <a\nhref=\"https://github.com/illuminate/app/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">clone</a> and work with the alpha version of Laravel 4, as well as <a\nhref=\"http://getcomposer.org\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'getcomposer.org\']);\">Composer</a>. Hope this helps!<br\n/> <span\nid=\"more-28614\"></span></p><div\nclass=tutorial_image> <iframe\nwidth=\"600\" height=\"375\" src=\"http://www.youtube.com/embed/ehY82-X9hBM?hd=1\" frameborder=\"0\" allowfullscreen></iframe><br\n/> <em>Choose <strong>720p</strong> for best clarity, or <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2177_Laravel4Install/How-To-Setup-Laravel-4.mp4\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">download this screencast</em></a>.</div><hr\n/><h2>In Closing</h2><p>Laravel 4 is expected to be released in early 2013, likely quite near the first ever <a\nhref=\"http://conference.laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'conference.laravel.com\']);\">Laracon</a>. Stay tuned to Nettuts+ for more information on its release!<div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(4,3,1,1358016490,NULL,' What to Expect From PHP 5.5 ','The first PHP 5.5 alpha has been publicly released. After having some time to test and experiment with it, we can now bring you our in-depth overview of what to look forward for!(Continue)','The first PHP 5.5 alpha has been publicly released. After having some time to test and experiment with it, we can now bring you our in-depth overview of what to look forward for!(Continue)',1,1,'what-to-expect-from-php-5-5',196,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2173_PHP55/what-to-expect-from-php-5-5.jpg','',1),(5,3,1,1358016491,NULL,' So You Want to Accept Credit Cards Online? ','Until recently, accepting credit cards on a website was expensive and complicated. But that was before Stripe: a radically different and insanely awesome credit card processing company. Today, I’ll show you how to start accepting cards in 30 minutes or less – without spending a dime.(Continue)','Until recently, accepting credit cards on a website was expensive and complicated. But that was before Stripe: a radically different and insanely awesome credit card processing company. Today, I’ll show you how to start accepting cards in 30 minutes or less – without spending a dime.(Continue)',1,1,'so-you-want-to-accept-credit-cards-online',323,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2061_stripe/credit-card-payments-with-stripe.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2061_stripe/Demo-Project.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25457\'), post_id: 25457, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Until recently, accepting credit cards on a website was expensive and complicated. But that was before <a\nhref=\"https://stripe.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'stripe.com\']);\">Stripe</a>: a radically different and insanely awesome credit card processing company. Today, I&#8217;ll show you how to start accepting cards in 30 minutes or less &#8211; without spending a dime.</p><p><span\nid=\"more-25457\"></span></p><div\nclass=\"republished-shortcode\"><strong>Republished Tutorial</strong><p>Every few weeks, we revisit some of our reader\'s favorite posts from throughout the history of the site. This tutorial was first published in June, 2012.</p></div><hr\n/><h2>The Way Things Used To Be</h2><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2061_stripe/1.png\" border=\"0\" /></div><p>Without <a\nhref=\"https://stripe.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'stripe.com\']);\">Stripe</a>, accepting credit cards on a website is a massive undertaking. First, you need to open a &#8220;merchant account&#8221;, which is like a regular bank account, but with more fees. Then, you need a &#8220;payment gateway&#8221; &#8211; because credit card processing apparently takes place in a separate dimension where bankers rule with an iron fist and Lindsey Lohan has a successful acting career. And then come the leeches: $25 monthly fee. $99 setup fee. $50 annual fee. $0.35 failed transaction fee (YOU pay when your customer&#8217;s card fails to go through!). $0.25 + 2.0% successful transaction fee. $2.00 batch fee. $5.00 daddy-needs-a-new-porsche fee. It&#8217;s ridiculous. The most popular card processor is Authorize.net, and the folks at that company (and its many resellers) spend every day thinking of new, ridiculous ways to take your money.</p><hr\n/><h2>Enter Stripe</h2><blockquote\nclass=\"pullquote\"><p>Setup takes about five minutes.</p></blockquote><p>Unfortunately, it <em>is</em> illegal to kidnap the CEO of Authorize.net, slather him in barbecue sauce and drop him into a pit of honey badgers. But, you can do the next best thing: <em>don&#8217;t use his service.</em> Switch to Stripe. You won&#8217;t need a merchant account or payment gateway. Stripe will deposit money into <em>any</em> bank account you like. There are zero fees. Setup takes about five minutes. (Yes, seriously.) And you pay exactly one thing: 2.9% + $0.30 on each successful card transaction. (So, if you&#8217;re selling something for $30, you keep $28.83, and Stripe gets $1.17.) The website is simple and intuitive and the staff are super helpful. The only drawback is that Stripe is currently unavailable outside of the United States. (Note: Stripe DOES accept credit cards from overseas; it&#8217;s just that you can&#8217;t sign up for a Stripe account outside of the U.S.) They&#8217;re working on expanding to other countries.</p><p>The rest of this tutorial will detail how to implement Stripe on your website with PHP and Javascript (jQuery). The service also has APIs for Ruby, Python, Java and <a\nhref=\"https://stripe.com/docs/libraries\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'stripe.com\']);\">other platforms</a>. Although it might look like there&#8217;s a lot of work ahead, there really isn&#8217;t; you&#8217;ll be up and running in no time. Let&#8217;s get started:</p><hr\n/><h2><span>Step 0:</span> Install an SSL Certificate</h2><p>We&#8217;re dealing with credit card information, so of course we have to secure the user&#8217;s connection to our server. We do this using an SSL certificate and it&#8217;s not optional. Not only do users expect to see the &#8220;https://&#8221; protocol on an order page, Stripe requires it. But don&#8217;t worry: implementing SSL is very simple. Almost all hosting providers offer automatic SSL certificate installation. You simply buy the certificate through your provider and they automatically install and configure it for you. You don&#8217;t need to do anything else to your site. If your order form is at http://mydomain.com/order.php, you simply send the customer to https://mydomain.com/order.php instead and the connection will be secured with your new SSL certificate. That&#8217;s it!</p><p><strong>Note:</strong> there is one exception. If your order page loads resources such as stylesheets, scripts or images using an absolute (as opposed to relative) URL, you&#8217;ll need to make sure those URLs use the &#8220;https://&#8221; protocol. For example, if you include an image on your secure order page like this, you&#8217;ll get a warning in the browser that the page contains both secure and insecure elements:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;img src=&quot;http://someremotedomain.com/someImage.jpg&quot;&gt;\n</pre><p>To fix this, load the image from a secure URL, like this:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;img src=&quot;https://someremotedomain.com/someImage.jpg&quot;&gt;\n</pre><p>You don&#8217;t need to worry about this issue for relative urls (such as &#8220;../images/someImage.jpg&#8221;) because your server will automatically load these items securely.</p><hr\n/><h2><span>Step 1:</span> Create an Account</h2><p>Visit <a\nhref=\"http://stripe.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'stripe.com\']);\">Stripe.com</a> and create a new account. Once you&#8217;re past the initial username/password prompt, click the &#8220;Your Account&#8221; menu in the top right and open the &#8220;Account Settings&#8221; pane, which is pictured below. First, make sure you set a good &#8220;Statement Descriptor&#8221;. This is what customers will see on their credit card statements. A good descriptor helps the customer remember what they bought so that they don&#8217;t mistake your transaction for fraud and cancel the charge. (When this happens, it&#8217;s called a &#8220;chargeback&#8221; and you&#8217;ll pay a $15 fee on top of losing the sale, so make sure your descriptor is set!) Next, specify the bank account to which you&#8217;d like your money deposited. You are welcome to use mine. And finally, take a look at the &#8220;API Keys&#8221; tab. We&#8217;ll be using these shortly, so keep them handy.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2061_stripe/2.png\" border=\"0\" /></div><hr\n/><h2><span>Step 2:</span> Create Your Payment Form</h2><p>The next thing we need is a form that our customers fill out to place a credit card order with us. Today, we&#8217;ll use this vastly over-simplified PHP page, called &#8220;buy.php&#8221;:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n	&lt;head&gt;\n		&lt;script src=&quot;scripts/jquery.js&quot;&gt;&lt;/script&gt;\n	&lt;/head&gt;\n	&lt;body&gt;\n		&lt;h2&gt;Payment Form&lt;/h2&gt;\n		&lt;form id=&quot;buy-form&quot; method=&quot;post&quot; action=&quot;javascript:&quot;&gt;\n			&lt;p class=&quot;form-label&quot;&gt;First Name:&lt;/p&gt;\n			&lt;input class=&quot;text&quot; id=&quot;first-name&quot; spellcheck=&quot;false&quot;&gt;&lt;/input&gt;\n			&lt;p class=&quot;form-label&quot;&gt;Last Name:&lt;/p&gt;\n			&lt;input class=&quot;text&quot; id=&quot;last-name&quot; spellcheck=&quot;false&quot;&gt;&lt;/input&gt;\n			&lt;p class=&quot;form-label&quot;&gt;Email Address:&lt;/p&gt;\n			&lt;input class=&quot;text&quot; id=&quot;email&quot; spellcheck=&quot;false&quot;&gt;&lt;/input&gt;\n			&lt;p class=&quot;form-label&quot;&gt;Credit Card Number:&lt;/p&gt;\n			&lt;input class=&quot;text&quot; id=&quot;card-number&quot; autocomplete=&quot;off&quot;&gt;&lt;/input&gt;\n			&lt;p class=&quot;form-label&quot;&gt;Expiration Date:&lt;/p&gt;\n			&lt;select id=&quot;expiration-month&quot;&gt;\n			&lt;option value=&quot;1&quot;&gt;January&lt;/option&gt;\n		    &lt;option value=&quot;2&quot;&gt;February&lt;/option&gt;\n		    &lt;option value=&quot;3&quot;&gt;March&lt;/option&gt;\n		    &lt;option value=&quot;4&quot;&gt;April&lt;/option&gt;\n		    &lt;option value=&quot;5&quot;&gt;May&lt;/option&gt;\n		    &lt;option value=&quot;6&quot;&gt;June&lt;/option&gt;\n		    &lt;option value=&quot;7&quot;&gt;July&lt;/option&gt;\n		    &lt;option value=&quot;8&quot;&gt;August&lt;/option&gt;\n		    &lt;option value=&quot;9&quot;&gt;September&lt;/option&gt;\n		    &lt;option value=&quot;10&quot;&gt;October&lt;/option&gt;\n		    &lt;option value=&quot;11&quot;&gt;November&lt;/option&gt;\n		    &lt;option value=&quot;12&quot;&gt;December&lt;/option&gt;\n			&lt;/select&gt;\n			&lt;select id=&quot;expiration-year&quot;&gt;\n				&lt;?php\n					$yearRange = 20;\n					$thisYear = date(\'Y\');\n					$startYear = ($thisYear + $yearRange);\n					foreach (range($thisYear, $startYear) as $year)\n					{\n						if ( $year == $thisYear) {\n							print \'&lt;option value=&quot;\'.$year.\'&quot; selected=&quot;selected&quot;&gt;\' . $year . \'&lt;/option&gt;\';\n						} else {\n							print \'&lt;option value=&quot;\'.$year.\'&quot;&gt;\' . $year . \'&lt;/option&gt;\';\n						}\n					}\n				?&gt;\n			&lt;/select&gt;\n			&lt;p class=&quot;form-label&quot;&gt;CVC:&lt;/p&gt;\n			&lt;input class=&quot;text&quot; id=&quot;card-security-code&quot; autocomplete=&quot;off&quot;&gt;&lt;/input&gt;\n			&lt;input id=&quot;buy-submit-button&quot; type=&quot;submit&quot; value=&quot;Place This Order »&quot;&gt;&lt;/input&gt;\n		&lt;/form&gt;\n	&lt;/body&gt;\n&lt;/html&gt;\n</pre><p>There are three things to note about the code snippet above.</p><ol><li>First, we&#8217;ve set the form&#8217;s action to &#8220;javascript:&#8221; rather than providing a path to a server-side script. (You&#8217;ll see why in just a minute.)<li>Secondly, there&#8217;s a short snippet of PHP that automatically populates our expiration-year field with the next 20 years so that we don&#8217;t have to update that manually in the future.<li>Thirdly, none of the form fields have a &#8220;name&#8221; parameter set. This is crucial because it will prevent the value of the field (such as the credit card number) from being sent to our server when the form is submitted. We&#8217;ll talk about why this is important in just a minute.</ol><h3>How Much Info Should I Collect?</h3><p>The only things you absolutely <em>must</em> have to charge a credit card are the card number and the expiration date. But you should always collect at least some additional information. Here&#8217;s why: if a customer disputes the charge on their card, you&#8217;ll be required to prove that they did, in fact, place an order with you.</p><blockquote><p>The more information you collect, the easier it will be to prove that the customer (as opposed to an identity thief) placed the order on your site.</p></blockquote><hr\n/><h2>What&#8217;s Next: The Big Picture</h2><p>Okay, we&#8217;ve got SSL installed and a payment form ready to go. Let&#8217;s assume we&#8217;re going to charge the customer $20.00 for this order. (In reality you&#8217;d calculate the total based on what the customer ordered, etc. That&#8217;s up to you.) When he fills out the form and presses the submit button, three things happen in this order:</p><ol><li>Using Javascript (jQuery), we collect each form field&#8217;s value. We pass this information directly to Stripe&#8217;s server, using Stripe.js.</li><li>Stripe&#8217;s server will ensure that the credit card data is well-formed, prepare a transaction and send us back a &#8220;single-use token&#8221;.</li><li>We pass the token to a server-side script on our own server, which contacts Stripe again and triggers the actual charge to the credit card. That&#8217;s it!</li></ol><h3>Why Do It This Way?</h3><p>Security. The user&#8217;s credit card information never touches our own server. We pass it directly to Stripe on the client-side using Javascript. Stripe&#8217;s server takes that information and prepares a transaction. The &#8220;token&#8221; that it sends back to us does NOT contain the credit card details, but DOES contain an ID that lets us trigger the transaction that Stripe has prepared on their end. Thus, we can safely pass the token to our own server without risking the security of the user&#8217;s credit card details.</p><p>Note: while you <em>can</em> use Stripe without the token process, I <em>strongly</em> discourage it. If you pass the raw credit card details to your own server, you have to be insanely careful to protect them and there are many ways to screw up. For example, server error logs could easily record sensitive information, so you have to scrub them securely and regularly. If you&#8217;re on a shared hosting plan, you probably don&#8217;t have the control required to do that. Plus, if your server is ever hacked, you might be sued into oblivion by ticked-off customers. And if you do something <em>really</em> stupid like store unencrypted card information in a database, I will personally drive to your house and beat you with a cactus. Play it safe; use the token process.</p><hr\n/><h2><span>Step 3:</span> Collect The Form Values</h2><p>Create a new Javascript file, called &#8220;buy-controller.js&#8221;. Let&#8217;s start coding that file with some basic validation checks:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nfunction showErrorDialogWithMessage(message)\n{\n	// For the tutorial, we\'ll just do an alert. You should customize this function to\n	// present &quot;pretty&quot; error messages on your page.\n	alert(message);\n	// Re-enable the order button so the user can try again\n	$(\'#buy-submit-button\').removeAttr(&quot;disabled&quot;);\n}\n$(document).ready(function()\n{\n	$(\'#buy-form\').submit(function(event)\n	{\n		// immediately disable the submit button to prevent double submits\n		$(\'#buy-submit-button\').attr(&quot;disabled&quot;, &quot;disabled&quot;);\n		var fName = $(\'#first-name\').val();\n		var lName = $(\'#last-name\').val();\n		var email = $(\'#email\').val();\n		var cardNumber = $(\'#card-number\').val();\n		var cardCVC = $(\'#card-security-code\').val();\n		// First and last name fields: make sure they\'re not blank\n		if (fName === &quot;&quot;) {\n			showErrorDialogWithMessage(&quot;Please enter your first name.&quot;);\n			return;\n		}\n		if (lName === &quot;&quot;) {\n			showErrorDialogWithMessage(&quot;Please enter your last name.&quot;);\n			return;\n		}\n		// Validate the email address:\n		var emailFilter = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\n		if (email === &quot;&quot;) {\n			showErrorDialogWithMessage(&quot;Please enter your email address.&quot;);\n			return;\n		} else if (!emailFilter.test(email)) {\n			showErrorDialogWithMessage(&quot;Your email address is not valid.&quot;);\n			return;\n		}\n		// Stripe will validate the card number and CVC for us, so just make sure they\'re not blank\n		if (cardNumber === &quot;&quot;) {\n			showErrorDialogWithMessage(&quot;Please enter your card number.&quot;);\n			return;\n		}\n		if (cardCVC === &quot;&quot;) {\n			showErrorDialogWithMessage(&quot;Please enter your card security code.&quot;);\n			return;\n		}\n		// Boom! We passed the basic validation, so we\'re ready to send the info to\n		// Stripe to create a token! (We\'ll add this code soon.)\n	});\n});\n</pre><p>Next, we need to add this new JavaScript file to the <code>&lt;head></code> element of our &#8220;buy.php&#8221; page. We&#8217;re also going to add &#8220;Stripe.js&#8221;, which is a file hosted on Stripe&#8217;s server that allows us to contact Stripe from the client-side to pass credit card details and receive our token. (Note that we load Stripe.js using the &#8220;https://&#8221; protocol!) Modify the <code>&lt;head></code> element of &#8220;buy.php&#8221; to look like this:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;head&gt;\n	&lt;script src=&quot;scripts/jquery.js&quot;&gt;&lt;/script&gt;\n	&lt;script src=&quot;https://js.stripe.com/v1/&quot;&gt;&lt;/script&gt;\n	&lt;script src=&quot;scripts/buy-controller.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n</pre><hr\n/><h2>API Keys</h2><p>Before we can submit information to Stripe, we have to somehow tell Stripe who we are. To do that, we use a pair of &#8220;keys&#8221;, which are unique strings that identify our account. To locate these keys, go to your Stripe account settings pane and pull up the API Keys tab, pictured here:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2061_stripe/3.png\" border=\"0\" /></div><p>As you can see, there are a total of four keys in two sets: &#8220;Test&#8221; and &#8220;Live&#8221;. You use the test set during development so that you can verify your code without actually charging any cards. When you&#8217;re ready to deploy a website, simply replace the test keys with the live ones. There are two keys in each set: &#8220;publishable&#8221; and &#8220;secret&#8221;. (We&#8217;ll use the &#8220;secret&#8221; key in our server-side script once we&#8217;ve received a token from Stripe.) For now, take the <em>publishable test key</em> and add it to the HEAD element of &#8220;buy.php&#8221; like this:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;head&gt;\n	&lt;script src=&quot;scripts/jquery.js&quot;&gt;&lt;/script&gt;\n	&lt;script src=&quot;https://js.stripe.com/v1/&quot;&gt;&lt;/script&gt;\n	&lt;script&gt;\n		Stripe.setPublishableKey(\'pk_0xT4IHiAt1NxoBDJlE2jfLnG5xWQv\');	// Test key!\n	&lt;/script&gt;\n	&lt;script src=&quot;scripts/buy-controller.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n</pre><blockquote><p> <strong>Warning:</strong> You MUST include Stripe.js BEFORE you set the publishable key. Additionally, be very careful that you don&#8217;t take a website live without switching to the &#8220;live&#8221; keys! And finally, be absolutely sure to keep your secret keys safe and <em>secret</em>!</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div></blockquote><hr\n/><h2><span>Step 4:</span> Request a Token</h2><p>Back at the bottom of &#8220;buy-controller.js&#8221;, we&#8217;re ready to add the code that requests a token from Stripe. It&#8217;s just a few lines:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n	// Boom! We passed the basic validation, so request a token from Stripe:\n	Stripe.createToken({\n		number: cardNumber,\n		cvc: cardCVC,\n		exp_month: $(\'#expiration-month\').val(),\n		exp_year: $(\'#expiration-year\').val()\n	}, stripeResponseHandler);\n	// Prevent the default submit action on the form\n	return false;\n</pre><p>The &#8220;createToken&#8221; function (which is defined in Stripe.js) accepts two parameters. The first is an object with the credit card details. The second is the name of the callback function that will be invoked when Stripe&#8217;s server finishes preparing the transaction and returns the token. In this case, our callback function is called &#8220;stripeResponseHandler&#8221;. Let&#8217;s add that function to the top of &#8220;buy-controller.js&#8221;:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nfunction stripeResponseHandler(status, response)\n{\n	if (response.error)\n	{\n		// Stripe.js failed to generate a token. The error message will explain why.\n		// Usually, it\'s because the customer mistyped their card info.\n		// You should customize this to present the message in a pretty manner:\n		alert(response.error.message);\n	}\n	else\n	{\n		// Stripe.js generated a token successfully. We\'re ready to charge the card!\n		var token = response.id;\n		var firstName = $(&quot;#first-name&quot;).val();\n		var lastName = $(&quot;#last-name&quot;).val();\n		var email = $(&quot;#email&quot;).val();\n		// We need to know what amount to charge. Assume $20.00 for the tutorial.\n		// You would obviously calculate this on your own:\n		var price = 20;\n		// Make the call to the server-script to process the order.\n		// Pass the token and non-sensitive form information.\n		var request = $.ajax ({\n			type: &quot;POST&quot;,\n			url: &quot;pay.php&quot;,\n			dataType: &quot;json&quot;,\n			data: {\n				&quot;stripeToken&quot; : token,\n				&quot;firstName&quot; : firstName,\n				&quot;lastName&quot; : lastName,\n				&quot;email&quot; : email,\n				&quot;price&quot; : price\n				}\n		});\n		request.done(function(msg)\n		{\n			if (msg.result === 0)\n			{\n				// Customize this section to present a success message and display whatever\n				// should be displayed to the user.\n				alert(&quot;The credit card was charged successfully!&quot;);\n			}\n			else\n			{\n				// The card was NOT charged successfully, but we interfaced with Stripe\n				// just fine. There\'s likely an issue with the user\'s credit card.\n				// Customize this section to present an error explanation\n				alert(&quot;The user\'s credit card failed.&quot;);\n			}\n		});\n		request.fail(function(jqXHR, textStatus)\n		{\n			// We failed to make the AJAX call to pay.php. Something\'s wrong on our end.\n			// This should not normally happen, but we need to handle it if it does.\n			alert(&quot;Error: failed to call pay.php to process the transaction.&quot;);\n		});\n	}\n}\n</pre><p>This function first checks to see if there was an error creating the token. If Stripe.js fails to return a valid token, it&#8217;s usually because the customer entered some of their credit card information incorrectly. They may have mistyped a number or selected the wrong expiration date. Fortunately, the error message that comes along with the response will tell you exactly why the token-creation failed. Stripe guarantees that this error message is suitable for display, but it&#8217;s not verbose. Expect to see strings like &#8220;invalid expiration date&#8221; or &#8220;incorrect CVC&#8221; rather than full sentences.</p><p>If, on the other hand, everything validated and Stripe created a token, we&#8217;re ready to hand that token to our server-side script and actually place the charge. In the code above, we&#8217;re using jQuery&#8217;s Ajax function to do that. We pass the token as well as some information we might want to record in a database: the customer&#8217;s name and email. Finally, we need to know how much money to charge the card. We&#8217;re assuming $20.00 today, but you&#8217;d pass a calculated value from your shopping cart, etc. We throw all of that information into a JSON object and make the Ajax call to our server-side script, &#8220;pay.php&#8221; (which we&#8217;ll create below). Then, we simply look at the response and present the user with a success or error message. You would obviously customize this code to fit your site&#8217;s design.</p><hr\n/><h2><span>Step 5:</span> Create a Server-Side Script</h2><p>The only thing left to do is create the server-side PHP script that actually triggers the charge on our customer&#8217;s card. First, we&#8217;ll need Stripe&#8217;s PHP library. To download it, go to <a\nhref=\"https://stripe.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'stripe.com\']);\">Stripe&#8217;s website</a>, click the &#8220;Documentation&#8221; link in the upper right, and then choose the &#8220;API Libraries&#8221; section. (Or you can go straight there by <a\nhref=\"https://stripe.com/docs/libraries\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'stripe.com\']);\">clicking here</a>.) Scroll down the page until you see the PHP section, which looks like this:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2061_stripe/4.png\" border=\"0\" /></div><p>Download the latest version and unzip it. You&#8217;ll see two items: &#8220;Stripe.php&#8221; and a folder named &#8220;Stripe&#8221; that contains a bunch of other PHP files. Drop both these items into your website&#8217;s folder.</p><p>Now, create a new file called &#8220;pay.php&#8221;. We&#8217;ll start coding this file with some basic stuff:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;?php\n// Helper Function: used to post an error message back to our caller\nfunction returnErrorWithMessage($message)\n{\n	$a = array(\'result\' =&gt; 1, \'errorMessage\' =&gt; $message);\n	echo json_encode($a);\n}\n// Credit Card Billing\nrequire_once(\'Stripe.php\');	 // change this path to wherever you put the Stripe PHP library!\n$trialAPIKey = &quot;oRU5rYklVzp94Ab0RbBTP0soVdlaEtvm&quot;;	// These are the SECRET keys!\n$liveAPIKey = &quot;4BYrmtvwLb8iiiq9KIdbnRh5KCeSfPsX&quot;;\nStripe::setApiKey($trialAPIKey);  // Switch to change between live and test environments\n// Get all the values from the form\n$token = $_POST[\'stripeToken\'];\n$email = $_POST[\'email\'];\n$firstName = $_POST[\'firstName\'];\n$lastName = $_POST[\'lastName\'];\n$price = $_POST[\'price\'];\n$priceInCents = $price * 100;	// Stripe requires the amount to be expressed in cents\n</pre><p>At the top, we have a simple function that we&#8217;ll call whenever our script hits an error. It returns a JSON object with two items: &#8220;result&#8221; and &#8220;errorMessage&#8221;. This JSON object is sent back to &#8220;buy-controller.js&#8221; (where we used jQuery&#8217;s AJAX function to call this server-side script). There, we can inspect the value of &#8220;result&#8221; to see what happened. If it&#8217;s 0, the payment script completed successfully. If it&#8217;s 1, the script hit an error and we can use the &#8220;errorMessage&#8221; item to report what happened to the user.</p><p>Next, we bring in Stripe&#8217;s PHP library that we downloaded earlier. There&#8217;s nothing too complicated here; just make sure you update the path in the require statement to the relative location of the Stripe PHP library. After that, we have both of our <strong>SECRET</strong> API keys. We call the &#8220;setApiKey&#8221; function (which is part of Stripe&#8217;s PHP library) and pass it our trial key. Combined with the &#8220;publishable&#8221; key that we set earlier, Stripe now has all the information it needs to verify our identity and associate this transaction with our account. Of course, when we take the website live, we would switch this statement to use $liveAPIKey!</p><blockquote><p> Warning: Don&#8217;t forget to switch to the LIVE API keys when you publish your site! You must switch both the &#8220;publishable&#8221; key in the HEAD element of &#8220;buy.php&#8221; and the &#8220;secret&#8221; key, which appears in &#8220;pay.php&#8221;, above.</p></blockquote><p>And finally, we grab all the data that we passed from the AJAX call in &#8220;buy-controller.js&#8221;. Note that Stripe requires us to specify the charge amount in cents. Here, we passed the value in dollars, so we multiply by 100 to convert it to cents.</p><h3>Actually Charge The Card</h3><p>Here&#8217;s the rest of the code for pay.php:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\ntry\n{\n	// We must have all of this information to proceed. If it\'s missing, balk.\n	if (!isset($token)) throw new Exception(&quot;Website Error: The Stripe token was not generated correctly or passed to the payment handler script. Your credit card was NOT charged. Please report this problem to the webmaster.&quot;);\n	if (!isset($email)) throw new Exception(&quot;Website Error: The email address was NULL in the payment handler script. Your credit card was NOT charged. Please report this problem to the webmaster.&quot;);\n	if (!isset($firstName)) throw new Exception(&quot;Website Error: FirstName was NULL in the payment handler script. Your credit card was NOT charged. Please report this problem to the webmaster.&quot;);\n	if (!isset($lastName)) throw new Exception(&quot;Website Error: LastName was NULL in the payment handler script. Your credit card was NOT charged. Please report this problem to the webmaster.&quot;);\n	if (!isset($priceInCents)) throw new Exception(&quot;Website Error: Price was NULL in the payment handler script. Your credit card was NOT charged. Please report this problem to the webmaster.&quot;);\n	try\n	{\n		// create the charge on Stripe\'s servers. THIS WILL CHARGE THE CARD!\n		$charge = Stripe_Charge::create(array(\n			&quot;amount&quot; =&gt; $priceInCents,\n			&quot;currency&quot; =&gt; &quot;usd&quot;,\n			&quot;card&quot; =&gt; $token,\n			&quot;description&quot; =&gt; $email)\n		);\n		// If no exception was thrown, the charge was successful!\n		// Here, you might record the user\'s info in a database, email a receipt, etc.\n		// Return a result code of \'0\' and whatever other information you\'d like.\n		// This is accessible to the jQuery Ajax call return-handler in &quot;buy-controller.js&quot;\n		$array = array(\'result\' =&gt; 0, \'email\' =&gt; $email, \'price\' =&gt; $price, \'message\' =&gt; \'Thank you; your transaction was successful!\');\n		echo json_encode($array);\n	}\n	catch (Stripe_Error $e)\n	{\n		// The charge failed for some reason. Stripe\'s message will explain why.\n		$message = $e-&gt;getMessage();\n		returnErrorWithMessage($message);\n	}\n}\ncatch (Exception $e)\n{\n	// One or more variables was NULL\n	$message = $e-&gt;getMessage();\n	returnErrorWithMessage($message);\n}\n?&gt;\n</pre><p>Surprisingly simple, no? First, we verify that none of our variables are null. Although we don&#8217;t need all of them to charge the card, we might want to record this information in a database or use it to email the customer a receipt, so we don&#8217;t want to proceed if it&#8217;s not available.</p><p>Then, we use the &#8220;<code>Stripe_Charge::create()</code>&#8221; method, which is part of the Stripe PHP library. This is the line that actually charges the user&#8217;s card (or attempts to, anyway). The first two items in the array are self-explanatory. The third, &#8220;card&#8221;, is where we pass the token that we requested from Stripe earlier. The fourth item, &#8220;description&#8221; is vitally important. Whatever we pass here is what WE will see when we log into Stripe and view our transactions. You should choose something short that identifies the customer who placed this order. An email address is your best bet, as many customers might have the same name.</p><h3>Why Might The Charge Fail At This Point?</h3><p>If we were able to successfully get a token from Stripe, why would the charge fail at this point? The answer is that the validation Stripe performed earlier checked only that the credit card data was well-formed; it did not run a transaction through the credit card networks. It may be the case that the customer&#8217;s card is over its limit. Or, if it&#8217;s a debit card, there may not be enough money in the customer&#8217;s account to cover this purchase. It could also be that the credit card company simply flags the transaction as unusual and requires the customer&#8217;s approval to let it through (this has happened to me with American Express cardholders). In situations like these, the card will validate correctly when we request a token, but fail when we attempt to actually charge it. Fortunately, Stripe makes it really easy to handle these failures. We simply use try/catch blocks, as you see above.</p><h3>Charge The Card Last!</h3><blockquote\nclass=\"pullquote\"><p>If that customer is me, you&#8217;re in for a cactus beating.</p></blockquote><p>If your website needs to do things, such as generating a serial number for a software license, you should do that BEFORE you charge the customer&#8217;s card. If you charge the card first and then your site fails to generate a serial for any reason, your customer is going to be ticked off. (If that customer is me, you&#8217;re in for a cactus beating.) They might even call their credit card company to cancel the charge, which results in a $15 fee to you and the loss of a sale. So play it safe: be sure you have everything ready to go BEFORE you charge the customer!</p><p>That&#8217;s it! That&#8217;s all the code you need to charge a credit card on your website. The rest of the article covers some additional details about using Stripe that you might find handy:</p><hr\n/><h2>Testing &amp; Debugging</h2><p>When we&#8217;re using the &#8220;test&#8221; API keys, we can use special credit card numbers that force Stripe to return a certain type of response so that we can thoroughly test our code. Here&#8217;s the special numbers:</p><ul><li><strong>4242-4242-4242-4242</strong>: Simulate a successful card transaction</li><li><strong>4000-0000-0000-0002</strong>: Force a &#8220;card declined&#8221; response</li><li><strong>4242-4242-4242-4241</strong>: Force an &#8220;invalid card number&#8221; response</li></ul><p>In test mode, any 3 or 4-digit CVC number is considered valid. Any expiration date that is in the future is valid. You can pass a two-digit CVC number to test that error case. Likewise, you can pass any date in the past to test the invalid expiration date response. And finally, if you&#8217;d like to test the &#8220;invalid amount&#8221; response, simply pass any non-integer (such as 1.35) as the amount to charge.</p><p>For exhaustive information on testing Stripe, you can <a\nhref=\"https://stripe.com/docs/testing\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'stripe.com\']);\">visit their documentation page.</a></p><hr\n/><h2>Subscriptions, Storing Card Info &amp; More</h2><p>Stripe allows you to do more than one-time charges to a customer&#8217;s card. You can set up a subscription that will charge the card a specified amount at an interval of your choosing. The APIs you need to do this are part of Stripe&#8217;s PHP library and the website contains excellent documentation that will walk you through the process.</p><p>What if you want to store credit card information so that customers don&#8217;t have to enter it every time they visit your site? Stripe lets you do that too! You simply create a &#8220;customer&#8221; object in much the same way that we created a token. This object contains all the sensitive data that pertains to a particular customer. Stripe will securely store this information on their end (which means you don&#8217;t have to risk a cactus beating) and you can bill the user whenever you like simply by requesting the appropriate &#8220;customer&#8221; object, just like we did with the token. Again, all the APIs are part of Stripe&#8217;s PHP library and the website will walk you through it.</p><hr\n/><h2>See it in Action</h2><p>So that&#8217;s it: Stripe in a nutshell! If you&#8217;d like to see a working example of what we&#8217;ve just covered with a bit more complexity and design, swing by <a\nhref=\"https://incident57.com/codekit/buy.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'incident57.com\']);\">this page</a> and inspect the source. (Hint: it will look familiar.) Otherwise, if you&#8217;ve got questions leave a comment below, check out the <a\nhref=\"https://answers.stripe.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'answers.stripe.com\']);\">Stripe Support Page</a> or find me on Twitter: <a\nhref=\"http://twitter.com/bdkjones\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'twitter.com\']);\">@bdkjones</a>. Thanks and good luck!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(6,3,1,1358016492,NULL,' Expressive Tests with Hamcrest ','Hamcrest is a set of matchers for writing more expressive code. It just so happens that these matchers are especially useful when writing tests. In this article, we’ll look at Hamcrest for PHP.(Continue)','Hamcrest is a set of matchers for writing more expressive code. It just so happens that these matchers are especially useful when writing tests. In this article, we’ll look at Hamcrest for PHP.(Continue)',1,1,'expressive-tests-with-hamcrest',290,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2164_hamcrest/Images/preview.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2164_hamcrest/SourceCode.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-28308\'), post_id: 28308, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Hamcrest is a set of matchers for writing more expressive code. It just so happens that these matchers are especially useful when writing tests. In this article, we&#8217;ll look at <a\nhref=\"http://code.google.com/p/hamcrest/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'code.google.com\']);\">Hamcrest</a> for PHP.</p><p><span\nid=\"more-28308\"></span></p><hr\n/><h2>What is Hamcrest?</h2><blockquote\nclass=\"pullquote\"><p>Every Hamcrest matcher helps you write tests that read very naturally.</p></blockquote><p>Hamcret&#8217;s expressiveness originated with JMock, but it wasn&#8217;t until the addition of the unique <code>assertThat()</code> method that it was refactored into a self-contained library and independently usable in testing frameworks.</p><p>After its initial Java adoption, Hamcrest implementations in several programming languages became available. JUnit, RSpec and other testing frameworks implement native Hamcrest syntax, removing the need to explicitly include any libraries. Due to Hamcret&#8217;s fast adoption, testing frameworks were re-categorized to the following:</p><ul><li><strong>First generation</strong> testing frameworks were very basic, having a single <code>assert()</code> method with usage like: <code>assert(x==y)</code>. Programmers had difficulties writing expressive and well organized tests. It also required programming knowledge to understand more complex conditions and made writing more difficult.</li><li><strong>Second generation</strong> testing frameworks, like PHPUnit, offer a large set of different assertions. These frameworks extracted the action or predicate from the parameters (x == y) into the names of the assertions, such as: <code>assertEquals($expected, $actual)</code>. This made tests more expressive and made it easy to define custom assertion functions.</li><li><strong>Third generation</strong> testing frameworks use a single assertion method (<code>assertThat()</code>) in conjunction with expressive matchers, making assertions read like English sentences: <code>assertThat($calculatedResult, equalTo($expectedResult))</code> in contrast with <code>assertEquals($expectedResult, $calculatedResult)</code>.</li></ul><p>Using Hamcrest matchers can also help in other ways; you can write your custom matchers and use them inside the <code>assertThat()</code> function. Hamcret also provides much more information when something goes wrong. Instead of an obscure message like &#8220;Expected value is not True&#8221;, Hamcrest errors actually tells all values involved with the test&#8211;that is, both expected and actual values. The matchers also allow flexible assertions, so tests do not fail after making small modifications that should not break the test. In other words, fragile tests are more robust.</p><hr\n/><h2>Installing Hamcrest for PHP</h2><p>There are several ways to install Hamcrest. The two most common involve using PEAR or downloading the source code. At the time of this writing, Hamcrest for PHP is not yet available through Composer.</p><h3>Use PEAR</h3><p>Using PEAR to install Hamcrest is easy. Simply run the following commands:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">pear channel-discover hamcrest.googlecode.com/svn/pear\npear install hamcrest/Hamcrest</pre><p>Make sure to check that you have PEAR&#8217;s installation folder in you global path. This makes it easy to include Hamcrest in your tests.</p><h3>Download Source Archive</h3><p>You can always download the latest version of Hamcrest from the <a\nhref=\"http://code.google.com/p/hamcrest/downloads/list\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'code.google.com\']);\">project&#8217;s download page</a> and use it like any third party PHP library.</p><hr\n/><h2>Our First Test</h2><p>Let&#8217;s first ensure we have a working skeleton test with Hamcrest enabled. Create a project in your favorite IDE or code editor and create a test file. I just created a new project in NetBeans with a folder called Test as the main folder. Inside this folder is an empty file called <code>HamcrestMatchersForPHPTest.php</code>. This will be the test file, and its contents are the following:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">require_once \'Hamcrest/Hamcrest.php\';\nclass HamcrestMatchersForPHPTest extends PHPUnit_Framework_TestCase {\n	function testHamcrestWorks() {\n		assertThat(\'a\', is(equalTo(\'a\')));\n	}\n}</pre><p>The first line includes the Hamcrest library. Please note that it is with capital &#8220;H&#8221; for both the folder and the file name. Hamcrest&#8217;s official readme file contains a typo.</p><p>Next, our only test, <code>testHamcrestWorks()</code>, asserts that <code>a</code> is equal to <code>a</code>. Obviously, this is a passing test.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2164_hamcrest/Images/passingExample.png\" alt=\"Passing Test\" /></div><p>This first simple example is natural to read. Assert that &#8216;a&#8217; is equal to &#8216;a&#8217;.</i> It almost needs no explanation.</p><p>The only assertion method we will use in our tests is <code>assertThat()</code>. The matcher <code>is()</code> is just syntactic sugar; it does nothing except construct your sentence. Finally the matcher <code>equalTo()</code> compares the first parameter to <code>assertThat()</code> with value supplied to <code>equalTo()</code>. This test effectively translates to <code>\'a\' == \'a\'</code>.</p><hr\n/><h2>Comparing Numbers</h2><p>Let&#8217;s start with a simple example:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testNumbers() {\n	assertThat(2, equalTo(2));\n	assertThat(2, lessThan(3));\n	assertThat(3, greaterThan(2));\n	assertThat(2, is(identicalTo(2)));\n	assertThat(2, comparesEqualTo(2));\n	assertThat(2, is(closeTo(3, 1)));\n	assertThat(2, is(not(3)));\n}</pre><blockquote\nclass=\"pullquote\"><p>You can write your custom matchers and use them inside the <code>assertThat()</code> function.</p></blockquote><p>This code introduces new matchers; the first two are <code>lessThan()</code> and <code>greaterThan()</code>. These matchers are the equivalent to the &#8220;&lt;&#8221; and &#8220;&gt;&#8221; comparison operators.</p><p>The <code>identicalTo()</code> provides another means of checking equality. In fact, this is the equivalent of the <code>===</code> operator, whereas <code>equalTo()</code> is <code>==</code>. Another new matcher in this code is <code>comparesEqualTo()</code>, effectively performing the equivalent of <code>!($x < $y || $x > $y)</code>. In the above code, both <code>$x</code> and <code>$y</code> are the value <code>2</code> (so the test passes).</p><p>One of the most interesting matchers is <code>closeTo()</code>. It accepts two arguments: the target value and the allowed difference, respectively. This example checks if <code>2</code> is close to <code>3</code> by a maximum of <code>1</code>. This is obviously correct, and the assertion passes.</p><p>Finally, the last assertion is just a simple negation combined with <code>is()</code>. This obviously asserts that <code>2</code> is not <code>3</code>.</p><h3>Combined Number Matchers</h3><p>Hamcrest also provides matchers that equate to the <code>&lt;=</code> and <code>&gt;=</code> comparison operators. They&#8217;re aptly named <code>lessThanOrEqualTo()</code> and <code>greaterThanOrEqualTo()</code>, and they&#8217;re used like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testNumbersComposed() {\n	assertThat(2, lessThanOrEqualTo(2));\n	assertThat(2, lessThanOrEqualTo(3));\n	assertThat(3, greaterThanOrEqualTo(3));\n	assertThat(3, greaterThanOrEqualTo(2));\n	assertThat(2, is(atMost(2)));\n	assertThat(2, is(atMost(3)));\n	assertThat(3, is(atLeast(3)));\n	assertThat(3, is(atLeast(2)));\n}</pre><p>Hamcrest also provides the <code>atMost()</code> and <code>atLeast()</code> matchers. The <code>lessThanOrEqualTo()</code> and <code>atMost()</code> matchers are identical. They both equate to <code>$x <= $y</code>. Naturally, the <code>greaterThanOrEqualTo()</code> and <code>atLeast()</code> perform the exact opposite, checking for <code>$x >= $y</code>.</p><hr\n/><h2>Working with Strings</h2><p>Hamcrest also provides several matchers for working with strings. Here are some examples:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testStrings() {\n	assertThat(\'this string\', equalTo(\'this string\'));\n	assertThat(\'this string\', equalToIgnoringCase(\'ThiS StrIng\'));\n	assertThat(\'this string\', equalToIgnoringWhiteSpace(\'   this   string   \'));\n	//assertThat(\'this string\', equalToIgnoringWhiteSpace(\'thisstring\'));\n	assertThat(\'this string\', identicalTo(\'this string\'));\n	assertThat(\'this string\', startsWith(\'th\'));\n	assertThat(\'this string\', endsWith(\'ing\'));\n	assertThat(\'this string\', containsString(\'str\'));\n	assertThat(\'this string\', containsStringIgnoringCase(\'StR\'));\n	assertThat(\'this string\', matchesPattern(\'/^this\\s*/\'));\n}</pre><blockquote\nclass=\"pullquote\"><p>I recommend you use the more expressive matchers whenever possible...</p></blockquote><p>Obviously, the <code>equalTo()</code> and <code>identicalTo()</code> matchers work with strings, and they behave exactly as you would expect them to. But as you can see, Hamcrest provides other string-specific equality matchers. As their names imply, the <code>equalToIgnoringCase()</code> and <code>equalToIgnoringWhiteSpace()</code> matchers match strings by ignoring case and whitespace, respectively.</p><p>Other matchers, such as <code>startsWith()</code> and <code>endsWith()</code>, check if the specified sub-string is at the beginning or end of the actual string. The <code>containsString()</code> matcher checks if the string contains the supplied sub-string. The <code>containsString()</code> matcher can also be extended with <code>containsStringIgnoringCase()</code>, adding case insensitivity.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p>The <code>matchesPattern()</code> matcher incorporates regular expressions to find a match in the string. You can use any regular expression, and in many cases, this solution is necessary in more complex strings. In any case, I recommend you use the more expressive matchers whenever possible and only resort to regular expressions if absolutely necessary; doing so makes your code more readable by everyone.</p><h3>Matching Empty Strings</h3><p>It\'s common to test if a string is empty. Hamcrest has you covered.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testStringEmptiness() {\n	assertThat(\'\', isEmptyString());\n	assertThat(\'\', emptyString());\n	assertThat(\'\', isEmptyOrNullString());\n	assertThat(NULL, isEmptyOrNullString());\n	assertThat(\'\', nullOrEmptyString());\n	assertThat(NULL, nullOrEmptyString());\n	assertThat(\'this string\', isNonEmptyString());\n	assertThat(\'this string\', nonEmptyString());\n}</pre><p>Yes, there are many matchers for checking if a string is empty. Each variant has a version with \"is\" in front of it. Essentially, <code>emptyString()</code> and <code>isEmptyString()</code> are  identical, and the same is true for the other matchers. The <code>nonEmptyString()</code> and <code>isNonEmptyString()</code> matchers can also be written like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">assertThat(\'this string\', not(isEmptyString()));\nassertThat(\'this string\', is(not(emptyString())));\nassertThat(\'this string\', is(nonEmptyString()));</pre><p>But of course, those variants can add extra verbosity, making it more difficult to understand the code at first glance.</p><hr\n/><h2>Inclusions and Exclusions</h2><p>Here are some nice approaches to determine whether or not a variable belongs to a group:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testInclusionsExclusions() {\n	assertThat(\'val\', is(anyOf(\'some\', \'list\', \'of\', \'val\')));\n	assertThat(\'val\', is(noneOf(\'without\', \'the\', \'actual\', \'value\')));\n	assertThat(\'this string\', both(containsString(\'this\'))-&gt;andAlso(containsString(\'string\')));\n	assertThat(\'this string\', either(containsString(\'this\'))-&gt;orElse(containsString(\'that\')));\n	assertThat(\'any value, string or object\', is(anything()));\n}</pre><p>These examples use strings, but you can use these matchers with variables like objects, arrays, numbers, etc. The <code>anyOf()</code> and <code>noneOf()</code> matchers determines whether or not the expected variable resides in the provided list of values.</p><p>The other two matchers, <code>both()</code> and <code>either()</code>, are commonly used with the <code>andAlso()</code> and <code>orElse()</code> modifiers. These are equivalents of:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">assertThat((strpos(\'this string\', \'this\') !== FALSE) &amp;&amp; (strpos(\'this string\', \'string\') !== FALSE));\nassertThat((strpos(\'this string\', \'this\') !== FALSE) || (strpos(\'this string\', \'string\') !== FALSE));</pre><p>Finally, <code>anything()</code> matches... well, anything. It has an optional string parameter for meta data purposes, helping anyone reading the test to better understand why an assertion should always match.</p><hr\n/><h2>Arrays</h2><p>The array matchers are probably the most complex and useful matchers provided by Hamcrest. The code in this section provides a list of tricks to make complicated array-based assertions change into code that reads like well written prose.</p><div\nclass=\"tip-shortcode\"><p><strong>Please Note:</strong> I make no difference between arrays and hashes in these examples. I only talk about arrays, but everything applies to hashes as well.</p></div><h3>Array Equality</h3><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testArrayEquality() {\n	$actualArray = array(1,2,3);\n	$expectedArray = $actualArray;\n	assertThat($actualArray, is(anArray($expectedArray)));\n	assertThat($actualArray, equalTo($expectedArray));\n}</pre><p>These methods highlight different ways to compare the equality of two arrays. The first version uses the misleadingly named <code>anArray()</code> matcher. It actually it compares the two arrays element by element. On failure, only the first set of unequal elements are displayed in the error message.</p><p>The second version, using <code>equalTo()</code>, also compares each element in the arrays, but it outputs both arrays in their entirety on failure. Naturally, the length of your arrays will determine which matcher you use. Reading large arrays can be difficult.</p><h3>Partial Array Matches</h3><p>In many cases, we simply want to check if an array contains certain elements. Hamcrest has us covered.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testArrayPartials() {\n	$actualArray = array(1,2,3);\n	assertThat($actualArray, hasItemInArray(2));\n	assertThat($actualArray, hasValue(2));\n	assertThat($actualArray, arrayContaining(atLeast(0),2,3));\n	assertThat($actualArray, contains(1,2,lessThan(4)));\n	assertThat($actualArray, arrayContainingInAnyOrder(2,3,1));\n	assertThat($actualArray, containsInAnyOrder(3,1,2));\n}</pre><p>The <code>hasItemInArray()</code> and <code>hasValue()</code> matchers are identical; they both check if the provided value or matcher result exists in the array. Providing a value as an argument is equivalent to using <code>equalTo()</code>. Therefore, these are identical: <code>hasValue(2)</code> and <code>hasValue(equalTo(2))</code>.</p><p>The next two matchers, <code>arrayContaining()</code> and <code>contains()</code>, are also identical. They check, <strong>in order</strong>, that every element of the array satisfies the matcher, or that every element is equal to the specified values.</p><p>Finally, as you can easily deduce from the above example, <code>arrayContainingInAnyOrder()</code> and <code>containsInAnyOrder()</code> are the same as the previous two matchers. The only difference is that they <strong>do not care about the order</strong>.</p><h3>Matching Array Keys</h3><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testArrayKeys() {\n	$actualArray[\'one\'] = 1;\n	$actualArray[\'two\'] = 2;\n	$actualArray[\'three\'] = 3;\n	assertThat($actualArray, hasKeyInArray(\'two\'));\n	assertThat($actualArray, hasKey(\'two\'));\n	assertThat($actualArray, hasKeyValuePair(\'three\', 3));\n	assertThat($actualArray, hasEntry(\'one\', 1));\n}</pre><p>The matchers <code>hasKeyInArray()</code> and <code>hasKey()</code> check if the given argument matches any keys in the array, while the last two matchers return true only if both key and value are found. So, a matcher like <code>hasEntry(\'one\', 2);</code> would have failed our test because in our array, at key \'<code>one</code>\' we have the value <code>1</code> and not <code>2</code>.</p><div\nclass=\"tip-shortcode\"><p><strong>Please Note:</strong> It is recommended to use the shorter version (<code>hasKey</code>) when it is obvious from the variable\'s name that it is an array. Whoever reads your code may be confused about the type of the variable, in which case, (<code>hasKeyInArray</code>) may be more helpful.</p></div><h3>Array Sizes</h3><p>You can easily check the size of an array with three matchers:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testArraySizes() {\n	$actualArray = array(1,2,3);\n	assertThat($actualArray, arrayWithSize(3));\n	assertThat($actualArray, nonEmptyArray());\n	assertThat(array(), emptyArray());\n}</pre><p>The <code>arrayWithSize()</code> matcher checks for a specific size, <code>nonEmtpyArray()</code> checks if the array has at least one element, and <code>emptyArray()</code> verifies that the given array is empty.</p><div\nclass=\"tip-shortcode\"><p><strong>Please Note:</strong> There are versions of these three matchers if you prefer iterable objects. Just replace \"Array\" with \"Traversable\" like this <code>traversableWithSize()</code>.</p></div><hr\n/><h2>Checking for Value Types</h2><p>These are the last matchers. You can practically check for any data type in PHP.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testTypeChecks() {\n	assertThat(NULL, is(nullValue()));\n	assertThat(\'\', notNullValue());\n	assertThat(TRUE, is(booleanValue()));\n	assertThat(123.45, is(numericValue()));\n	assertThat(123, is(integerValue()));\n	assertThat(123.45, is(floatValue()));\n	assertThat(\'aString\', stringValue());\n	assertThat(array(1,2,3), arrayValue());\n	assertThat(new MyClass, objectValue());\n	assertThat(new MyClass, is(anInstanceOf(\'MyClass\')));\n	// there are a few other more exotic value checkers you can discover on your own\n}</pre><p>These are self-explanatory. Simply provide a value or object, and use one of the easy-to-use matchers to determine its data type.</p><hr\n/><h2>Conclusions</h2><p>Hamcrest PHP is not extensively documented in the official documentation, and I hope this tutorial helped explain the matchers it provides. There are a few matchers not listed in this tutorial, but they are very exotic and rarely used.</p><blockquote><p>Every Hamcrest matcher helps you write tests that read very naturally.</p></blockquote><p>If they are not enough for you, you can add your own matchers for your whatever situation you need them for. I hope you enjoyed this tutorial, and thank you for reading.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(7,3,1,1358016493,NULL,' Dependency Injection in PHP ','Dependency injection has been a frequent subject of discussion among many corporate developers in the past few years. Many feared that they might sacrifice too much time building their application architecture without doing any real work. In this article, I’ll explain why PHP developers should consider taking advantage of dependency injection, when building large, scalable projects.(Continue)','Dependency injection has been a frequent subject of discussion among many corporate developers in the past few years. Many feared that they might sacrifice too much time building their application architecture without doing any real work. In this article, I’ll explain why PHP developers should consider taking advantage of dependency injection, when building large, scalable projects.(Continue)',1,1,'dependency-injection-in-php',155,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2117_dependency_injection/dependency-injection.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-28146\'), post_id: 28146, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Dependency injection has been a frequent subject of discussion among many corporate developers in the past few years. Many feared that they might sacrifice too much time building their application architecture without doing any real work. In this article, I&#8217;ll explain why PHP developers should consider taking advantage of dependency injection, when building large, scalable projects.</p><p><span\nid=\"more-28146\"></span></p><hr\n/><h2>What is Dependency Injection?</h2><p>Before digging into the subject, let&#8217;s precisely define what dependency injection is. Let&#8217;s imagine that you currently work on a &#8220;Question and Answers&#8221; website, similar to <a\nhref=\"http://stackoverflow.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'stackoverflow.com\']);\">Stack Overflow</a>. You would more than likely create a class, called <code>Question</code>, which would contain a member of type <code>Author</code>. In &#8216;ye olden days, programmers would have created the <code>Author</code> object directly in the <code>Question</code> constructor, like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class Author {\n    private $firstName;\n    private $lastName;\n    public function __construct($firstName, $lastName) {\n        $this-&gt;firstName = $firstName;\n        $this-&gt;lastName = $lastName;\n    }\n    public function getFirstName() {\n        return $this-&gt;firstName;\n    }\n    public function getLastName() {\n        return $this-&gt;lastName;\n    }\n}\nclass Question {\n    private $author;\n    private $question;\n    public function __construct($question, $authorFirstName, $authorLastName) {\n        $this-&gt;author = new Author($authorFirstName, $authorLastName);\n        $this-&gt;question = $question;\n    }\n    public function getAuthor() {\n        return $this-&gt;author;\n    }\n    public function getQuestion() {\n        return $this-&gt;question;\n    }\n}</pre><p>While many programmers might call this good code, there are in fact many problems with it:</p><ul><li>The author&#8217;s information passed to the <code>Question</code> constructor has nothing to do inside <code>Question</code>&#8216;s scope.  The name of an author should be inside the <code>Author</code> class because it has nothing to do with the question, itself.</li><li>The <code>Author</code> class is tightly coupled with the <code>Question</code> class.  If we add a new parameter to <code>Author</code>&#8216;s constructor, we then have to modify every class where we create an <code>Author</code> object &#8211; a tedious and long process, especially in large applications.</li><li>Unit testing the <code>Question</code> class creates the unwanted behavior of having to test the <code>Author</code> class as well.</li></ul><p>Dependency injection alleviates these issues by inserting the dependencies through the dependent class&#8217; constructor (&#8220;Constructor Injection&#8221;). The result is highly maintainable code, which might look like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class Author {\n    private $firstName;\n    private $lastName;\n    public function __construct($firstName, $lastName) {\n        $this-&gt;firstName = $firstName;\n        $this-&gt;lastName = $lastName;\n    }\n    public function getFirstName() {\n        return $this-&gt;firstName;\n    }\n    public function getLastName() {\n        return $this-&gt;lastName;\n    }\n}\nclass Question {\n    private $author;\n    private $question;\n    public function __construct($question, Author $author) {\n        $this-&gt;author = $author;\n        $this-&gt;question = $question;\n    }\n    public function getAuthor() {\n        return $this-&gt;author;\n    }\n    public function getQuestion() {\n        return $this-&gt;question;\n    }\n}</pre><hr\n/><h2>Advantages of Dependency Injection</h2><blockquote\nclass=\"pullquote\"><p>You need to use Dependency Injection for long-term projects.</p></blockquote><p>I have worked on many commercial projects in my career. Some of them are very well written; however, I must say that most of them have considerably poor code quality. I was recently assigned to work on such a code base&#8230;</p><p>A company requested the application in 2009. The project&#8217;s budget was properly planned, but the project manager wanted the application built very quickly to impress his boss.  At least, this is what my co-worker told me. Writing an application quickly might sound great to reduce costs, but it also means that the developers jumped into the code without proper planning.</p><p>The developers wrote code quickly, creating classes necessary to perform the necessary functionality. The features changed as the project evolved, and because the project was poorly planned (and every class was tightly coupled), the project became difficult to develop.</p><p>Currently, it&#8217;s difficult to work on this project. Modifying a simple class results in a cascade of other modifications in other classes, because everything is coupled together &#8211; resulting in many bugs. Each time something is modified, the developer needs to chase down and fix bugs.</p><blockquote><p>The application is also impossible to unit test, degrading the code&#8217;s quality.</p></blockquote><p>Every feature must be manually tested, losing valuable time that could be spent elsewhere. In fact, to reduce the cost of manual testing, we created software to test the infrastructure of the application. Yes, we had to create new software in order to test the actual product.</p><p>The company learned that trying to quickly write software resulted in unexpected costs. At first, the company made a lot of money because they charged a lot for it, but after three years, they lost money on this application. The amount of money they pulled in doesn&#8217;t cover the continued, high expense of maintenance. They also lost many good, senior developers, who lost any desire to work on the project.</p><p>If the application used dependency injection, the developers would have been able to properly unit test the full application, leading to reduced maintenance costs and debugging. The company would have focused on creating new features that last, instead of losing software quality every time that a new feature was introduced. They would also have kept their senior team members and avoided losing money by finding and hiring new employees (which is difficult to begin with in my city).</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><hr\n/><h2>Getting Started on a Limited Budget</h2><p>While dependency injection helps assists you in writing better code, it can also require extra time and effort to do it correctly. This can prove to be an issue, if you need working code for a demo.</p><blockquote><p>If all you need is a proof of concept, then I suggest that you don&#8217;t waste time with dependency injection and proper architecture.</p></blockquote><p>Jump right in and start coding. You can do things correctly after the project is approved and you have the necessary funding. In fact, once you do have proper funding, throw away your demo and begin from scratch. Otherwise, your application will end up as a spaghetti-code-trash-can.</p><hr\n/><h2>Messy Start-up Code</h2><p>So, you&#8217;ve begun passing your dependencies in your class constructors, but as the project grows, you end up with many levels of objects that must be created when your application starts. Depending on your application&#8217;s size, creating all objects to launch your application can be a very long process and hurt your application&#8217;s performance (as well as result in messy code). Here&#8217;s an example:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">/*\n    Please note that the nature of the application is not important here. I only wanted to show how hard-to-maintain/awful such code can be:\n*/\n$filePath = &quot;/path/to/file&quot;;\n$fileBuilderFactory = new ConcreteFileBuilderFactory();\n$filesXmlBuilderFactory = new ConcreteFilesXmlBuilderFactory($fileBuilderFactory);\n$softwaresRetrieverCriteriaBuilderFactory = new ConcreteSoftwaresRetrieverCriteriaBuilderFactory($filesXmlBuilderFactory);\n$softwareRetrieverCriteriaBuilderFactory = new ConcreteSoftwaresSoftwareRetrieverCriteriaBuilderFactory($filesXmlBuilderFactory);\n$filesJsonBuilderFactory = new ConcreteFilesJsonBuilderFactory($fileBuilderFactory);\n$objectBuildderFactory = new ConcreteSoftwaresSoftwareObjectBuilderFactory();\n$softwaresSoftwareBuilderFactory = new ConcreteSoftwaresSoftwareBuilderFactory($objectBuildderFactory);\n$xmlSoftwareRepository = new XmlSoftwareRepository($softwaresSoftwareBuilderFactory);\n$softwaresBuilderFactory = new ConcreteSoftwaresBuilderFactory($xmlSoftwareRepository, $softwareRetrieverCriteriaBuilderFactory, $filesJsonBuilderFactory);\n$xmlSoftwaresRepository = new XmlSoftwaresRepository($softwaresBuilderFactory);\n$softwareToHashMap = new ConcreteSoftwareToHashMap();\n$softwaresToHashMap = new ConcreteSoftwaresToHashMap($softwareToHashMap);\n$jsonSoftwaresService = new JsonSoftwaresService($softwaresToHashMap);\n$di = new DependencyInjection($softwaresRetrieverCriteriaBuilderFactory, $xmlSoftwaresRepository, $jsonSoftwaresService);</pre><p>This start-up code is rather small. If you build a large application, your start-up code can become much heavier than this. Needless to say, this results in some difficult to maintain code.</p><p>To solve this problem, we need a dependency injection application that reads an XML file and creates all the necessary objects needed to launch the application. The objects would then be serialized and written to a file. The start-up code would then simply read that file and directly create the objects. This makes your start-up code as simple as:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$objectFilePath = &quot;/path/to/serialized/object/file&quot;;\n$di = unserialize(file_get_contents($objectFilePath));</pre><hr\n/><h2>Open Source Dependency Injection Software</h2><p>Most companies do not have much budget to create tools, such as a dependency injection framework. You can, however, find many free and open source solutions around the web. <a\nhref=\"http://symfony.com/doc/2.0/components/dependency_injection/introduction.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'symfony.com\']);\">Symfony2</a> uses a very solid DI component that is based on <a\nhref=\"http://www.springsource.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.springsource.org\']);\">Java Spring</a>. However, I will cover programming a dependency injection solution in the near future, if that interests you. Stay tuned!</p><hr\n/><h2>PHP Devs and Dependency Injection</h2><p>I don&#8217;t want to generalize, but, due to its popularity, many PHP developers are hobbyists, who love to mix PHP and HTML.</p><blockquote><p>These developers normally don&#8217;t plan their project; they just want to write code quickly to &#8220;get things done.&#8221;</p></blockquote><p>I believe that hiring these types of developers is the worst thing a manager can do. By stressing the importance of dependency injection, you can make these &#8220;hackers&#8221; disinterested in your company, while, at the same time, enticing good developers to work for you company. In other words, your project will attract good senior developers, which is the most important resource a software development company could acquire!</p><hr\n/><h2>When to Use Dependency Injection</h2><blockquote\nclass=\"pullquote\"><p>Dependency injection is most useful, when working on long-term projects.</p></blockquote><p>From my experiences, dependency injection is most useful, when working on long-term projects &#8211; projects that are actively developed and maintained over a long period of time. This greatly reduces your costs and attracts the best developers. But, as I mentioned before, if you need a demo application to get a contract or some funding, I&#8217;d recommend digging right into the code. If you follow that path, however, be aware that the demo will need to be thrown away after you acquire contract and/or funding.</p><hr\n/><h2>Story Time!</h2><p>I love stories about developers who want to do the right thing, but their co-workers want to forego best practices and push a project out as fast as possible. What are your thoughts on dependency injection? An over-complication, or a requirement for any sustainable application?</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(8,3,1,1358016494,NULL,' Mockery: A Better Way ','Mockery is a PHP extension that offers a superior mocking experience, particularly when compared to PHPUnit. While PHPUnit’s mocking framework is powerful, Mockery offers a more natural language with a Hamcrest-like set of matchers. In this article, I’ll compare the two mocking frameworks and highlight the best features of Mockery.(Continue)','Mockery is a PHP extension that offers a superior mocking experience, particularly when compared to PHPUnit. While PHPUnit’s mocking framework is powerful, Mockery offers a more natural language with a Hamcrest-like set of matchers. In this article, I’ll compare the two mocking frameworks and highlight the best features of Mockery.(Continue)',1,1,'mockery-a-better-way',291,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2157_mockery/mockery.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2157_mockery/source.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div><div\nclass=\"session-post\"><em>This entry is part 12 of 12 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/test-driven-php/\" >Test-Driven PHP</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/php/evolving-toward-a-persistence-layer/\"  class=\"left\">&laquo; Previous</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/articles/news/its-time-to-dig-in/\" >It\'s Time to Dig In</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/\" >The Newbie\'s Guide to TDD</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/test-driven-development-in-php-first-steps/\" >First Steps</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/automatic-testing-for-tdd-with-php/\" >Automatic Testing</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/lets-tdd-a-simple-app-in-php/\" >Let\'s TDD a Simple App</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/deciphering-testing-jargon/\" >Deciphering Testing Jargon</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/all-about-mocking-with-phpunit/\" >All About Mocking in PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/hands-on-unit-testing-with-phpunit/\" >Hands-On Testing With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/how-to-use-selenium-2-with-phpunit/\" >How to Use Selenium 2 With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/articles/interviews/chatting-with-the-grumpy-php-programmer\" >Chatting With The Grumpy PHP Programmer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/evolving-toward-a-persistence-layer/\" >Evolving Toward a Persistence Layer</a></li><li>Mockery: A Better Way</li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-28097\'), post_id: 28097, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p><a\nhref=\"https://github.com/padraic/mockery\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">Mockery</a> is a PHP extension that offers a superior mocking experience, particularly when compared to <a\nhref=\"http://www.phpunit.de/manual/current/en/index.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.phpunit.de\']);\">PHPUnit</a>. While PHPUnit&#8217;s mocking framework is powerful, Mockery offers a more natural language with a Hamcrest-like set of matchers. In this article, I&#8217;ll compare the two mocking frameworks and highlight the best features of Mockery.</p><p><span\nid=\"more-28097\"></span></p><p>Mockery offers a set of mocking-related matchers that are very similar to a Hamcrest dictionary, offering a very natural way to express mocked expectations. Mockery does not override or conflict with PHPUnit&#8217;s built-in mocking functions; in fact, you can use them both at the same time (and even in the same test method).</p><hr\n/><h2>Installing Mockery</h2><p>There are multiple ways to install Mockery; here are the most common methods.</p><h3>Use Composer</h3><p>Create a file called <code>composer.json</code> in you project&#8217;s root folder, and add the following code to that file:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">{\n    &quot;require&quot;: {\n        &quot;Mockery/Mockery&quot;: &quot;&gt;=0.7.2&quot;\n    }\n}</pre><p>Next, simply install Composer in your project&#8217;s root folder using the following command:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">curl -s http://getcomposer.org/installer | php</pre><p>Finally, install any required dependencies (including Mockery) with this command:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">php composer.phar install</pre><p>With everything installed, let&#8217;s ensure that our Mockery installation works. For the sake of simplicity, I&#8217;ll assume that you have a folder, called <code>Test</code> in your project&#8217;s root directory. All of the examples in this tutorial will reside in this folder. Here&#8217;s the code I&#8217;ve used to ensure that Mockery works with my project:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">//Filename: JustToCheckMockeryTest.php\nrequire_once \'../vendor/autoload.php\';\nclass JustToCheckMockeryTest extends PHPUnit_Framework_TestCase {\n	protected function tearDown() {\n		\\Mockery::close();\n	}\n	function testMockeryWorks() {\n		$mock = \\Mockery::mock(\'AClassToBeMocked\');\n		$mock-&gt;shouldReceive(\'someMethod\')-&gt;once();\n		$workerObject = new AClassToWorkWith;\n		$workerObject-&gt;doSomethingWit($mock);\n	}\n}\nclass AClassToBeMocked {}\nclass AClassToWorkWith {\n	function doSomethingWit($anotherClass) {\n		return $anotherClass-&gt;someMethod();\n	}\n}</pre><h3>Linux Users: Use Your Distro&#8217;s Packages</h3><p>Some Linux distributions make it easy to install Mockery, but only a handful provide a Mockery package for their system. The following list are the only distros I&#8217;m aware of:</p><ul><li><strong>Sabayon</strong>: <code>equo install Mockery</code></li><li><strong>Fedora / RHE</strong>: <code>yum install Mockery</code></li></ul><h3>Use PEAR</h3><p>PEAR fans can install Mockery by issuing the following commands:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">sudo pear channel-discover pear.survivethedeepend.com\nsudo pear channel-discover hamcrest.googlecode.com/svn/pear\nsudo pear install --alldeps deepend/Mockery</pre><h3>Installing from Source</h3><p>Installing from GitHub is for the real geeks! You can always grab the latest version of Mockery through its GitHub repository.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">git clone git://github.com/padraic/Mockery.git\ncd Mockery\nsudo pear channel-discover hamcrest.googlecode.com/svn/pear\nsudo pear install --alldeps package.xml</pre><hr\n/><h2>Creating our First Mocked Object</h2><p>Let&#8217;s mock some objects before we define any expectations. The following code will modify the previous example to include both PHPUnit and Mockery examples:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">//Filename: MockeryABetterWayOfMockingTest.php\nrequire_once \'../vendor/autoload.php\';\nclass MockeryVersusPHPUnitGetMockTest extends PHPUnit_Framework_TestCase {\n	function testCreateAMockedObject() {\n		// With PHPUnit\n		$phpunitMock = $this-&gt;getMock(\'AClassToBeMocked\');\n		// With Mockery\n		$mockeryMock = \\Mockery::mock(\'AClassToBeMocked\');\n	}\n}\nclass AClassToBeMocked {\n}</pre><blockquote\nclass=\"pullquote\"><p>Mockery allows you to define mocks for classes that do not exist.</p></blockquote><p>The first line ensures that we have access to Mockery. Next, we create a test class, called <code>MockeryVersusPHPUnitGetMockTest</code>, which has a method, <code>testCreateAMockedObject()</code>. The mocked class, <code>AClassToBeMocked</code>, is completely empty at this time; in fact, you could completely remove the class without causing the test to fail.</p><p>The <code>testCreateAMockedObject()</code> test method defines two objects. The first is a PHPUnit mock, and the second is created with Mockery. Mockery&#8217;s syntax is:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">$mockedObject = \\Mockery::mock(\'SomeClassToBeMocked\');</pre><hr\n/><h2>Assign Simple Expectations</h2><p>Mocks are commonly used to verify an object&#8217;s behavior (primarily its methods) by specifying what are called <em>expectations</em>. Let&#8217;s set up a few simple expectations.</p><h3>Expect a Method to be Called</h3><p>Probably the most common expectation is one that expects a specific method call. Most mocking frameworks allow you to specify the amount of calls you expect a method to receive. We&#8217;ll begin with a simple single call expectation:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">//Filename: MockeryABetterWayOfMockingTest.php\nrequire_once \'../vendor/autoload.php\';\nclass MockeryVersusPHPUnitGetMockTest extends PHPUnit_Framework_TestCase {\n	protected function tearDown() {\n		\\Mockery::close();\n	}\n	function testExpectOnce() {\n		$someObject = new SomeClass();\n		// With PHPUnit\n		$phpunitMock = $this-&gt;getMock(\'AClassToBeMocked\');\n		$phpunitMock-&gt;expects($this-&gt;once())-&gt;method(\'someMethod\');\n		// Exercise for PHPUnit\n		$someObject-&gt;doSomething($phpunitMock);\n		// With Mockery\n		$mockeryMock = \\Mockery::mock(\'AnInexistentClass\');\n		$mockeryMock-&gt;shouldReceive(\'someMethod\')-&gt;once();\n		// Exercise for Mockery\n		$someObject-&gt;doSomething($mockeryMock);\n	}\n}\nclass AClassToBeMocked {\n	function someMethod() {}\n}\nclass SomeClass {\n	function doSomething($anotherObject) {\n		$anotherObject-&gt;someMethod();\n	}\n}\n</pre><p>This code configures an expectation for both PHPUnit and Mockery. Let&#8217;s start with the former.</p><blockquote\nclass=\"pullquote\"><p>Some Linux distributions make it easy to install Mockery.</p></blockquote><p>We use the <code>expects()</code> method to define an expectation to call <code>someMethod()</code> once. But in order for PHPUnit to work correctly, we <strong>must</strong> define a class called <code>AClassToBeMocked</code>, and it must have a <code>someMethod()</code> method.</p><p>This is a problem. If you are mocking a lot of objects and developing using TDD principles for a top-down design, you would not want to create all the classes and methods before your test. Your test should fail for the right reason, that the expected method was not called, instead of a critical PHP error with no relation to the real implementation. Go ahead and try to remove the <code>someMethod()</code> definition from <code>AClassToBeMocked</code>, and see what happens.</p><blockquote><p>Mockery, on the other hand, allows you to define mocks for classes that do not exist.</p></blockquote><p>Notice that the above example creates a mock for <code>AnInexistentClass</code>, which as its name implies, does not exist (nor does its <code>someMethod()</code> method).</p><p>At the end of the above example, we define the <code>SomeClass</code> class to exercise our code. We initialize an object, called <code>$someObject</code> in the first line of the test method, and we effectively exercise the code after defining our expectations.</p><div\nclass=\"tip-shortcode\"><p><strong>Please Note:</strong> Mockery evaluates expectations on its <code>close()</code> method. For this reason, you should always have a <code>tearDown()</code> method on your test that calls <code>\\Mockery::close()</code>. Otherwise, Mockery gives false positives.</p></div><h3>Expect More Than One Call</h3><p>As I noted previously, most mocking frameworks have the ability to specify expectations for multiple method calls. PHPUnit uses the <code>$this->exactly()</code> construct for this purpose. The following code defines the expectations for calling a method multiple times:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testExpectMultiple() {\n	$someObject = new SomeClass();\n	// With PHPUnit 2 times\n	$phpunitMock = $this-&gt;getMock(\'AClassToBeMocked\');\n	$phpunitMock-&gt;expects($this-&gt;exactly(2))-&gt;method(\'someMethod\');\n	// Exercise for PHPUnit\n	$someObject-&gt;doSomething($phpunitMock);\n	$someObject-&gt;doSomething($phpunitMock);\n	// With Mockery 2 times\n	$mockeryMock = \\Mockery::mock(\'AnInexistentClass\');\n	$mockeryMock-&gt;shouldReceive(\'someMethod\')-&gt;twice();\n	// Exercise for Mockery\n	$someObject-&gt;doSomething($mockeryMock);\n	$someObject-&gt;doSomething($mockeryMock);\n	// With Mockery 3 times\n	$mockeryMock = \\Mockery::mock(\'AnInexistentClass\');\n	$mockeryMock-&gt;shouldReceive(\'someMethod\')-&gt;times(3);\n	// Exercise for Mockery\n	$someObject-&gt;doSomething($mockeryMock);\n	$someObject-&gt;doSomething($mockeryMock);\n	$someObject-&gt;doSomething($mockeryMock);\n}</pre><p>Mockery provides two different methods to better suit your needs. The first method, <code>twice()</code>, expects two method calls. The other method is <code>times()</code>, which lets you specify an amount. Mockery&#8217;s approach is much cleaner and easier to read.</p><hr\n/><h2>Returning Values</h2><p>Another common use for mocks is to test a method&#8217;s return value. Naturally, both PHPUnit and Mockery have the means to verify return values. Once again, let&#8217;s start with something simple.</p><h3>Simple Return Values</h3><p>The following code contains both PHPUnit and Mockery code. I also updated <code>SomeClass</code> to provide a testable return value.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class MockeryVersusPHPUnitGetMockTest extends PHPUnit_Framework_TestCase {\n	protected function tearDown() {\n		\\Mockery::close();\n	}\n	// [...] //\n	function testSimpleReturnValue() {\n		$someObject = new SomeClass();\n		$someValue = \'some value\';\n		// With PHPUnit\n		$phpunitMock = $this-&gt;getMock(\'AClassToBeMocked\');\n		$phpunitMock-&gt;expects($this-&gt;once())-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($someValue));\n		// Expect the returned value\n		$this-&gt;assertEquals($someValue, $someObject-&gt;doSomething($phpunitMock));\n		// With Mockery\n		$mockeryMock = \\Mockery::mock(\'AnInexistentClass\');\n		$mockeryMock-&gt;shouldReceive(\'someMethod\')-&gt;once()-&gt;andReturn($someValue);\n		// Expect the returned value\n		$this-&gt;assertEquals($someValue, $someObject-&gt;doSomething($mockeryMock));\n	}\n}\nclass AClassToBeMocked {\n	function someMethod() {\n	}\n}\nclass SomeClass {\n	function doSomething($anotherObject) {\n		return $anotherObject-&gt;someMethod();\n	}\n}</pre><p>Both PHPUnit&#8217;s and Mockery&#8217;s API is straight-forward and easy to use, but I still find Mockery to be cleaner and more readable.</p><h3>Returning Different Values</h3><p>Frequent unit testers can testify to complications with methods that return different values. Unfortunately, PHPUnit&#8217;s limited <code>$this->at($index)</code> method is the <strong>only</strong> way to return different values from the same method. The following code demonstrates the <code>at()</code> method:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testDemonstratePHPUnitCallIndexing() {\n	$someObject = new SomeClass();\n	$firstValue = \'first value\';\n	$secondValue = \'second value\';\n	// With PHPUnit\n	$phpunitMock = $this-&gt;getMock(\'AClassToBeMocked\');\n	$phpunitMock-&gt;expects($this-&gt;at(0))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($firstValue));\n	$phpunitMock-&gt;expects($this-&gt;at(1))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($secondValue));\n	// Expect the returned value\n	$this-&gt;assertEquals($firstValue, $someObject-&gt;doSomething($phpunitMock));\n	$this-&gt;assertEquals($secondValue, $someObject-&gt;doSomething($phpunitMock));\n}</pre><p>This code defines two separate expectations and makes two different calls to <code>someMethod()</code>; so, this test passes. But let&#8217;s introduce a twist and add a double call in the tested class:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n// [...] //\nfunction testDemonstratePHPUnitCallIndexingOnTheSameClass() {\n	$someObject = new SomeClass();\n	$firstValue = \'first value\';\n	$secondValue = \'second value\';\n	// With PHPUnit\n	$phpunitMock = $this-&gt;getMock(\'AClassToBeMocked\');\n	$phpunitMock-&gt;expects($this-&gt;at(0))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($firstValue));\n	$phpunitMock-&gt;expects($this-&gt;at(1))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($secondValue));\n	// Expect the returned value\n	$this-&gt;assertEquals(\'first value second value\', $someObject-&gt;concatenate($phpunitMock));\n}\nclass SomeClass {\n	function doSomething($anotherObject) {\n		return $anotherObject-&gt;someMethod();\n	}\n	function concatenate($anotherObject) {\n		return $anotherObject-&gt;someMethod() . \' \' . $anotherObject-&gt;someMethod();\n	}\n}</pre><p>The test still passes. PHPUnit expects two calls to <code>someMethod()</code> that happen inside the tested class when performing the concatenation via the <code>concatenate()</code> method. The first call returns the first value, and the second call returns the second value. But, here&#8217;s the catch: what would happen if you double the assertion? Here&#8217;s the code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testDemonstratePHPUnitCallIndexingOnTheSameClass() {\n	$someObject = new SomeClass();\n	$firstValue = \'first value\';\n	$secondValue = \'second value\';\n	// With PHPUnit\n	$phpunitMock = $this-&gt;getMock(\'AClassToBeMocked\');\n	$phpunitMock-&gt;expects($this-&gt;at(0))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($firstValue));\n	$phpunitMock-&gt;expects($this-&gt;at(1))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($secondValue));\n	// Expect the returned value\n	$this-&gt;assertEquals(\'first value second value\', $someObject-&gt;concatenate($phpunitMock));\n	$this-&gt;assertEquals(\'first value second value\', $someObject-&gt;concatenate($phpunitMock));\n}</pre><p>It returns the following error:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">Failed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-\'first value second value\'\n+\' \'</pre><p>PHPUnit continues counting between distinct calls to <code>concatenate()</code>. By the time the second call in the last assertion occurs, <code>$index</code> is at the values <code>2</code> and <code>3</code>. You can make the test pass by modifying your expectations to consider the two new steps, like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testDemonstratePHPUnitCallIndexingOnTheSameClass() {\n	$someObject = new SomeClass();\n	$firstValue = \'first value\';\n	$secondValue = \'second value\';\n	// With PHPUnit\n	$phpunitMock = $this-&gt;getMock(\'AClassToBeMocked\');\n	$phpunitMock-&gt;expects($this-&gt;at(0))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($firstValue));\n	$phpunitMock-&gt;expects($this-&gt;at(1))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($secondValue));\n	$phpunitMock-&gt;expects($this-&gt;at(2))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($firstValue));\n	$phpunitMock-&gt;expects($this-&gt;at(3))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($secondValue));\n	// Expect the returned value\n	$this-&gt;assertEquals(\'first value second value\', $someObject-&gt;concatenate($phpunitMock));\n	$this-&gt;assertEquals(\'first value second value\', $someObject-&gt;concatenate($phpunitMock));\n}</pre><p>You can probably live with this code, but Mockery makes this scenario trivial. Don&#8217;t believe me? Take a look:</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testMultipleReturnValuesWithMockery() {\n	$someObject = new SomeClass();\n	$firstValue = \'first value\';\n	$secondValue = \'second value\';\n	// With Mockery\n	$mockeryMock = \\Mockery::mock(\'AnInexistentClass\');\n	$mockeryMock-&gt;shouldReceive(\'someMethod\')-&gt;andReturn($firstValue, $secondValue, $firstValue, $secondValue);\n	// Expect the returned value\n	$this-&gt;assertEquals(\'first value second value\', $someObject-&gt;concatenate($mockeryMock));\n	$this-&gt;assertEquals(\'first value second value\', $someObject-&gt;concatenate($mockeryMock));\n}</pre><p>Like PHPUnit, Mockery uses index counting, but we don&#8217;t have to worry about indices. Instead, we simply list all the expected values, and Mockery returns them in order.</p><p>Additionally, PHPUnit returns <code>NULL</code> for unspecified indexes, but Mockery always returns the last specified value. That&#8217;s a nice touch.</p><h3>Try Multiple Methods with Indexing</h3><p>Let&#8217;s introduce a second method into our code, the <code>concatWithMinus()</code> method:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class SomeClass {\n	function doSomething($anotherObject) {\n		return $anotherObject-&gt;someMethod();\n	}\n	function concatenate($anotherObject) {\n		return $anotherObject-&gt;someMethod() . \' \' . $anotherObject-&gt;someMethod();\n	}\n	function concatWithMinus($anotherObject) {\n		return $anotherObject-&gt;anotherMethod() . \' - \' . $anotherObject-&gt;anotherMethod();\n	}\n}</pre><p>This method behaves similarly to <code>concatenate()</code>, but it concatenates the string values with &#8220;<code> - </code>&#8221; as opposed to a single space. Because these two methods perform similar tasks, it makes sense to to test them inside the same test method to avoid duplicate testing.</p><p>As demonstrated in the above code, the second function uses a different mocked method called <code>anotherMethod()</code>. I made this change to force us to mock both methods in our tests. Our mockable class now looks like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class AClassToBeMocked {\n	function someMethod() {\n	}\n	function anotherMethod() {\n	}\n}</pre><p>Testing this with PHPUnit might look like the following:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testPHPUnitIndexingOnMultipleMethods() {\n	$someObject = new SomeClass();\n	$firstValue = \'first value\';\n	$secondValue = \'second value\';\n	// With PHPUnit\n	$phpunitMock = $this-&gt;getMock(\'AClassToBeMocked\');\n	// First and second call on the semeMethod:\n	$phpunitMock-&gt;expects($this-&gt;at(0))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($firstValue));\n	$phpunitMock-&gt;expects($this-&gt;at(1))-&gt;method(\'someMethod\')-&gt;will($this-&gt;returnValue($secondValue));\n	// Expect the returned value\n	$this-&gt;assertEquals(\'first value second value\', $someObject-&gt;concatenate($phpunitMock));\n	// First and second call on the anotherMethod:\n	$phpunitMock-&gt;expects($this-&gt;at(0))-&gt;method(\'anotherMethod\')-&gt;will($this-&gt;returnValue($firstValue));\n	$phpunitMock-&gt;expects($this-&gt;at(1))-&gt;method(\'anotherMethod\')-&gt;will($this-&gt;returnValue($secondValue));\n	// Expect the returned value\n	$this-&gt;assertEquals(\'first value - second value\', $someObject-&gt;concatWithMinus($phpunitMock));\n}</pre><p>The logic is sound. Define two different expectations for each method and specify the return value. This works only with PHPUnit 3.6 or newer.</p><div\nclass=\"tip-shortcode\"><p><strong>Please Note:</strong> PHPunit 3.5 and older had a bug which did not reset the index for each method, resulting in unexpected return values for mocked methods.</p></div><p>Let&#8217;s look at the same scenario with Mockery. Once again, we get much cleaner code. See for yourself:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testMultipleReturnValuesForDifferentFunctionsWithMockery() {\n	$someObject = new SomeClass();\n	$firstValue = \'first value\';\n	$secondValue = \'second value\';\n	// With Mockery\n	$mockeryMock = \\Mockery::mock(\'AnInexistentClass\');\n	$mockeryMock-&gt;shouldReceive(\'someMethod\')-&gt;andReturn($firstValue, $secondValue);\n	$mockeryMock-&gt;shouldReceive(\'anotherMethod\')-&gt;andReturn($firstValue, $secondValue);\n	// Expect the returned value\n	$this-&gt;assertEquals(\'first value second value\', $someObject-&gt;concatenate($mockeryMock));\n	$this-&gt;assertEquals(\'first value - second value\', $someObject-&gt;concatWithMinus($mockeryMock));\n}</pre><hr\n/><h2>Return Values Based on Given Parameter</h2><p>Honestly, this is something PHPUnit simply cannot do. At the time of this writing, PHPUnit does not permit you to return different values from the same function based on the function&#8217;s parameter. Therefore, the following test fails:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n// [...] //\nfunction testPHUnitCandDecideByParameter() {\n	$someObject = new SomeClass();\n	// With PHPUnit\n	$phpunitMock = $this-&gt;getMock(\'AClassToBeMocked\');\n	$phpunitMock-&gt;expects($this-&gt;any())-&gt;method(\'getNumber\')-&gt;with(2)-&gt;will($this-&gt;returnValue(2));\n	$phpunitMock-&gt;expects($this-&gt;any())-&gt;method(\'getNumber\')-&gt;with(3)-&gt;will($this-&gt;returnValue(3));\n	$this-&gt;assertEquals(4, $someObject-&gt;doubleNumber($phpunitMock, 2));\n	$this-&gt;assertEquals(6, $someObject-&gt;doubleNumber($phpunitMock, 3));\n}\nclass AClassToBeMocked {\n// [...] //\n	function getNumber($number) {\n		return $number;\n	}\n}\nclass SomeClass {\n	// [...] //\n	function doubleNumber($anotherObject, $number) {\n		return $anotherObject-&gt;getNumber($number) * 2;\n	}\n}</pre><p>Please ignore the fact that there is no logic in this example; it would fail even if it was present. This code, however, does help illustrate the idea.</p><p>This test fails because PHPUnit cannot differentiate between the two expectations in the test. The second expectation, expecting parameter <code>3</code>, simply overrides the first expecting parameter <code>2</code>. If you attempt to run this test, you get the following error:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">Expectation failed for method name is equal to &lt;string:getNumber&gt; when invoked zero or more times\nParameter 0 for invocation AClassToBeMocked::getNumber(2) does not match expected value.\nFailed asserting that 2 matches expected 3.</pre><p>Mockery can do this, and the code below works exactly as you would expect it to work. The method returns different values based on its provided parameters:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testMockeryReturningDifferentValuesBasedOnParameter() {\n	$someObject = new SomeClass();\n	// Mockery\n	$mockeryMock = \\Mockery::mock(\'AnInexistentClass\');\n	$mockeryMock-&gt;shouldReceive(\'getNumber\')-&gt;with(2)-&gt;andReturn(2);\n	$mockeryMock-&gt;shouldReceive(\'getNumber\')-&gt;with(3)-&gt;andReturn(3);\n	$this-&gt;assertEquals(4, $someObject-&gt;doubleNumber($mockeryMock, 2));\n	$this-&gt;assertEquals(6, $someObject-&gt;doubleNumber($mockeryMock, 3));\n}</pre><hr\n/><h2>Partial Mocks</h2><p>Sometimes, you want to mock only specific methods on your object (as opposed to mocking an entire object). The following <code>Calculator</code> class already exists; we want to only mock certain methods:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class Calculator {\n	function add($firstNo, $secondNo) {\n		return $firstNo + $secondNo;\n	}\n	function subtract($firstNo, $secondNo) {\n		return $firstNo - $secondNo;\n	}\n	function multiply($value, $multiplier) {\n		$newValue = 0;\n		for($i=0;$i&lt;$multiplier;$i++)\n			$newValue = $this-&gt;add($newValue, $value);\n		return $newValue;\n	}\n}</pre><p>This <code>Calculator</code> class has three methods: <code>add()</code>, <code>subtract()</code>, and <code>multiply()</code>. Multiply uses a loop to perform the multiplication by calling the <code>add()</code> for a specified amount of times (e.g. <code>2 x 3</code> is really <code>2 + 2 + 2</code>).</p><p>Let&#8217;s assume that we want to test <code>multiply()</code> in total isolation; so, we&#8217;ll mock <code>add()</code> and check for specific behavior on <code>multiply()</code>. Here are some possible tests:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testPartialMocking() {\n	$value = 3;\n	$multiplier = 2;\n	$result = 6;\n	// PHPUnit\n	$phpMock = $this-&gt;getMock(\'Calculator\', array(\'add\'));\n	$phpMock-&gt;expects($this-&gt;exactly(2))-&gt;method(\'add\')-&gt;will($this-&gt;returnValue($result));\n	$this-&gt;assertEquals($result, $phpMock-&gt;multiply($value,$multiplier));\n	// Mockery\n	$mockeryMock = \\Mockery::mock(new Calculator);\n	$mockeryMock-&gt;shouldReceive(\'add\')-&gt;andReturn($result);\n	$this-&gt;assertEquals($result, $mockeryMock-&gt;multiply($value,$multiplier));\n	// Mockery extended test checking parameters\n	$mockeryMock2 = \\Mockery::mock(new Calculator);\n	$mockeryMock2-&gt;shouldReceive(\'add\')-&gt;with(0,3)-&gt;andReturn(3);\n	$mockeryMock2-&gt;shouldReceive(\'add\')-&gt;with(3,3)-&gt;andReturn(6);\n	$this-&gt;assertEquals($result, $mockeryMock2-&gt;multiply($value,$multiplier));\n}</pre><blockquote\nclass=\"pullquote\"><p>Mockery offers&#8230;a very natural way to express mocked expectations.</p></blockquote><p>The first PHPUnit test is anemic; it simply tests that the method <code>add()</code> is called twice and it returns the final value on each call. It gets the job done, but it&#8217;s also a little complicated. PHPUnit forces you to pass the list of methods that you want to mock as second parameter to <code>$this->getMock()</code>. Otherwise, PHPUnit would mock all methods, each returning <code>NULL</code> by default. This list <strong>must</strong> be kept in concordance with the expectations you define on your mocked object.</p><p>For example, if I add a second expectation to <code>$phpMock</code>&#8216;s <code>substract()</code> method, PHPUnit would ignore it and call the original <code>substract()</code> method. That is, unless I explicitly specify the name of the method (<code>substract</code>) in the <code>$this->getmock()</code> statement.</p><p>Of course, Mockery is different by allowing you to provide a real object to <code>\\Mockery::mock()</code>, and it automatically creates a partial mock. It achieves this by implementing a proxy-like solution for mocking. All the expectations you define are used, but Mockery falls back to the original method if you do not specify an expectation for that method.</p><div\nclass=\"tip-shortcode\"><p><strong>Please Note:</strong> Mockery&#8217;s approach is very simple, but internal method calls do not pass through the mocked object.</p></div><p>This example is misleading, but it illustrates <strong>how not to use</strong> Mockery&#8217;s partial mocks. Yes, Mockery creates a partial mock if you pass a real object, but it only mocks <strong>only external calls</strong>. For example, based on the previous code, the <code>multiply()</code> method calls the real <code>add()</code> method. Go ahead and try to change the last expectation from <code>...->andReturn(6)</code> to <code>...->andReturn(7)</code>. The test should obviously fail, but it doesn&#8217;t because the real <code>add()</code> executes instead of the mocked <code>add()</code> method.</p><p>But we can circumvent this issue by creating mocks like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">//Instead of\n$mockeryMock = \\Mockery::mock(new Calculator);\n// Create the mock like this\n$mockeryMock = \\Mockery::mock(\'Calculator[add]\');</pre><p>While syntactically different, the concept is similar to PHPUnit&#8217;s approach: you have to list the mocked methods in two places. But for any other test, you can just simply pass the real object, which is much easier&#8211;especially when dealing with constructor parameters.</p><hr\n/><h2>Dealing with Constructor Parameters</h2><p>Let&#8217;s add a constructor with two parameters to the <code>Calculator</code> class. The revised code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class Calculator {\n	public $myNumbers = array();\n	function __construct($firstNo, $secondNo) {\n		$this-&gt;myNumbers[]=$firstNo;\n		$this-&gt;myNumbers[]=$secondNo;\n	}\n	// [...] //\n}</pre><p>Every test in this article will fail after adding this constructor. More precisely, the <code>testPartialMock()</code> test results in the following error:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">Missing argument 1 for Calculator::__construct(),\ncalled in /usr/share/php/PHPUnit/Framework/MockObject/Generator.php\non line 224 and defined</pre><p>PHPUnit tries to mock the real object by automatically calling the constructor, expecting to have the parameters correctly set. There are two ways around this problem: either set the parameters, or don&#8217;t call the constructor.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">//Specify Constructor Parameters\n$phpMock = $this-&gt;getMock(\'Calculator\', array(\'add\'), array(1,2));\n//Do not call original constructor\n$phpMock = $this-&gt;getMock(\'Calculator\', array(\'add\'), array(), \'\', false);</pre><p>Mockery <em>automagically</em> works around this problem. It&#8217;s okay not to specify a constructor parameter; Mockery will simply not call the constructor. But you can specify a list of constructor parameters for Mockery to use. For example:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testMockeryConstructorParameters() {\n	$result = 6;\n	// Mockery\n	// Do not call constructor\n	$noConstrucCall = \\Mockery::mock(\'Calculator[add]\');\n	$noConstrucCall-&gt;shouldReceive(\'add\')-&gt;andReturn($result);\n	// Use constructor parameters\n	$withConstructParams = \\Mockery::mock(\'Calculator[add]\', array(1,2));\n	$withConstructParams-&gt;shouldReceive(\'add\')-&gt;andReturn($result);\n	// User real object with real values and mock over it\n	$realCalculator = new Calculator(1,2);\n	$mockRealObj = \\Mockery::mock($realCalculator);\n	$mockRealObj-&gt;shouldReceive(\'add\')-&gt;andReturn($result);\n}</pre><hr\n/><h2>Technical Considerations</h2><p>Mockery is another library that integrates your tests, and you may want to consider what technical implications this may have.</p><ul><li>Mockery uses a lot of memory. You will have to increase the maximum memory to 512MB if you want to run many tests(say over 1000 tests with more than 3000 assertions). See <code>php.ini</code> documentation for further details.</li><li>You have to organize your tests to run in separate processes, when mocking static methods and static method calls.</li><li>You can auto-load Mockery into every test by using PHPUnit&#8217;s bootstrap functionality (helpful when you have many tests and you don&#8217;t want to repeat yourself).</li><li>You can automate the call to <code>\\Mockery::close()</code> in each test&#8217;s <code>tearDown()</code> by editing <code>phpunit.xml</code>.</li></ul><hr\n/><h2>Final Conclusions</h2><p>PHPUnit certainly has its issues, especially when it comes to functionality and expressiveness. Mockery can greatly improve your mocking experience by making your tests easy to write and understand &#8211; but it&#8217;s not perfect (there&#8217;s no such thing!).</p><p>This tutorial has highlighted many key aspects of Mockery, but, honestly, we&#8217;ve barely scratched the surface. Be sure to explore the <a\nhref=\"https://github.com/padraic/Mockery\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">project&#8217;s Github repository</a> to learn more.</p><p>Thanks for reading!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(9,3,1,1358016495,NULL,' What to Expect From Laravel 4 ',' If you’re keeping up on the latest news in the PHP community, then you likely know that Laravel 4 is on the near horizon. Its creator, Taylor Otwell, recently recorded a handful of screencasts to demonstrate what we can expect, including resourceful controllers, improvements to Eloquent, Composer support, and much more! Take a look after the jump!(Continue)',' If you’re keeping up on the latest news in the PHP community, then you likely know that Laravel 4 is on the near horizon. Its creator, Taylor Otwell, recently recorded a handful of screencasts to demonstrate what we can expect, including resourceful controllers, improvements to Eloquent, Composer support, and much more! Take a look after the jump!(Continue)',1,1,'what-to-expect-from-laravel-4',393,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/main_image.png',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-28021\'), post_id: 28021, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p> If you&#8217;re keeping up on the latest news in the PHP community, then you likely know that <a\nhref=\"http://laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\">Laravel 4</a> is on the near horizon. Its creator, Taylor Otwell, recently recorded a handful of screencasts to demonstrate what we can expect, including resourceful controllers, improvements to Eloquent, Composer support, and much more! Take a look after the jump!</p><p><span\nid=\"more-28021\"></span></p><hr\n/><h2>Basic Routing and Composers</h2><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"600\" height=\"450\" src=\"http://www.youtube.com/embed/tX8DC9q6rv0\" frameborder=\"0\" allowfullscreen></iframe></p><div><a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2153_laravel4/1-basic-routing-and-composers.mp4\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">Download Video</a></div></div><hr\n/><h2>Controllers and Filters</h2><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"601\" height=\"338\" src=\"http://www.youtube.com/embed/AjQ5e9TOZVk\" frameborder=\"0\" allowfullscreen></iframe></p><div><a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2153_laravel4/2-controllers-and-filters.mp4\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">Download Video</a> and <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2153_laravel4/nettuts-laravel-resource-routes-chart.jpg\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">Resource Chart</a></div></div><hr\n/><h2>IOC Container Basics</h2><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"601\" height=\"338\" src=\"http://www.youtube.com/embed/WeB1knLoLYk\" frameborder=\"0\" allowfullscreen></iframe></p><div><a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2153_laravel4/3-ioc-container-basics.mp4\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">Download Video</a></div></div><hr\n/><h2>Controller Injection and Unit Testing</h2><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"601\" height=\"338\" src=\"http://www.youtube.com/embed/QSt9rBa_oUM\" frameborder=\"0\" allowfullscreen></iframe></p><div><a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2153_laravel4/4-ioc-controller-injection-and-unit-testing.mp4\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">Download Video</a></div></div><hr\n/><h2>Eloquent Collections and Polymorphic Relations</h2><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"600\" height=\"338\" src=\"http://www.youtube.com/embed/PzGC4ub6RDg\" frameborder=\"0\" allowfullscreen></iframe></p><div><a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2153_laravel4/5-eloquent-collections-and-polymorphic-relations.mp4\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">Download Video</a></div></div><hr\n/><h2>Closing Thoughts</h2><p>To stay up to date on the latest Laravel news, be sure to <a\nhref=\"http://twitter.com/laravelphp\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'twitter.com\']);\">follow them on Twitter</a>. Also, start getting your bags packed for the first Laravel Conference, coming early 2013!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(10,3,1,1358016495,NULL,' The Whens and Whys for PHP Design Patterns ','There are plenty of articles that explain what design patterns are, and how to implement them; the web doesn’t need yet another one of those articles! Instead, in this article, we will more discuss the when and why, rather than the which and how.I’ll present different situations and use-cases for patterns, and will also provide short definitions to help those of you who are not so familiar with these specific patterns. Let’s get started.','There are plenty of articles that explain what design patterns are, and how to implement them; the web doesn’t need yet another one of those articles! Instead, in this article, we will more discuss the when and why, rather than the which and how.I’ll present different situations and use-cases for patterns, and will also provide short definitions to help those of you who are not so familiar with these specific patterns. Let’s get started.',1,1,'the-whens-and-whys-for-php-design-patterns',319,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2147_phpdesign/preview.png',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-27862\'), post_id: 27862, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>There are plenty of articles that explain what design patterns are, and how to implement them; the web doesn&#8217;t need yet another one of those articles! Instead, in this article, we will more discuss the <i>when</i> and <i>why</i>, rather than the <i>which</i> and <i>how</i>.</p><p>I&#8217;ll present different situations and use-cases for patterns, and will also provide short definitions to help those of you who are not so familiar with these specific patterns. Let&#8217;s get started.</p><p><span\nid=\"more-27862\"></span></p><p>This article covers some of the various <i>Agile Design Patterns</i>, documented in Robert C. Martin&#8217;s books. These patterns are modern adaptations of the original design patterns defined and documented by <i><a\nhref=\"http://en.wikipedia.org/wiki/Design_Patterns\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'en.wikipedia.org\']);\" title=\"GoF: Design Patterns\" target=\"_blank\">The Gang of Four</a></i> in 1994. Martin&#8217;s patterns present a much more recent take on the GoF&#8217;s patterns, and they work better with modern programming techniques and problems. In fact, about 15% of the original patterns were replaced with newer patterns, and the remaining patterns were slightly modernized.</p><hr\n/><h2>Let&#8217;s Start by Creating Some Objects</h2><h3>Use a Factory Pattern</h3><p>The factory pattern was invented to help programmers organize the information related to object creation. Objects sometimes have lot of constructor parameters; other times, they must be populated with default information immediately after their creation. These objects should be created in factories, keeping all the information regarding their creation and initialization contained within a single place.</p><div\nclass=\"tip-shortcode\"><p><strong>When</strong> Use a Factory Pattern when you find yourself writing code to gather information necessary to create objects.</p><p><strong>Why:</strong> Factories help to contain the logic of object creation in a single place. They can also break dependencies to facilitate loose coupling and dependency injection to allow for better testing.</p></div><hr\n/><h2>Finding the Data We Need</h2><p>There are two frequently used patterns to retrieve information from a persistence layer or external data source.</p><h3>The Gateway Pattern</h3><p>This pattern defines a communication channel between a persistence solution and the business logic. For simpler applications, it can retrieve or recreate whole objects by itself, but object creation is the responsibility of factories in most complex applications. Gateways simply retrieve and persist raw data.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> When you need to retrieve or persist information.</p><p><strong>Why:</strong> It offers a simple public interface for complicated persistence operations. It also encapsulates persistence knowledge and decouples business logic from persistence logic.</p></div><p>In fact, the gateway pattern is just a particular implementation of another design pattern that we&#8217;ll discuss shortly: the adapter pattern.</p><h3>Go with the Proxy</h3><p>There are times when you can not (or do not want to) expose the knowledge of the persistence layer to your business classes. The proxy pattern is a good way to fool your business classes into thinking they are using already existing objects.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> You have to retrieve information from a persistence layer or external source, but don&#8217;t want your business logic to know this.</p><p><strong>Why:</strong> To offer a non-intrusive approach to creating objects behind the scenes. It also opens the possibility to retrieve these object on the fly, lazily, and from different sources.</p></div><p>A proxy effectively implements the same interface as a real object and mimics its functionality. The business logic simply uses it as if it were a real object, but in fact, the proxy creates the object if one doesn&#8217;t exist.</p><blockquote\nclass=\"pullquote\"><p>The active object pattern also played a part in early multi-tasking systems.</p></blockquote><p>Okay, okay. That great and all, but how can we find the objects that we need to create?</p><h3>Ask a Repository</h3><p>The repository pattern is very useful for implementing search methods and mini-query languages. It takes these queries and uses a gateway to obtain the data for a factory to produce the objects you need.</p><p>The repository pattern is different from the other patterns; it exists as part of Domain Driven Design (DDD), and is not included as part of Robert C. Martin&#8217;s book.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> You need to create multiple objects based on search criteria, or when you need to save multiple objects to the persistence layer.</p><p><strong>Why:</strong> To let clients that need specific objects to work with a common and well isolated query and persistence language. It removes even more creation-related code from the business logic.</p></div><p>But what if the repository cannot find the objects? One option would be to return a <code>NULL</code> value, but doing so has two side effects:</p><ul><li>It throws a <i>refused bequest</i> if you try to call a method on such an object.</li><li>It forces you to include numerous null checks (<code>if(is_null($param)) return;</code>) in your code.</li></ul><p>A better approach is to return a <code>null</code> object.</p><h3>The Null Object Pattern</h3><p>A null object implements the same interface of your other objects, but the object&#8217;s members return a neutral value. For example, a method that returns a string would return an empty string; another member returning a numeric value would return zero. This forces you to implement methods that do not return meaningful data, but you can use these objects without worrying about refused bequest or littering your code with null checks.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> You frequently check for <code>null</code> or you have refused bequests.</p><p><strong>Why:</strong> It can add clarity to your code and forces you to think more about the behavior of your objects.</p></div><p>It&#8217;s not unusual to call many methods on an object before it can do its job. There are situations when you must prepare an object after its creation before you can truly use it. This leads to code duplication when creating those objects in different places.</p><h3>You Need the Command Pattern</h3><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> When you have to perform many operations to prepare objects for use.</p><p><strong>Why:</strong> To move complexity from the consuming code to the creating code.</p></div><p>This sounds good, doesn&#8217;t it? In fact, it is quite useful in many situations. The command pattern is widely used for implementing transactions. If you add a simple <code>undo()</code> method to a command object, it can track all the undo transactions it performed and reverse them if necessary.</p><p>So now you have ten (or more) command objects, and you want them running concurrently. You can gather them into an active object.</p><h3>The Active Object</h3><p>The simple and interesting active object has only one responsibility: keep a list of command objects and run them.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> Several similar objects have to execute with a single command.</p><p><strong>Why:</strong> It forces clients to perform a single task and affect multiple objects.</p></div><p>An active object removes each command from its list after the command&#8217;s execution; meaning, you can execute the command only once. Some real world examples of an active object are:</p><blockquote\nclass=\"pullquote\"><p>Design patterns are here to solve problems.</p></blockquote><ul><li><strong>Shopping Cart</strong> &#8211; Executing a <code>buy()</code> command on each product removes them from the cart.</li><li><strong>Financial Transactions</strong> &#8211; Grouping transactions into a single list and executing them with a simple call to the list manager&#8217;s active object would remove the transactions from the queue.</li></ul><p>The active object pattern also played a part in early multi-tasking systems. Each object inside an active object would keep a reference to the active object. They would execute a portion of their jobs and then put themselves back into the queue. Even in today&#8217;s systems, you can use an active object to let other objects work while you wait for a response from another application.</p><hr\n/><h2>Reusability</h2><p>I am positive that you&#8217;ve heard the big promise of object oriented programming: code reuse. Early adopters of OOP envisioned using universal libraries and classes in millions of different projects. Well, it never happened.</p><h3>Make Some Template Methods Instead</h3><p>This pattern allows for the partial reuse of code. It&#8217;s practical with multiple algorithms which only slightly differ from one another.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> Eliminate duplication in a simple way.</p><p><strong>Why:</strong> There is duplication and flexibility is not a problem.</p></div><p>But flexibility is nice. What if I really need it?</p><h3>It&#8217;s Time For a Strategy</h3><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> Flexibility and reusability is more important than simplicity.</p><p><strong>Why:</strong> Use it to implement big, interchangeable chunks of complicated logic, while keeping a common algorithm signature.</p></div><p>For example, you can create a generic <code>Calculator</code> and then use different <code>ComputationStrategy</code> objects to perform the calculations. This is a moderately used pattern, and it is most powerful when you have to define many conditional behaviors.</p><hr\n/><h2>Discover-ability</h2><p>As projects grow, it becomes increasingly difficult for external users to access our application. That&#8217;s one reason to offer a well-defined entry point to the application or module in question. Other such reasons may include the desire to conceal the module&#8217;s internal workings and structure.</p><h3>Present a Facade</h3><p>A facade is essentially an API &#8211; a nice and client-facing interface. When a client calls one of these nice methods, the facade delegates a series of calls to the classes it hides in order to provide the client with the required information or desired result.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> To simplify your API or intentionally conceal inner business logic.</p><p><strong>Why:</strong> You can control the API and the real implementations and logic independently.</p></div><p>Control is good, and many times you need to perform a task when something changes. Users have to be notified, red LEDs have to blink, an alarm has to sound&#8230; you get the idea.</p><blockquote><p> The popular <a\nhref=\"http://laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\">Laravel</a> framework makes excellent use of the Facade Pattern.</p></blockquote><h3>Subscribe to an Observer</h3><blockquote\nclass=\"pullquote\"><p>A null object implements the same interface as your other objects.</p></blockquote><p>The observer pattern offers an easy way to monitor objects and take actions when conditions change. There are two types of observer implementations:</p><ul><li><strong>Polling</strong> &#8211; Objects accept subscribers. Subscribers observe the object and are notified on specific events. Subscribers <i>ask</i> the observed objects for more information in order to take an action.</li><li><strong>Push</strong> &#8211; Like the polling method, objects accept subscribers, and subscribers are notified when an event occurs. But when a notification happens, <i>the observer also receives a hint</i> that the observer can act on.</li></ul><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> To provide a notification system inside your business logic or to the outside world.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p><strong>Why:</strong> The pattern offers a way to communicate events to any number of different objects.</p></div><p>Use cases for this pattern are email notifications, logging daemons, or messaging systems. Of course, in real life, there are countless other ways to use it.</p><h3>Coordinate The Effects</h3><p>The observer pattern can be extended with a mediator pattern. This pattern takes two objects as parameters. The mediator subscribes itself to the first parameter, and when a change happens to the observed object, the mediator decides what to do on the second object.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> The affected objects can not know about the observed objects.</p><p><strong>Why:</strong> To offer a hidden mechanism of affecting other objects in the system when one object changes.</p></div><hr\n/><h2>Singularity</h2><p>Sometimes, you need special objects that are unique in your application, and you want to ensure that all consumers can see any change made to these objects. You also want to prevent creating multiple instances of such objects for certain reasons, like long initialization time or problems with concurrent actions to some third party libraries.</p><h3>Use a Singleton</h3><p>A singleton is an object having a private constructor and a public <code>getInstance()</code> method. This method ensures that only one instance of the object exists.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> You need to achieve singularity and want a cross platform, lazily evaluated solution which also offers the possibility of creation through derivation.</p><p><strong>Why:</strong> To offer a single point of access when needed.</p></div><h3>Or Write a Monostate Object</h3><p>Another approach to singularity is the monostate design pattern. This solution uses a trick offered by object oriented programming languages. It has dynamic public methods which get or set the values of static private variables. This, in turn, ensures that all instances of such classes share the same values.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> Transparency, derivabitility, and polymorphism are preferred together with singularity.</p><p><strong>Why:</strong> To hide from the users/clients the fact that the object offers singularity.</p></div><p>Pay special attention to singularity. It pollutes the global namespace and, in most cases, can be replaced with something better suited for that particular situation.</p><hr\n/><h2>Controlling Different Objects</h2><blockquote\nclass=\"pullquote\"><p>The repository pattern is quite useful for implementing search methods&#8230;</p></blockquote><p>So you have a switch and a light. The switch can turn the light on and off, but, now, you&#8217;ve purchased a fan and want to use your old switch with it. That&#8217;s easy to accomplish in the physical world; take the switch, connect the wires, and viola.</p><p>Unfortunately, it&#8217;s not so easy in the programming world. You have a <code>Switch</code> class and a <code>Light</code> class. If your <code>Switch</code> uses the <code>Light</code>, how could it use the <code>Fan</code>?</p><p>Easy! Copy and paste the <code>Switch</code>, and change it to use the <code>Fan</code>. But that&#8217;s code duplication; it&#8217;s the equivalent of buying another switch for the fan. You could extend <code>Switch</code> to <code>FanSwitch</code>, and use that object instead. But what if you want to use a <code>Button</code> or <code>RemoteControl</code>, instead of a <code>Switch</code>?</p><h3>The Abstract Server Pattern</h3><p>This is the simplest pattern ever invented. It only uses an interface. That&#8217;s it, but there are several different implementations.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> You need to connect objects and maintain flexibility.</p><p><strong>Why:</strong> Because it is the simplest way to achieve flexibility, while respecting both the dependency inversion principle and the open close principle.</p></div><p>PHP is dynamically typed. This means that you can omit interfaces and use different objects in the same context &#8211; risking a refused bequest. However, PHP also allows for the definition of interfaces, and I recommend you use this great functionality to provide clarity to the intent of your source code.</p><p>But you already have a bunch of classes you want to talk to? Yes, of course. There are many libraries, third-party APIs, and other modules that one has to talk to, but this does not mean that our business logic has to know the details of such things.</p><h3>Plug in an Adapter</h3><p>The adapter pattern simply creates a correspondence between the business logic and something else. We have already seen such a pattern in action: the gateway pattern.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> You need to create a connection with a pre-existing and potentially changing module, library, or API.</p><p><strong>Why:</strong> To allow your business logic to rely only on the public methods the adapter offers, and permit changing the other side of the adapter easily.</p></div><p>If either of the above patterns don&#8217;t fit with your situation, then you could use&#8230;</p><h3>The Bridge Pattern</h3><p>This is a very complicated pattern. I personally do not like it because it is usually easier to take a different approach. But for those special cases, when other solutions fail, you can consider the bridge pattern.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> The adapter pattern is not enough, and you change classes on both sides of the pipe.</p><p><strong>Why:</strong> To offer increased flexibility at the cost of significant complexity.</p></div><hr\n/><h2>The Composite Pattern</h2><p>Consider that you have a script with similar commands, and you want make a single call to run them. Wait! Didn&#8217;t we already see something like this earlier? The active object pattern?</p><p>Yes, yes we did. But this one is a bit different. It&#8217;s the composite pattern, and like the active object pattern, it keeps a list of objects. But calling a method on a composite object calls the same method on all of its objects without removing them from the list. The clients calling a method are thinking they are talking to a single object of that particular type, but in fact, their actions are applied to many, many objects of the same type.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> You have to apply an action to several similar objects.</p><p><strong>Why:</strong> To reduce duplication and simplify how similar objects are called.</p></div><p>Here&#8217;s an example: you have an application that is capable of creating and placing <code>Orders</code>. Assume you have three orders: <code>$order1</code>, <code>$order2</code> and <code>$order3</code>. You could call <code>place()</code> on each of them, or you could contain those orders in a <code>$compositeOrder</code> object, and call its <code>place()</code> method. This, in turn, calls the <code>place()</code> method on all the contained <code>Order</code> objects.</p><hr\n/><h2>The State Pattern</h2><blockquote\nclass=\"pullquote\"><p>Gateways only retrieve and persist raw data.</p></blockquote><p>A finite state machine (FSM) is a model that has a finite number of discreet states. Implementing a FSM can be difficult, and the easiest way to do so involves the trusty <code>switch</code> statement. Each <code>case</code> statement represents a current state in the machine, and it knows how to activate the next state.</p><p>But we all know that <code>switch...case</code> statements are less desirable because they produce an unwanted high fan-out on our objects. So forget the <code>switch...case</code> statement, and instead consider the state pattern. The state pattern is composed of several objects: an object to coordinate things, an interface representing an abstract state, and then several implementations &#8211; one for each state. Each state knows which state comes after it, and the state can notify the coordinating object to set its new state to the next in line.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> FSM-like logic is required to be implemented.</p><p><strong>Why:</strong> To eliminate the problems of a <code>switch...case</code> statement, and to better encapsulate the meaning of each individual state.</p></div><p>A food dispenser could have a <code>main</code> class that has a reference to a <code>state</code> class. Possible state classes might be something like: <code>WaitingForCoin</code>, <code>InsertedCoin</code>, <code>SelectedProduct</code>, <code>WaitingForConfirmation</code>, <code>DeliveringProduct</code>, <code>ReturningChange</code>. Each state performs its job and creates the next state object to send to the coordinator class.</p><hr\n/><h2>Decorate with the Decorator Pattern</h2><p>There are times when you deploy classes or modules throughout an application, and you can&#8217;t modify them without radically affecting the system. But, at the same time, you need to add new functionality that your users require.</p><p>The decorator pattern can aid in these situations. It is very simple: take existing functionality and add to it. This is accomplished by extending the original class and providing new functionality at run-time. Old clients continue to use the new object as they would an old one, and new clients will use both the old and new functionality.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> You can&#8217;t change old classes, but you have to implement new behavior or state.</p><p><strong>Why:</strong> It offers an unintrusive way of adding new functionality.</p></div><p>A simple example is printing data. You print some information to the user as plain text, but you also want to provide the ability to print in HTML. The decorator pattern is one such solution that lets you keep both functionality.</p><h3>Or, Accept a Visitor</h3><p>If your problem of extending functionality is different &#8211; say, you have a complex tree-like structure of objects, and you want to add functionality to many nodes at once &#8211; a simple iteration is not possible, but a visitor might be a viable solution. The downside, however, is that a visitor pattern implementation requires modification to the old class if it wasn&#8217;t designed to accept a visitor.</p><div\nclass=\"tip-shortcode\"><p><strong>When:</strong> A decorator is not appropriate and some extra complexity is acceptable.</p><p><strong>Why:</strong> To allow and organized approach to defining functionality for several objects but at the price of higher complexity.</p></div><hr\n/><h2>Conclusion</h2><blockquote\nclass=\"pullquote\"><p>Use design patterns to solve your problems, but only if they fit.</p></blockquote><p>Design patterns help solve problems. As an implementation recommendation, never name your classes after the patterns. Instead, find the right names for the right abstractions. This helps you to better discern when you really need a pattern as opposed to just implementing one because you can.</p><p>Some may say that if you don&#8217;t name your class with the pattern&#8217;s name in it, then other developers will have a difficult time understanding your code. If it&#8217;s hard to recognize a pattern, then the problem is in the pattern&#8217;s implementation.</p><p>Use design patterns to solve your problems, but only if they fit. Do not abuse them. You&#8217;ll find that a more simple solution befits a little problem; whereas, you&#8217;ll discover that you need a pattern only after you implement a few other solutions.</p><p>If you&#8217;re new to design patterns, I hope that this article has given you some idea as to how patterns can be helpful in your applications. Thanks for reading!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(11,4,1,1358016705,NULL,' Build a Twitter Clone From Scratch: The Design ','This article represents the first in a new group effort by the Nettuts+ staff, which covers the process of designing and building a web app from scratch – in multiple languages! We’ll use a fictional Twitter-clone, called Ribbit, as the basis for this series.In this tutorial, we need to focus on the UI. We’ll leverage the popular LESS Preprocessor to make our CSS as manageable as possible.','This article represents the first in a new group effort by the Nettuts+ staff, which covers the process of designing and building a web app from scratch – in multiple languages! We’ll use a fictional Twitter-clone, called Ribbit, as the basis for this series.In this tutorial, we need to focus on the UI. We’ll leverage the popular LESS Preprocessor to make our CSS as manageable as possible.',1,0,'build-a-twitter-clone-from-scratch-the-design',331,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2170_ribbit/preview.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2170_ribbit/layout.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-28438\'), post_id: 28438, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>This article represents the first in a new group effort by the Nettuts+ staff, which covers the process of designing and building a web app from scratch &#8211; in multiple languages! We&#8217;ll use a fictional Twitter-clone, called Ribbit, as the basis for this series.</p><p>In this tutorial, we need to focus on the UI. We&#8217;ll leverage the popular <a\nhref=\"http://lesscss.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'lesscss.org\']);\" title=\"LESS Preprocessor\" target=\"_blank\">LESS Preprocessor</a> to make our CSS as manageable as possible.</p><p><span\nid=\"more-28438\"></span></p><hr\n/><h2>Introduction</h2><p>Be sure to <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2170_ribbit/layout.zip\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">download the assets</a> for this tutorial, if working along.</p><p>This tutorial is divided into five major parts, which explain how to style various pages of Ribbit&#8217;s layout. I will reference HTML elements using CSS selectors to make it easier to understand. But before diving into the layout, let&#8217;s briefly discuss nesting.</p><h3>Nesting</h3><p>In CSS, referencing a nested element can result in lengthy selectors. For example:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nsomeId {\n	/* ... */\n}\nsomeId div.someClass {\n	/* ... */\n}\nsomeId div.someClass p.someOtherClass {\n	/* ... */\n}\nsomeId div.someClass p.someOtherClass target {\n	/* ... */\n}\n</pre><p>And it can grow even bigger! With LESS, you can nest one element in another, making it easier to read:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nsomeId {\n	/* ... */\n    div.someClass {\n        /* ... */\n        p.someOtherClass {\n            /* ... */\n            target {\n                /* ... */\n            }\n        }\n    }\n}\n</pre><hr\n/><h2>Variables and Mixins</h2><p>Create a new file and name it, <code>style.less</code>. When using any style preprocessor, it&#8217;s a good idea to store important colors and sizes within variables; you can easily adjust their values without searching the file, looking for property values that you need to change. We will use a handful of variables for the text color, border color, and content width:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n@text-color: #3F3E3D;\n@border-color: #D2D2D2;\n@content-width: 860px;\n</pre><p>Now, let&#8217;s create two mixins. The first will create the illusion of anti-aliased text, and the second will allow for cross-browser gradients. The former is rather simple:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.antialiased (@color) {\n    color: @color;\n    text-shadow: @color 0 0 1px;\n}\n</pre><p>The trick is to create a shadow underneath the text with the same color and a one-pixel spread, making the browser display a nice shade around the text.</p><p>Now for the gradient; this is more complicated than the anti-aliased text because every browser implements gradients differently. Once we&#8217;ve compensated for the various vendor prefixes, here is the code:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.gradient4f (@p1, @c1, @p2, @c2, @p3, @c3, @p4, @c4) {\n    background: @c1;\n    background: -moz-linear-gradient(top,  @c1 @p1,  @c2 @p2,  @c3 @p3,  @c4 @p4);\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(@p1, @c1), color-stop(@p2, @c2), color-stop(@p3, @c3), color-stop(@p4, @c4));\n    background: -webkit-linear-gradient(top, @c1 @p1, @c2 @p2, @c3 @p3, @c4 @p4);\n    background: -o-linear-gradient(top, @c1 @p1, @c2 @p2, @c3 @p3, @c4 @p4);\n    background: -ms-linear-gradient(top, @c1 @p1, @c2 @p2, @c3 @p3, @c4 @p4);\n    background: linear-gradient(to bottom, @c1 @p1, @c2 @p2, @c3 @p3, @c4 @p4);\n}\n</pre><p>Every browser has a prefix: <code>-moz-</code> for Firefox, <code>-webkit-</code> for Chrome, etc. The last line uses the W3C recommended version for gradients. If a browser supports it, it will override the previous properties because it&#8217;s the last <code>background</code> property declaration in the rule. The <code>linear-gradient</code> function accepts eight parameters: four pairs of percent-color values. It creates the gradient with four color steps.</p><hr\n/><h2>Global Styles</h2><p>Let&#8217;s next style some global elements, such as for buttons and links. We want all elements to use the <code>Helvetica</code> or <code>Arial</code> fonts with the text color defined earlier:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n* {\n    font-family: sans-serif;\n    color: @text-color;\n}\n</pre><h3>Body</h3><p>The body is pretty easy; we need a white background with an image-based pattern. There are no margins and padding:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nbody {\n    background: white url(gfx/bg.png);\n    margin: 0;\n    padding: 0;\n}\n</pre><h3>Inputs</h3><p>We&#8217;ll also provide a default style for all <code>&lt;input/&gt;</code> elements in the page:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ninput {\n    width: 236px;\n    height: 38px;\n    border: 1px solid @border-color;\n    padding: 0 10px;\n    outline: none;\n    font-size: 17px;\n    &amp;:focus {\n        background: #FFFDF2;\n    }\n}\n</pre><p>We set the default size and padding, and we use the <code>@border-color</code> variable to remove the annoying blue outline when the element is focused. You should notice another bit of LESS sugar: we can add CSS pseudo-classes (and normal classes too) using the <code>&amp;</code> character (parent reference), as shown here:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n&amp;:focus {\n    background: #FFFDF2;\n}\n</pre><p>This causes the input to have a light yellow background, when focused.</p><h3>Submits</h3><p>Submit buttons will use both the previously defined mixin and the <code>border-radius</code> to create nice effect:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ninput[type=&quot;submit&quot;] {\n    height: 36px;\n    border: 1px solid #7BC574;\n    border-radius: 2px;\n    color: white;\n    font-size: 12px;\n    font-weight: bold;\n    padding: 0 20px;\n    cursor: pointer;\n    .gradient4f(0%, #8CD585, 23%, #82CD7A, 86%, #55AD4C, 100%, #4FA945);\n}\n</pre><h3>Links</h3><p>The links should have a different color than normal text. We&#8217;ll also underline them on hover:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\na {\n    text-decoration: none;\n    .antialiased(#58B84E);\n    &amp;:hover {\n        text-decoration: underline;\n    }\n}\n</pre><hr\n/><h2>Basic Template</h2><p>We will begin with the portion of the layout that remains the same in every page. Here is the HTML code, which I will explain below:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;link rel=&quot;stylesheet/less&quot; href=&quot;style.less&quot;&gt;\n    &lt;script src=&quot;less.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;header&gt;\n        &lt;div class=&quot;wrapper&quot;&gt;\n            &lt;img src=&quot;gfx/logo.png&quot;&gt;\n            &lt;span&gt;Twitter Clone&lt;/span&gt;&lt;/p&gt;\n		&lt;/div&gt;\n	&lt;/header&gt;\n	&lt;div id=&quot;content&quot;&gt;\n		&lt;div class=&quot;wrapper&quot;&gt;\n		&lt;/div&gt;\n	&lt;/div&gt;\n	&lt;footer&gt;\n		&lt;div class=&quot;wrapper&quot;&gt;\n			Ribbit - A Twitter Clone Tutorial&lt;img src=&quot;gfx/logo-nettuts.png&quot;&gt;\n		&lt;/div&gt;\n	&lt;/footer&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre><p>We start with a normal <code>doctype</code> definition and document <code>head</code>. You can use the <code>less.js</code> library and include the <code>style.less</code> in the development stage (as I did in this code). Later, you can compile the LESS file into CSS, if you don&#8217;t wish to use <code>less.js</code>. As you&#8217;ve probably noticed by now, the layout is divided into three parts: <code>header</code>, <code>#content</code>, and <code>footer</code>. You should save this HTML to see if you are styling everything correctly.</p><h3>Header</h3><p>Let&#8217;s tackle the <code>header</code>. It contains Ribbit&#8217;s logo and the two words: &#8216;Twitter Clone&#8217;. It&#8217;s wrapped in a wrapper, the width of which is controlled by the <code>@content-width</code> variable. There are several wrappers in the layout, and all are <code>@content-width</code> wide with <code>auto</code> margin:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.wrapper {\n    width: @content-width;\n    margin: auto;\n}\n</pre><p>The header itself is <code>85px</code> tall and page wide:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nheader {\n	background: url(gfx/bg-header.png);\n	height: 85px;\n	width: 100%;\n}\n</pre><p>After the width, add <code>div.wrapper</code>&#8216;s style with vertical padding:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ndiv.wrapper {\n    padding: 11px 0;\n}\n</pre><p>So the header should look like:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nheader {\n    background: url(gfx/bg-header.png);\n    height: 85px;\n    width: 100%;\n    div.wrapper {\n        padding: 11px 0;\n    }\n</pre><p>Images in the wrapper need to be <code>10px</code> lower, in order to be nicely centered:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nimg {\n    position: relative;\n    top: 10px;\n    margin: 0 15px 0 0;\n}\n</pre><p>Also, the font in <code>&lt;span/&gt;</code> elements must be larger than the default size:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nspan {\n    font-size: 18px;\n    margin: 0 42px 0 0;\n}\n</pre><p>Here&#8217;s how our design should look at this point.</p><p><div\nclass=\'tutorial_image\'><img\nsrc=\'http://d2o0t5hpnwv4c1.cloudfront.net/2170_ribbit/images/header1.jpg\' alt=\'Header in basic template.\' title=\'\' border=\'0\'></div><h3>Content</h3><p>There&#8217;s not much we can do with <code>#content</code> at this time. We&#8217;ll add some margin to the bottom and a minimum height; the layout will look funky if it&#8217;s not tall enough:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n#content {\n	margin-bottom: 15px;\n	min-height: 560px;\n}\n</pre><p>Inside, the wrapper needs to have some vertical margin with an automatic horizontal margin:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ndiv.wrapper {\n    margin: 38px auto;\n}\n</pre><h3>Footer</h3><p>Like the header, the footer is the same for all pages. We&#8217;ll use a background image and a smaller font size. We&#8217;ll also need to <code>clear: both</code>, because we&#8217;ll use floats in the content. Without <code>clear</code>ing, the footer will not adjust in accordance with the content:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nfooter {\n	background: url(gfx/bg-footer.png);\n	height: 251px;\n	font-size: 14px;\n	clear: both;\n}\n</pre><p>Let&#8217;s now add some padding to the wrapper, and images within it should float to the right:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ndiv.wrapper {\n    padding: 15px;\n    img {\n        float: right;\n    }\n}\n</pre><p>Here&#8217;s our footer:</p><p><div\nclass=\'tutorial_image\'><img\nsrc=\'http://d2o0t5hpnwv4c1.cloudfront.net/2170_ribbit/images/footer.jpg\' alt=\'Completed footer.\' title=\'\' border=\'0\'></div><hr\n/><h2>The Home Page</h2><p>This page displays for users not logged in to Ribbit. Therefore, it will need to present the login form in the header and a register form, with a big frog image in the content. Let&#8217;s start with a basic template.</p><h3>Login Boxes</h3><p>Add this login form to the <code>div.wrapper</code> of the <code>header</code>, after the <code>&lt;span/&gt;</code> element:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;form&gt;\n    &lt;input type=&quot;text&quot;&gt;\n    &lt;input type=&quot;password&quot;&gt;\n&lt;/form&gt;\n</pre><p>These inputs are already styled, but we do need to add the margins and make the form <code>display</code> as <code>inline</code>. Append this after <code>span</code> in <code>div.wrapper</code> of <code>header</code>:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nform {\n    display: inline;\n    input {\n        margin: 0 0 0 14px;\n    }\n}\n</pre><h3>Register Form</h3><p>Here is the HTML for the registration form:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;img src=&quot;gfx/frog.jpg&quot;&gt;\n&lt;div class=&quot;panel right&quot;&gt;\n    &lt;h1&gt;New to Ribbit?&lt;/h1&gt;\n    &lt;form&gt;\n        &lt;input name=&quot;email&quot; type=&quot;text&quot;&gt;\n        &lt;input name=&quot;password&quot; type=&quot;text&quot;&gt;\n        &lt;input name=&quot;password2&quot; type=&quot;password&quot;&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;Create Account&quot;&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</pre><p>Add this HTML within <code>div.wrapper</code> of <code>#content</code>. We want the image to have rounded corners and to be floated to the left (add this after margin in <code>div.wrapper</code> of <code>#content</code>):</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nimg {\n    border-radius: 6px;\n    float: left;\n}\n</pre><p>Now, we can style the registration form. It will also be a panel that we&#8217;ll use later; that&#8217;s why we will style the <code>.panel</code>:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ndiv.panel {\n    border: 1px solid @border-color;\n    background: white;\n    margin: 0;\n    margin-bottom: 29px;\n    border-radius: 6px;\n    font-size: 14px;\n}\n</pre><p>For now, though, we will only style the <code>right</code> panel. It&#8217;s narrower and sticks to the right side of the panel. Naturally, insert the following into <code>div.panel</code>:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n&amp;.right {\n    width: 303px;\n    height: 313px;\n    float: right;\n}\n</pre><p>Also, we need to take care of the header and content of the panel. We use <code>&lt;h1/&gt;</code> elements for the header and <code>&lt;p/&gt;</code> elements for content. Notice that you can use the <code>*</code> wildcard inside of another element:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n* {\n    margin: 6px 0;\n}\nform {\n    padding: 0 23px;\n}\nh1 {\n    border-bottom: 1px solid @border-color;\n    margin: 5px 0;\n    font-weight: normal;\n    font-size: 18px;\n    padding: 13px 23px;\n    height: 23px;\n}\np {\n    padding: 0 24px;\n    margin: 18px 0;\n}\n</pre><p>Here is how <code>div.panel</code>&#8216;s style should look:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ndiv.panel {\n    border: 1px solid @border-color;\n    background: white;\n    margin: 0;\n    margin-bottom: 29px;\n    border-radius: 6px;\n    font-size: 14px;\n    &amp;.right {\n        width: 303px;\n        height: 313px;\n        float: right;\n    }\n    * {\n		margin: 6px 0;\n	}\n	h1 {\n		border-bottom: 1px solid @border-color;\n		margin: 5px 0;\n		font-weight: normal;\n		font-size: 18px;\n		padding: 13px 23px;\n		height: 23px;\n	}\n	p {\n		padding: 0 24px;\n		margin: 18px 0;\n	}\n}\n</pre><p>And here is a screenshot of how this page should look, thus far (click to see full size):</p><p><a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2170_ribbit/images/home.jpg\"><div\nclass=\'tutorial_image\'><img\nsrc=\'http://d2o0t5hpnwv4c1.cloudfront.net/2170_ribbit/images/home_small.jpg\' alt=\'Home page preview\' title=\'\' border=\'0\'></div><p></a></p><hr\n/><h2>Buddies Page</h2><p>The Buddies page should be displayed when a user logs in. It will display a list of the last &#8220;Ribbits,&#8221; along with some statistics of your account. Once again, start with the basic template. This page, along with other pages, will display a logout button in place of the login form in the <code>header</code>:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;form&gt;\n    &lt;input type=&quot;submit&quot; id=&quot;btnLogOut&quot; value=&quot;Log Out&quot;&gt;\n&lt;/form&gt;\n</pre><p>The buttons have already been styled, so we only need to pin it to the right side of container and add some margins:</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n#btnLogOut {\n	float: right;\n	margin: 14px 0 0 0;\n}\n</pre><p>Because this rule&#8217;s selector is an element&#8217;s ID, you can place it either outside of any element or within the header&#8217;s <code>div.wrapper</code>. It&#8217;s your choice, but remember that, if you choose to place it inside of another element, the compiled CSS will have a longer selector (<code>header div.wrapper #btnLogOut</code>).</p><h3>&#8220;Create a Ribbit&#8221; Box</h3><p>First, add this panel&#8217;s code to <code>div.wrapper</code> of <code>#content</code>:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div id=&quot;createRibbit&quot; class=&quot;panel right&quot;&gt;\n    &lt;h1&gt;Create a Ribbit&lt;/h1&gt;\n    &lt;p&gt;\n        &lt;form&gt;\n            &lt;textarea name=&quot;text&quot; class=&quot;ribbitText&quot;&gt;&lt;/textarea&gt;\n            &lt;input type=&quot;submit&quot; value=&quot;Ribbit!&quot;&gt;\n        &lt;/form&gt;\n    &lt;/p&gt;\n&lt;/div&gt;\n</pre><p>The <code>.right</code> class was styled earlier, but we need to add some styling for the <code>&lt;textarea/&gt;</code> element. We&#8217;ll give it a proper size and border:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ntextarea.ribbitText {\n    width: 249px;\n    height: 160px;\n    border: 1px solid @border-color;\n}\n</pre><p>Add this in the style definition of the right panel.</p><h3>User Information</h3><p>Now, let&#8217;s focus on the panel, which contains the user&#8217;s account information. We&#8217;ll temporarily populate it with some random content to see the styling:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div id=&quot;ribbits&quot; class=&quot;panel left&quot;&gt;\n    &lt;h1&gt;Your Ribbit Profile&lt;/h1&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user1.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Frogger&lt;/span&gt; @username\n        &lt;p&gt;\n            567 Ribbits&lt;span class=&quot;spacing&quot;&gt;45 Followers&lt;/span&gt;&lt;span class=&quot;spacing&quot;&gt;32 Following&lt;/span&gt;&lt;br&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</pre><p>It may look complex, but the structure is fairly simple, when you strip out the content:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div id=&quot;ribbits&quot; class=&quot;panel left&quot;&gt;\n  &lt;h1&gt;Your Ribbit Profile&lt;/h1&gt;\n  &lt;div class=&quot;ribbitWrapper&quot;&gt;\n    &lt;img class=&quot;avatar&quot; src=&quot;gfx/user1.png&quot;&gt;\n    &lt;span class=&quot;name&quot;&gt; &lt;/span&gt;\n    &lt;p&gt;\n       &lt;span class=&quot;spacing&quot;&gt; &lt;/span&gt;&lt;span class=&quot;spacing&quot;&gt; &lt;/span&gt;&lt;br&gt;\n    &lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre><p>Regardless, we have another panel; so we need to style it first:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n&amp;.left {\n    width: @content-width - 327;\n    float: left;\n}\n</pre><p>You probably know where to place this code (notice how easily you can perform arithmetical operations in LESS). This panel contains <code>div.ribbitWrapper</code>. So, add the following code:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ndiv.ribbitWrapper {\n    padding: 15px 0;\n}\n</pre><p>There are two <code>&lt;span/&gt;</code> elements inside this element, each with a different color and font size. They have classes of <code>.name</code> and <code>.time</code>:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nspan {\n    &amp;.name {\n        font-size: 18px;\n        color: #58B84E;\n    }\n    &amp;.time {\n        font-size: 12px;\n        color: #CCC;\n    }\n}\n</pre><p>We should also position the avatar image near the left border. Add the following code:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nimg.avatar {\n    margin: 0 19px 0 20px;\n    float: left;\n}\n</pre><p>Also, Ribbit&#8217;s text needs to be anti-aliased, justified and moved to the right. This code will place the text next to the avatar, as opposed to beneath it:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\np {\n    margin: 5px 50px 0 90px;\n    padding: 0;\n    text-align: justify;\n    line-height: 1.5;\n    .antialiased(@text-color);\n}\n</pre><p>In this paragraph, there are <code>&lt;span/&gt;</code> elements with vertical lines, visually separating them. This effect is achieved by using border, padding, and margin:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nspan.spacing {\n    padding-left: 9px;\n    margin-left: 9px;\n    height: 10px;\n    border-left: 1px solid @border-color;\n}\n</pre><h3>Buddies&#8217; Ribbits</h3><p>This panel lists the latest ribbits from the people to whom the user follows. Insert the following after the user&#8217;s information panel:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div class=&quot;panel left&quot;&gt;\n    &lt;h1&gt;Your Ribbit Buddies&lt;/h1&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user2.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Kermit&lt;/span&gt; @username &lt;span class=&quot;time&quot;&gt;15m&lt;/span&gt;\n        &lt;p&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user1.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Frogger&lt;/span&gt; @username &lt;span class=&quot;time&quot;&gt;15m&lt;/span&gt;\n        &lt;p&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user2.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Kermit&lt;/span&gt; @username &lt;span class=&quot;time&quot;&gt;15m&lt;/span&gt;\n        &lt;p&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user3.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Hypnotoad&lt;/span&gt; @username &lt;span class=&quot;time&quot;&gt;15m&lt;/span&gt;\n        &lt;p&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user2.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Kermit&lt;/span&gt; @username &lt;span class=&quot;time&quot;&gt;15m&lt;/span&gt;\n        &lt;p&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user3.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Hypnotoad&lt;/span&gt; @username &lt;span class=&quot;time&quot;&gt;15m&lt;/span&gt;\n        &lt;p&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</pre><p>There are few example ribbits to see how it looks. We&#8217;ll add some borders to visually separate them. Add this code in <code>div.ribbitWrapper</code>:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nborder-bottom: 1px solid @border-color;\n&amp;:last-child {\n    border: none;\n}\n</pre><p>This styling adds the bottom border, while removing the border on the last <code>div.ribbitWrapper</code>; a border already exists on the panel.</p><p>Here is how this page should look now:</p><p><a\nhref=\"images/buddies.jpg\"><div\nclass=\'tutorial_image\'><img\nsrc=\'http://d2o0t5hpnwv4c1.cloudfront.net/2170_ribbit/images/buddies_small.jpg\' alt=\'Buddies page preview\' title=\'\' border=\'0\'></div><p></a></p><hr\n/><h2>Public Ribbits Page</h2><p>The &#8220;Public Ribbits&#8221; page will list the latest ribbits of profiles not marked as private, so that users can view the ribbits of those who they don&#8217;t have in their buddy list. Surprisingly, there is nothing else to style, but we do need to add a touch of HTML. The only difference between this and the previous page is that this one doesn&#8217;t have the user&#8217;s information panel, but it will have other content in the final site. So feel free to copy the code of the buddies page, but remove this panel:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div id=&quot;ribbits&quot; class=&quot;panel left&quot;&gt;\n    &lt;h1&gt;Your Ribbit Profile&lt;/h1&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user1.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Frogger&lt;/span&gt; @username\n        &lt;p&gt;\n            567 Ribbits&lt;span class=&quot;spacing&quot;&gt;45 Followers&lt;/span&gt;&lt;span class=&quot;spacing&quot;&gt;32 Following&lt;/span&gt;&lt;br&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</pre><p>Also change the header of the panel to &#8220;Public Ribbits.&#8221; Here is the preview of this page:</p><p><a\nhref=\"images/public.jpg\"><div\nclass=\'tutorial_image\'><img\nsrc=\'http://d2o0t5hpnwv4c1.cloudfront.net/2170_ribbit/images/public_small.jpg\' alt=\'Public ribbits page preview\' title=\'\' border=\'0\'></div><p></a></p><hr\n/><h2>Public Profiles Page</h2><p>On this page, users can see a list of profiles that are not marked as private. There is also a search box to find other profiles. We&#8217;ll start with the basic template.</p><h3>Profile Search</h3><p>The search box will use the <code>.right</code> panel with an <code>&lt;input/&gt;</code> element inside:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div class=&quot;panel right&quot;&gt;\n    &lt;h1&gt;Search for profiles&lt;/h1&gt;\n    &lt;p&gt;\n        &lt;form&gt;\n            &lt;input name=&quot;query&quot; type=&quot;text&quot;&gt;\n            &lt;input type=&quot;submit&quot; value=&quot;Ribbit!&quot;&gt;\n        &lt;/form&gt;\n    &lt;/p&gt;\n&lt;/div&gt;\n</pre><h3>Profiles List</h3><p>Here are a handful of example profiles for the profile list, so that you can see how it looks in the browser. In a future lesson, we&#8217;ll of course replace this, accordingly.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div id=&quot;ribbits&quot; class=&quot;panel left&quot;&gt;\n    &lt;h1&gt;Public Profiles&lt;/h1&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user2.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Kermit&lt;/span&gt; @username &lt;span class=&quot;time&quot;&gt;625 followers &lt;a href=&quot;#&quot;&gt;follow&lt;/a&gt;&lt;/span&gt;\n        &lt;p&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user1.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Frogger&lt;/span&gt; @username &lt;span class=&quot;time&quot;&gt;329 followers &lt;a href=&quot;#&quot;&gt;follow&lt;/a&gt;&lt;/span&gt;\n        &lt;p&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;ribbitWrapper&quot;&gt;\n        &lt;img class=&quot;avatar&quot; src=&quot;gfx/user3.png&quot;&gt;\n        &lt;span class=&quot;name&quot;&gt;Hypnotoad&lt;/span&gt; @username &lt;span class=&quot;time&quot;&gt;129 followers &lt;a href=&quot;#&quot;&gt;follow&lt;/a&gt;&lt;/span&gt;\n        &lt;p&gt;\n            Cras justo odio, dapibus ac facilisis in, egestas Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. &lt;a href=&quot;#&quot;&gt;http://net.tutsplus.com/tutorials/php/ ...&lt;/a&gt;\n        &lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</pre><p>This page should look like:</p><p><a\nhref=\"images/profiles.jpg\"><div\nclass=\'tutorial_image\'><img\nsrc=\'http://d2o0t5hpnwv4c1.cloudfront.net/2170_ribbit/images/profiles_small.jpg\' alt=\'Public profiles page preview\' title=\'\' border=\'0\'></div><p></a></p><hr\n/><h2>Compiling The CSS</h2><blockquote\nclass=\"pullquote\"><p>Referencing a nested element can result in lengthy selectors.</p></blockquote><p>As I noted earlier, for production, you can compile your LESS to CSS (and I recommend you do so for performance reasons). There are a few available online compilers:</p><ul><li><a\nhref=\"http://winless.org/online-less-compiler\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'winless.org\']);\">WinLess Online Compiler</a></li><li><a\nhref=\"http://lesstester.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'lesstester.com\']);\">LESSTESTER</a></li></ul><p>Along with some stand-alone compilers:</p><ul><li><a\nhref=\"http://crunchapp.net/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'crunchapp.net\']);\">Crunch!</a> (which is a full-blown LESS editor)</li><li><a\nhref=\"http://winless.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'winless.org\']);\">WinLess</a> (features auto compilation when the less file changes)</li><li><a\nhref=\"http://wearekiss.com/simpless\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'wearekiss.com\']);\">SimpLESS</a> (includes CSS minification)</li></ul><p>If any of these compilers do not work for you, Google for more; there are plenty! You can also use <code>lessc</code> from LESS&#8217;s site, but it&#8217;s much easier to compile your LESS files with other compilers. Of course, there is nothing wrong with using the <code>less.js</code> library to dynamically compile the layout; new browsers cache the resulting CSS.</p><hr\n/><h2>Conclusion</h2><p>As you can see, LESS is a powerful tool that makes it much easier and faster than plain CSS to style beautiful layouts.</p><p>But this is just the beginning. Be prepared to implement Ribbit&#8217;s back-end in a plethora of languages and platforms in the next set of tutorials!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(12,4,1,1358016705,NULL,' Using Inline SVGs With HTML5 ','It goes without saying that SVG isn’t as widely used as many people in the web development community might believe it should be. Setting the debate aside, in this tutorial, I will demonstrate how to use inline SVGs, covering a range of techniques and exploring the interaction between web page and graphic. When used in conjunction with other emerging standards in HTML5, JavaScript and CSS3, inline SVGs can significantly add to the user experience.(Continue)','It goes without saying that SVG isn’t as widely used as many people in the web development community might believe it should be. Setting the debate aside, in this tutorial, I will demonstrate how to use inline SVGs, covering a range of techniques and exploring the interaction between web page and graphic. When used in conjunction with other emerging standards in HTML5, JavaScript and CSS3, inline SVGs can significantly add to the user experience.(Continue)',1,0,'using-inline-svgs-with-html5',316,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2163_svg/thumbnail.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2163_svg/demo.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div><div\nclass=\"big_btn\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2163_svg/using_inline_svgs_with_html5_demo/using_inline_svgs_with_html5_demo.html\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-28287\'), post_id: 28287, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>It goes without saying that SVG isn&#8217;t as widely used as many people in the web development community might believe it should be. Setting the debate aside, in this tutorial, I will demonstrate how to use inline SVGs, covering a range of techniques and exploring the interaction between web page and graphic. When used in conjunction with other emerging standards in HTML5, JavaScript and CSS3, inline SVGs can significantly add to the user experience.</p><p><span\nid=\"more-28287\"></span></p><hr\n/><h2> <span>Step 1:</span> Create an HTML5 Page</h2><blockquote\nclass=\"pullquote pqRight\"><p>You can interact with the SVG elements using DOM techniques, as you would with other web page elements.</p></blockquote><p>In this tutorial, we are going to work through a practical example of an inline SVG by creating a simple component representing a record deck. The record will spin, and the user will be able to interact with it &#8211;  pressing to slow it down, and releasing to speed it up again. The SVG will also contain a button which users can click to change the record, causing its appearance to alter slightly. The visible SVG elements will be enhanced with gradients and drop-shadow filters.</p><blockquote><p><a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2163_svg/using_inline_svgs_with_html5_demo/using_inline_svgs_with_html5_demo.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">Check out the demo now</a> so that you have a clear idea of what we are building.</p></blockquote><p>As you likely will be aware, inline SVGs fall within the emerging HTML5 standards, so the code we use in this tutorial will not be fully supported across all browsers. Although inline SVGs are theoretically supported in all current versions of the major browsers, the internal animations and interactive effects that we&#8217;ll use are not so well supported just yet. The final result should function correctly in current versions of Firefox, Chrome and Opera. As always with HTML5 techniques, make sure you don&#8217;t rely on these effects in any live sites you work on, and include alternatives where possible.</p><p>Let&#8217;s dig in, and begin by creating an HTML5 page outline, like so:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\n&lt;/script&gt;\n&lt;style&gt;\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre><p>One of the primary advantages to using SVG is how scalable it is. To exploit this, we are primarily going to use relative values to define the SVG content. Add a container element for the SVG in the page body:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;div id=&quot;picHolder&quot;&gt;\n&lt;/div&gt;</pre><p>To see how the SVG sits within the containing element, add the following to the style section in your page head:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">#picHolder {background:#dedeff; border:1px solid #666666;}</pre><hr\n/><h2> <span>Step 2:</span> Add the SVG Element</h2><p>In the container element in the body of your page, add the SVG element outline, as follows:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;svg version=&quot;1.1&quot;\n     	baseProfile=&quot;full&quot;\n     	xmlns=&quot;http://www.w3.org/2000/svg&quot;\n     	height=&quot;100%&quot; width=&quot;100%&quot;&gt;\n&lt;/svg&gt;</pre><p>We&#8217;ve set the width and height to 100%, as we are going to specify the width of the containing element. However, rather than specifying the dimensions explicitly, we&#8217;ll instead use a JavaScript function to reveal how easily you can scale the SVG up and down. You can include a fixed width and height in the opening SVG tag or the style section.</p><hr\n/><h2> <span>Step 3:</span> Create the Definitions</h2><p>The visible shapes in the graphic will be defined inside the SVG element. Before that, we will work on the <em>defs</em> section. The <em>defs</em> section is where you place definitions that you can later refer to when creating your shapes. For this tutorial, the <em>defs</em> section is going to contain definitions for a few gradient fills and a couple of drop shadows. Add this new section inside the SVG element:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;defs&gt;\n&lt;/defs&gt;</pre><p>The items we place in this section will not actually appear in the image, but will be used as fills and filters for the shapes which do. We&#8217;ll include several gradient fills; so let&#8217;s work through each one in turn.</p><h3>Gradients</h3><p>First up is a linear gradient:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;linearGradient id=&quot;backGrad&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;0%&quot; y2=&quot;100%&quot;&gt;\n	&lt;stop offset=&quot;10%&quot; style=&quot;stop-color:#990000; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;90%&quot; style=&quot;stop-color:#cccc00; stop-opacity:1&quot; /&gt;\n&lt;/linearGradient&gt;</pre><p>This gradient is going to be specified as the fill for the background rectangle area. The <em>x1</em> and <em>y1</em> attributes represent the starting points of the gradient within the filled shape, with the gradient unfolding from there to the point represented by <em>x2</em> and <em>y2</em>. In this case, the gradient will run from top to bottom. The stop elements represent color points in the gradient. The first one states that 10% from the start of the gradient will be a solid dark red color and the second stop that 90% from the end of the gradient will be a yellow color. Between these two points, the gradient will blend the colors into one another. Both colors have full opacity.</p><p>Next let&#8217;s add a gradient for the record itself. This one is a bit more complex &#8211; it&#8217;s a radial gradient with several color stops:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;radialGradient id=&quot;recordGrad&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;50%&quot; fx=&quot;50%&quot; fy=&quot;50%&quot;&gt;\n	&lt;stop offset=&quot;30%&quot; style=&quot;stop-color:#000000; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;35%&quot; style=&quot;stop-color:#222222; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;45%&quot; style=&quot;stop-color:#000000; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;85%&quot; style=&quot;stop-color:#000000; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;95%&quot; style=&quot;stop-color:#222222; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;100%&quot; style=&quot;stop-color:#000000; stop-opacity:1&quot; /&gt;\n&lt;/radialGradient&gt;</pre><p> A radial gradient starts from the inside of the circle, with the innermost and outermost parts of the circle defined by <em>cx</em>, <em>cy</em>, <em>fx</em> and <em>fy</em>, listed alongside the radius. In this case, the radial gradient is going to occupy the whole of the circular record shape. The bulk of the record will be black, with two rings of slightly lighter color representing the smoother sections at center of the record and its edges. We will be placing a label on the record at its center too, so the first patch of lighter color on the record will appear just outside that. Add the label gradient fill next:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;linearGradient id=&quot;labelGrad0&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;0%&quot;&gt;\n	&lt;stop offset=&quot;40%&quot; style=&quot;stop-color:#000099; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;60%&quot; style=&quot;stop-color:#009900; stop-opacity:1&quot; /&gt;\n&lt;/linearGradient&gt;</pre><p> This is a simple linear gradient that will be used as fill for the circular record label. However, notice that the gradient ID has a zero on the end of it. This is due to the fact that we&#8217;re going to add an interactive function, allowing the user to &#8220;change the record&#8221;. A JavaScript function will toggle between a range of gradient fills for the label element. For this purpose, add another couple of gradients:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;linearGradient id=&quot;labelGrad1&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;0%&quot;&gt;\n	&lt;stop offset=&quot;0%&quot; style=&quot;stop-color:#990000; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;20%&quot; style=&quot;stop-color:#ff6600; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;40%&quot; style=&quot;stop-color:#cccc00; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;60%&quot; style=&quot;stop-color:#009900; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;80%&quot; style=&quot;stop-color:#000099; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;100%&quot; style=&quot;stop-color:#990099; stop-opacity:1&quot; /&gt;\n&lt;/linearGradient&gt;\n&lt;linearGradient id=&quot;labelGrad2&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;0%&quot;&gt;\n	&lt;stop offset=&quot;0%&quot; style=&quot;stop-color:#330033; stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;100%&quot; style=&quot;stop-color:#cc00cc; stop-opacity:1&quot; /&gt;\n&lt;/linearGradient&gt;</pre><p>The gradients each have an ID ending with an incrementing integer, so that we can iterate through them in JavaScript. Now, define another gradient to create a shine effect on top of the record:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;linearGradient id=&quot;shineGrad&quot; x1=&quot;0%&quot; y1=&quot;0%&quot; x2=&quot;100%&quot; y2=&quot;100%&quot;&gt;\n	&lt;stop offset=&quot;35%&quot; style=&quot;stop-color:#000000; stop-opacity:0&quot; /&gt;\n	&lt;stop offset=&quot;50%&quot; style=&quot;stop-color:#ffffff; stop-opacity:0.2&quot; /&gt;\n	&lt;stop offset=&quot;65%&quot; style=&quot;stop-color:#000000; stop-opacity:0&quot; /&gt;\n&lt;/linearGradient&gt;</pre><p>This time, the gradient uses opaque and alpha transparent color stops; the effect will be a subtle shine across the record. Finally, we need a metallic fill for the button and spindle:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;radialGradient id=&quot;dialGrad&quot; cx=&quot;50%&quot; cy=&quot;60%&quot; r=&quot;60%&quot; fx=&quot;40%&quot; fy=&quot;40%&quot;&gt;\n	&lt;stop offset=&quot;30%&quot; style=&quot;stop-color:#cccccc;stop-opacity:1&quot; /&gt;\n	&lt;stop offset=&quot;100%&quot; style=&quot;stop-color:#333333;stop-opacity:1&quot; /&gt;\n&lt;/radialGradient&gt;</pre><p>This time, the radial gradient is slightly off center to create a sense of depth and light, which will be complemented by a drop shadow filter.</p><h3>Filters</h3><p>Before we finish with the <em>defs</em> section, add a couple of drop shadows to give some of the shapes a bit more depth:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;filter id=&quot;recordShadow&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200%&quot; height=&quot;200%&quot;&gt;\n	&lt;feOffset result=&quot;offOut&quot; in=&quot;SourceAlpha&quot; dx=&quot;5&quot; dy=&quot;5&quot; /&gt;\n	&lt;feGaussianBlur result=&quot;blurOut&quot; in=&quot;offOut&quot; stdDeviation=&quot;3&quot; /&gt;\n&lt;/filter&gt;</pre><p>This one is going to appear behind the record area. The <em>x</em>, <em>y</em>, <em>width</em> and <em>height</em> properties refer to the position and dimensions within the shape using this filter. The offset defines the shadow relative to the original shape. The blur prevents the offset shape from being solid color, so that it appears as a shadow. In this case only the shadow will appear, not the shape itself &#8211; the shadow is going to be defined by a dedicated shape which will be placed behind the record shape. For the user controls, which are circular and metallic, we also want a drop shadow but we want the shape itself to display as well:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;filter id=&quot;dialShadow&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;200%&quot; height=&quot;200%&quot;&gt;\n	&lt;feOffset result=&quot;offOut&quot; in=&quot;SourceAlpha&quot; dx=&quot;2&quot; dy=&quot;2&quot; /&gt;\n	&lt;feGaussianBlur result=&quot;blurOut&quot; in=&quot;offOut&quot; stdDeviation=&quot;1&quot; /&gt;\n	&lt;feBlend in=&quot;SourceGraphic&quot; in2=&quot;blurOut&quot; mode=&quot;normal&quot; /&gt;\n&lt;/filter&gt;</pre><p>This main difference here, apart from the scale of the shadow, is the blend element, which will preserve the original shape while also showing the shadow around it.</p><hr\n/><h2> <span>Step 4:</span> Create the Shapes</h2><p>That&#8217;s enough preparation; let&#8217;s get on with the graphics! Each item you add to the body of the SVG will be displayed on top of previously listed elements, so we will work from the bottom up, starting with the shapes at the back and ending with those at the front.</p><h3>Background Rectangle</h3><p>First, add a rectangle shape for the background:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;rect width=&quot;90%&quot; height=&quot;90%&quot; x=&quot;5%&quot; y=&quot;5%&quot; fill=&quot;url(#backGrad)&quot; /&gt;</pre><p>The <em>rect</em> element dimensions and position are specified relative to the containing SVG, which, if you remember, is relative to the size of the containing element. We will set this later in JavaScript. We will use relative size and position values wherever possible, so that the entire image plus animation and interaction can scale up or down on demand. Notice that the element fill specifies one of the gradients we defined, using its ID attribute.</p><h3>Shadow</h3><p>Next up from the bottom is the record shadow, using one of the drop shadow filters we created:</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;circle cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;33%&quot; fill=&quot;#000000&quot; filter=&quot;url(#recordShadow)&quot; /&gt;</pre><p>The shadow is going to lie behind the record, as a circular shape with a radius that is roughly a third of the space allocated to the image, placed in the center. Since the filter in this case does not apply blending with the image, the circle itself will not appear, just its shadow.</p><h3>Record</h3><p>Next up is the record itself:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;circle cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;33%&quot; fill=&quot;url(#recordGrad)&quot; /&gt;</pre><p>As with the shadow, the <em>cx</em> and <em>cy</em> attributes represent the center of the record, which is centered in the image horizontally and vertically, with a radius of about a third. Again, we use one of the gradients we defined, which we will do in each shape.</p><h3>Label</h3><p>On top of the record is its label, so add it next:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;circle id=&quot;recordLabel&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;10%&quot; fill=&quot;url(#labelGrad0)&quot; /&gt;</pre><p>The label circle has the same central point as the record, across which it stretches about a third of the way. We start with the first of the label gradient options we defined, and will implement the user switching between these later &#8211; we include an ID attribute here to refer to this element in JavaScript.</p><h3>Shine</h3><p>Now, let&#8217;s put some shine on top of the record:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;circle id=&quot;shine&quot; cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;32%&quot; fill=&quot;url(#shineGrad)&quot; /&gt;</pre><p>When the record spins, it is going to move to the right and down just a little, so we keep the shine slightly smaller than the record so that it does not appear to spread beyond it when it moves. This element also has an ID attribute to detect user interaction.</p><h3>Spindle</h3><p>For completeness, let&#8217;s add a little spindle in the center of the record:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;circle cx=&quot;50%&quot; cy=&quot;50%&quot; r=&quot;1%&quot; fill=&quot;url(#dialGrad)&quot; filter=&quot;url(#dialShadow)&quot; /&gt;</pre><p>This shape uses the metallic gradient we created. We also apply the second drop shadow filter, which includes blending so that the shape and shadow both appear.</p><h3>Button</h3><p>Last but not least, we need a little button for users to control changing the record, using the same fill and filter as the spindle:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;circle cx=&quot;83%&quot; cy=&quot;83%&quot; r=&quot;3%&quot; fill=&quot;url(#dialGrad)&quot; filter=&quot;url(#dialShadow)&quot;&gt;\n&lt;/circle&gt;</pre><p>This time, instead of a self-closing element, we separate the opening and closing circle tags. This is because we are going to animate the button when users click it, and will include the animation effect between these tags. Notice that we have been able to reuse fill and filter elements from the <em>defs</em> section. Here is the initial appearance of the graphic once the page dimensions are in place:</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2163_svg/images/record_player_init.png\" alt=\"record player initial appearance\"/></div><hr\n/><h2> <span>Step 5:</span> Add Animation</h2><blockquote\nclass=\"pullquote pqRight\"><p>Each item you add to the body of the SVG will be displayed on top of previously listed elements.</p></blockquote><p>Now we have our visual elements in place, let&#8217;s add some animation. We can make the record spin using SVG animation transformations, which are an extension of SMIL animation. These animated effects are defined within the SVG markup. An effect applies to whatever SVG element it appears within. You can use CSS3 transforms on SVG elements, but the SMIL-based alternatives give you a greater level of control.</p><p>We are going to include two simple animations: the record is going to spin and the button is going to move a little when the user clicks it. Let&#8217;s start with the slightly more straight-forward animation for the button.</p><p>Inside the button shape element, between the opening and closing circle tags we created, add the animate transform as follows:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;animateTransform\n	attributeType=&quot;XML&quot;\n	attributeName=&quot;transform&quot;\n	type=&quot;translate&quot;\n	from=&quot;0, 0&quot; to=&quot;1, 1&quot;\n	dur=&quot;0.1s&quot; begin=&quot;click&quot;\n	repeatCount=&quot;1&quot;\n	/&gt;</pre><p>The <em>animateTransform</em> applies to an XML attribute within the element it appears in. In this case, it is a translate transform. The <em>from</em> and <em>to</em> attributes represent the start and end positions for the element &#8211; these are relative to its starting position, so the button is going to move to the right and down by a single pixel. The transform will begin when a user clicks, elapse over one tenth of a second, and execute once. The button will return to its original position when the animation completes. <strong>Tip: To keep an element in the end position after an animation, specify <em>fill=&#8221;freeze&#8221;</em>.</strong></p><p>Now for spinning the record. An <em>animateTransform</em> applies to an SVG element, but we need the spin to apply to more than one element &#8211; specifically to the record and the label (not to the shine or shadow). Rather than creating separate animations for each and executing them concurrently, we can use a single transform by grouping these elements together. Before the circle element representing the record (with &#8220;recordGrad&#8221; as its fill) add an opening group tag:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;g&gt;</pre><p>After the circle representing the label, close the group:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;/g&gt;</pre><p>Now add the transform before this closing group tag so that it applies to the whole group:<pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;animateTransform id=&quot;spinTrans&quot;\n	attributeType=&quot;XML&quot;\n	attributeName=&quot;transform&quot;\n	type=&quot;rotate&quot;\n	by=&quot;360, 1, 1&quot;\n	dur=&quot;1s&quot;\n	repeatCount=&quot;indefinite&quot;\n	/&gt;</pre><p>This time, the animated effect is a rotate transform. The element will rotate by 360 degrees, and, to add to the effect, it will move to the right and down by a single pixel on each rotation, over a period of one second, repeating indefinitely. This transform will also include a <em>from</em> attribute, as it is necessary to specify the initial position of the elements being rotated. If you do not specify this position, the elements rotate around the <em>0, 0</em> point by default. However, at the moment, you cannot supply relative (i.e. percentage) values to these attributes, only fixed values. For this reason, we are going to set the <em>from</em> attribute when we specify the SVG dimensions in JavaScript.</p><hr\n/><h2> <span>Step 6:</span> Add Interaction</h2><p>Now let&#8217;s implement our interactive functions: clicking the button to change the record and pressing the record to slow it down.</p><h3>Change the Record</h3><p>First, in the script section of your page head, add these variables to count and keep track of the label designs:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">//keep track of current record label\nvar currLabel = 0;\n//alter this for a different number of labels\nvar numLabels = 3;\n</pre><p>Now, inside the opening tag for the circle element representing the button (which now has an animation between its tags), add the following click event listener:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">onclick=&quot;changeRecord()&quot;</pre><p>Back in the head script section, add the function outline:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">function changeRecord() {\n}</pre><p>Each time the user presses the button, we will move to the next label, moving back to the first when we reach the last one:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">//move to next label\ncurrLabel++;\n//reset if at highest number\nif (currLabel &gt; numLabels - 1) currLabel = 0;\n//set the fill attribute to the next gradient\ndocument.getElementById(&quot;recordLabel&quot;).setAttribute(&quot;fill&quot;, &quot;url(#labelGrad&quot;+currLabel+&quot;)&quot;);\n</pre><p>The last line here demonstrates how you can interact with the SVG elements using DOM techniques, as you would with other web page elements. Here, we set the <em>fill</em> attribute of the label circle element to use the next gradient fill, specifying the fill ID.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2163_svg/images/label_2.png\" alt=\"record label alternative\"/></div><h3>Slow it Down</h3><p>Now add the following event attributes to the record shine element (with &#8220;shineGrad&#8221; as its fill), as we are going to use mouse down and up events on it to trigger slowing the record down and speeding it up again:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">onmousedown=&quot;onRecord()&quot; onmouseup=&quot;offRecord()&quot;</pre><p>Back in the script section, add the function for when a user is pressing the record:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">//function called when user is pressing record\nfunction onRecord() {\n}</pre><p>Inside this function, we can slow the record spinning animation by altering the <em>animateTransform</em> duration attribute. We also alter the shine opacity to create the impression of pressing down:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">//slow the animation duration\ndocument.getElementById(&quot;spinTrans&quot;).setAttribute(&quot;dur&quot;, &quot;5s&quot;);\n//decrease the shine opacity\ndocument.getElementById(&quot;shine&quot;).style.opacity=&quot;0.7&quot;;</pre><p>When the user releases the record, we want it to go back to normal speed and appearance, so add the &#8220;mouse up&#8221; function next:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">//function called when user releases record\nfunction offRecord() {\n	//reset to normal speed\n	document.getElementById(&quot;spinTrans&quot;).setAttribute(&quot;dur&quot;, &quot;1s&quot;);\n	//set opacity back to normal\n	document.getElementById(&quot;shine&quot;).style.opacity=&quot;1.0&quot;;\n}</pre><hr\n/><h2> <span>Step 7:</span> Specify the Size</h2><p>We can finally set the overall size of the SVG now. At the top of the script section, add a new variable:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">//desired size of SVG\nvar size = 300;</pre><p>We will initially use <code>300</code> pixels for both the width and height of the graphic, but you are free to alter this at any point. Define a function in the script section to set these dimensions:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">//function to set SVG dimensions\nfunction setSize() {\n	//set css and transform size\n	var holder = document.getElementById(&quot;picHolder&quot;);\n	holder.style.height=size+&quot;px&quot;;\n	holder.style.width=size+&quot;px&quot;;\n	document.getElementById(&quot;spinTrans&quot;).setAttribute(&quot;from&quot;, &quot;0, &quot;+size/2+&quot;, &quot;+size/2+&quot;&quot;);\n}</pre><p>We set the size on the containing <em>div</em> element. Take a moment to look at the final line in this function. Since the rotate transform animation cannot use relative percentage values, we must set the <em>from</em> element using the size variable (divided by two for the central point of the record). With 300 as the SVG size, this is how the transform would appear with fixed values:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;animateTransform id=&quot;spinTrans&quot;\n	attributeType=&quot;XML&quot;\n	attributeName=&quot;transform&quot;\n	type=&quot;rotate&quot;\n	from=&quot;0, 150, 150&quot;\n	by=&quot;360, 1, 1&quot;\n	dur=&quot;1s&quot;\n	repeatCount=&quot;indefinite&quot;\n	/&gt;</pre><p>If you want to use fixed values in your SVG you can do so. We are only using this technique to demonstrate using relative dimensions. Finally, call this function at the end of the script section:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">window.addEventListener(&quot;DOMContentLoaded&quot;, setSize, false);</pre><hr\n/><h2>Conclusion</h2><p>Our interactive SVG animation is now complete! Open your page in a supporting browser to <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2163_svg/using_inline_svgs_with_html5_demo/using_inline_svgs_with_html5_demo.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">view the effect</a>; don&#8217;t forget to try interacting with the record and button. Try altering the size variable to see how the SVG elements all adapt to suit, including the animations and interactions.</p><p>If you&#8217;d like to explore SVG further, some topics to consider include paths, text, masking and clipping. There are also a range of additional animation options to consider. Of course, these effects will not work for all users right now, but hopefully one day soon&#8230;</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(13,4,1,1358016706,NULL,' A First Look at the HTML5 History API ','HTML5 introduces a variety of new goodies for front-end developers, such as the additions to the browser’s history object. Let’s take a look at its new features in this lesson.(Continue)','HTML5 introduces a variety of new goodies for front-end developers, such as the additions to the browser’s history object. Let’s take a look at its new features in this lesson.(Continue)',1,0,'a-first-look-at-the-history-api',102,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2155_html5history/preview.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:120px;\"> <a\nhref=\"https://umaar.com/demos/history/\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-28053\'), post_id: 28053, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>HTML5 introduces a variety of new goodies for front-end developers, such as the additions to the browser&#8217;s <code>history</code> object. Let&#8217;s take a look at its new features in this lesson.</p><p><span\nid=\"more-28053\"></span></p><hr\n/><h2>Introduction</h2><blockquote\nclass=\"pullquote\"><p>Always present the same information when the user refreshes the page.</p></blockquote><p>The <code>history</code> object isn&#8217;t new; in fact, you can trace its beginnings to the early browsers from the 1990s. While it has never been based on a public standard, until HTML5 that is, every browser has supported its meager, yet sometimes useful, functionality. Since its inception, the <code>history</code> object has provided a means to work with the history of a particular tab in the browser (or a window before tabbed browsing became the norm). This is sometimes referred to as <strong>session history</strong>.</p><p>The old <code>history</code> object gave us the ability to programmatically navigate backwards and forwards, the equivalent of the user clicking the <em>Back</em> and <em>Forward</em> buttons. But HTML5 finally updates the history API by adding the ability to manipulate the browser&#8217;s URL and maintain state; although URL manipulation, to some extent, has been possible since the introduction of the <code>location</code> object. For example:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n//On the URL: http://net.tutsplus.com/\n//Get the full URL\nlocation.href //&quot;http://net.tutsplus.com/&quot;\n//Get the hash fragment\nlocation.hash // &quot;&quot; (an empty string)\n//Set the hash fragment\nlocation.hash = &quot;hello&quot;\n//Get the full URL\nlocation.href //&quot;http://net.tutsplus.com/#hello&quot;\n//Get the hash fragment\nlocation.hash //&quot;#hello&quot;\n</pre><blockquote\nclass=\"pullquote\"><p>The native API is easy enough to use&#8230;</p></blockquote><p>It&#8217;s common for some web applications to use &#8220;hash-bangs&#8221; (<code>#!</code>). Not only can they prevent the browser from navigating to a different page (making dynamic web pages easier to manage), but they can also aid in search engine optimization (SEO) (<a\nhref=\"http://www.webmonkey.com/2012/05/twitter-declares-everything-old-new-again/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.webmonkey.com\']);\">until recently</a>, Twitter made extensive use of hash-bangs).</p><p>The hash-bang technique is useful when you have a lot of content that you want to display in the same page while allowing users to bookmark certain parts of a page. You can also use hash-bangs in conjunction with infinite scrolling scripts keep track of the user&#8217;s position by storing that information in the URL.</p><p>The technique is simple: store information in the URL, parse it, and then use Ajax to load content. It sounds wonderful, but there are <a\nhref=\"http://www.tbray.org/ongoing/When/201x/2011/02/09/Hash-Blecch\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.tbray.org\']);\">many</a> <a\nhref=\"http://blog.benward.me/post/3231388630\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'blog.benward.me\']);\">reasons</a> not <a\nhref=\"http://isolani.co.uk/blog/javascript/BreakingTheWebWithHashBangs/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'isolani.co.uk\']);\">to use</a> this technique. To summarize:</p><ul><li>A URL like <code>http://domain.com/#!1234</code> may fail to load correctly if JavaScript is not enabled.</li><li>You may have two different URLs pointing to the exact same content (eg: <code>http://domain.com/#!1234</code> and <code>http://domain.com/1234</code>)&#8211;a no-no for SEO.</li><li>The server is unaware of <a\nhref=\"http://en.wikipedia.org/wiki/Fragment_identifier\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'en.wikipedia.org\']);\">fragment identifiers</a>.</li></ul><hr\n/><h2>Using the History API</h2><p>The History API helps solve the aforementioned issues by giving us the ability to transform URLs, like <code>http://domain.com</code> to <code>http://domain.com/hello</code>, without triggering a page refresh. The following lists the <code>history</code> object&#8217;s members and their purposes:</p><ul><li><strong><code>history.back()</code></strong>: Navigates to the previous URL in the history stack.</li><li><strong><code>history.forward()</code></strong>: Navigates to the next URL in the history stack.</li><li><strong><code>history.go()</code></strong>: Navigates to the URL at the specified index in the history stack. e.g. <code>history.go(-2)</code></li><li><strong><code>history.pushState()</code></strong>: Adds a URL to the history stack with a specified state. e.g. <code>history.pushState({ foo : \"bar\"}, \"New title\", \"new-url.html\")</code>, where the first argument is a state object.</li><li><strong><code>history.replaceState()</code></strong>: Updates (rather than adds) the current URL on the history stack with the provided state information. e.g. <code>history.replaceState({ foo : \"bar\"}, \"New title\", location.href)</code></li><li><strong><code>history.length</code></strong>: Returns the amount of URLs in the history stack.</li><li><strong><code>history.state</code></strong>: Returns the state object at the top of the history stack.</li></ul><p>The following example uses no external libraries:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=&quot;/history/example/index.html&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;/history/example/hello.html&quot;&gt;hello&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;/history/example/about/index.html&quot;&gt;About&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</pre><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n// NodeLists do not have a forEach method\n[].forEach.call(document.querySelectorAll(&quot;nav a&quot;),function(e) {\n	e.addEventListener(&quot;click&quot;, function(evt) {\n	  var title = this.textContent;\n	  var url = this.href;\n	  //Change the URL\n	  history.pushState(null, title, url);\n	  //Do some ajax stuff\n	  //Prevent the browsers default behaviour of navigating to the hyperlink\n	  evt.preventDefault();\n	})\n});\n</pre><p>The native API is easy enough to use, but you can find many libraries that greatly help with the common patterns of intercepting a link, loading data via Ajax, and inserting the data into the page. Two popular libraries are <a\nhref=\"https://github.com/defunkt/jquery-pjax/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">pjax</a> and <a\nhref=\"https://github.com/balupton/History.js/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">History.js</a>.</p><hr\n/><h2>With Great Power&#8230;</h2><p>As with any technology or API, be mindful of best practices. Let&#8217;s look at a few best practices when using the history API.</p><h3>Be Kind to URLs</h3><blockquote><p>Don&#8217;t change the URL just because you can; only change it when it makes sense to do so!</p></blockquote><p>For example, let&#8217;s say your online shop resides at <code>https://shop.domain.com/</code>, and the homepage displays a list of popular items. Clicking on one of the items could open a <a\nhref=\"http://en.wikipedia.org/wiki/Modal_window\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'en.wikipedia.org\']);\">modal window</a> that contains the product&#8217;s information (retrieved via Ajax, of course). You wouldn&#8217;t need to change the URL when doing this; instead, you could provide a link to the product in the modal window that would take the user to the product&#8217;s page.</p><p>Another example would be to maintain the user&#8217;s scrolling position in an infinite scrolling situation. The user could refresh the page and continue where they left off.</p><p>The <a\nhref=\"https://chrome.google.com/webstore/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'chrome.google.com\']);\">Chrome Web Store</a> changes its URL when showing different items. No page refresh occurs when going from <a\nhref=\"https://chrome.google.com/webstore/category/popular\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'chrome.google.com\']);\">/webstore/category/popular</a> to <a\nhref=\"https://chrome.google.com/webstore/detail/pjkljhegncpnkpknbcohdijeoejaedia\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'chrome.google.com\']);\">/webstore/detail/pjkljhegncpnkpknbcohdijeoejaedia</a>.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2155_html5history/chrome-web-store.jpg\" border=\"0\" /></div><h3>Ensure Compatibility</h3><blockquote\nclass=\"pullquote\"><p>Only load what is necessary.</p></blockquote><p>Unfortunately, older browsers do not support <code>pushState()</code> and <code>replaceState()</code>. Therefore, it is important to ensure that both your page and the user experience (UX) are not broken in those browsers. Use the tried and true concept of <a\nhref=\"http://en.wikipedia.org/wiki/Progressive_enhancement\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'en.wikipedia.org\']);\">progressive enhancement</a>.</p><p>A common use case might be to intercept a link&#8217;s click event and use Ajax to load the content in a new window while also changing the URL. Make sure that the links <strong>work normally without JavaScript</strong>; the anchor element should have a valid URL in the <code>href</code> attribute. Then for browsers that do support the new goodies, the JavaScript code would retrieve the URL&#8217;s content via Ajax. Here&#8217;s what that code might look like:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n//Using jQuery (would work fine with raw javascript)\nif (&quot;pushState&quot; in history) {\n    $(&quot;nav a&quot;).on(&quot;click&quot;, function() {\n        history.pushState(null, this.textContent, this.href);\n        return false;\n    });​\n}\n</pre><h3>Don&#8217;t Download Unnecessary Markup</h3><p>Ajax is wonderful, and it can be tempting to take the easy road and download an entire HTML document to display in a modal window. Don&#8217;t do that! Downloading unnecessary data can take its toll on the UX, especially on slow connections.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p>Take the extra time to ensure your application doesn&#8217;t waste bytes over the wire, even if it means spending extra time on your back-end code. You can send a <a\nhref=\"http://www.web-design-talk.co.uk/197/detect-ajax-requests-using-the-x-requested-with-header-and-xmlhttprequest/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.web-design-talk.co.uk\']);\">custom HTTP header</a> that indicates that the server should only serve minimal content (e.g. JSON, HTML fragments, etc).</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n/* Note server support for HTTP_X_REQUESTED_WITH may vary, also it may be worth sending your own custom header in the case that the JavaScript doesn\'t send the header you expected */\nif(isset($_SERVER[\'HTTP_X_REQUESTED_WITH\']) &amp;&amp; strtolower($_SERVER[\'HTTP_X_REQUESTED_WITH\']) == \'xmlhttprequest\') {\n    //Ajax request\n    echo &quot;Content without lots of crazy markup&quot;;\n}\nelse {\n    //Non-ajax request\n    include(\'header.php\');\n    ...\n}\n</pre><p>The <a\nhref=\"https://umaar.com/demos/history/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'umaar.com\']);\">demo</a> demonstrates this. Click on <code>cat.php</code> on Example 4, and you&#8217;ll notice only the necessary content is sent through in the response.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2155_html5history/network-panel.jpg\" border=\"0\" /></div><h3>Maintain Continuity</h3><blockquote\nclass=\"pullquote\"><p>Be mindful of best practices.</p></blockquote><p>Always present the same information when the user refreshes the page. It might sound obvious, but it&#8217;s easy to forget when dealing with so much client-side code.</p><p>When you change a URL via <code>pushState()</code> from <code>http://domain.com</code> to <code>http://domain.com/contact</code>, your web server may look for a directory called <code>contact</code> or a file named <code>contact.html</code>. It&#8217;s important that URLs you use with the history API should be actual URLs that your server responds to.</p><p>There are many frameworks that can handle routing for you; it&#8217;s worth using one if you are able to.</p><ul><li><a\nhref=\"http://rubyonrails.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'rubyonrails.org\']);\">Ruby on Rails</a> (Ruby) &#8211; <a\nhref=\"http://guides.rubyonrails.org/routing.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'guides.rubyonrails.org\']);\">Routing</a></li><li><a\nhref=\"http://www.playframework.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.playframework.org\']);\">Play Framework</a> (Java) &#8211; <a\nhref=\"http://www.playframework.org/documentation/2.0/JavaRouting\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.playframework.org\']);\">HTTP Routing</a></li><li><a\nhref=\"http://codeigniter.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'codeigniter.com\']);\">CodeIgniter</a> (PHP) &#8211; <a\nhref=\"http://codeigniter.com/user_guide/general/routing.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'codeigniter.com\']);\">URI Routing</a></li><li><a\nhref=\"http://expressjs.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'expressjs.com\']);\">Express</a> (JavaScript on Node.js) &#8211; <a\nhref=\"http://expressjs.com/guide.html#routing\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'expressjs.com\']);\">Routing</a></li><li><a\nhref=\"https://www.djangoproject.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.djangoproject.com\']);\">django</a> (Python) &#8211; <a\nhref=\"https://docs.djangoproject.com/en/dev/topics/http/urls/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'docs.djangoproject.com\']);\">URL Dispatcher</a></li><li><a\nhref=\"http://www.asp.net\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.asp.net\']);\">ASP.NET</a> (C#) &#8211; <a\nhref=\"http://msdn.microsoft.com/en-us/library/system.web.routing.aspx\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'msdn.microsoft.com\']);\">System.Web.Routing</a></ul><p>Github <a\nhref=\"https://github.com/blog/760-the-tree-slider\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">uses <code>pushState()</code></a> for semantically different portions of content; their content looks the same when you refresh the page.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2155_html5history/github-pushstate.png\" border=\"0\" /></div><h3>Sensibly Handle the Forward/Back Buttons</h3><blockquote\nclass=\"pullquote\"><p>Ensure that both your page and the user experience (UX) are not broken in those browsers.</p></blockquote><p>A <code>popstate</code> event fires every time the current history entry changes. Use this event for a consistent UX.</p><p>For example, let&#8217;s assume you use Ajax to load content with your team&#8217;s members. The URL might look like <code>http://domain.com/team/person1</code>. The user then clicks on the &#8220;Next&#8221; link in the UI which loads Person 2&#8242;s information (<code>http://domain.com/team/person2</code>). If the user then clicks the browser&#8217;s <em>Back</em> button, Person 1&#8242;s information may not automatically load. It&#8217;s up to you to retrieve the state information and display Person 1&#8242;s information.</p><p>Once again, be sure to <strong>only load what is necessary</strong>. If Person 1&#8242;s information is already loaded, you don&#8217;t need to request it again. Show and hide DOM elements when necessary. You can also pass state objects to <code>pushState()</code> to maintain state.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;article data-person-id=&quot;1234&quot;&gt;...&lt;/article&gt;\n</pre><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nvar personId = \'1234\';\n/*\n* jQuery selector\n* If the html fragment for personId is found, we should show it\n*/\nvar person = $(&quot;.person[data-person-id=&quot;+personId+&quot;]&quot;);\nif ( person &amp;&amp; person.length &gt; 0 ) {\n	person.show();\n}\n</pre><p>The ever informative <a\nhref=\"http://www.caniuse.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.caniuse.com\']);\">caniuse.com</a> site has a great implementation (hash fragments aside!) for handling the <em>Back</em> button. Try it out. Edit some text in the search field and click <em>Back</em>. <strong>Hint:</strong> Notice the update delay with the address bar. This delay prevents constant updates to the URL with every key press, as opposed to less frequent updates when you finish entering a search term.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2155_html5history/can-i-use.png\" border=\"0\" /></div><h3>Use <code>pushState</code> and <code>replaceState</code> Appropriately</h3><p>The <code>pushState()</code> method adds an entry to the history stack; whereas, <code>replaceState()</code> replaces the current entry. For example, let&#8217;s assume you modify the URL with every keystroke the user makes in a text box. &#8220;Pushing&#8221; a new state adds an entry to the history each time the user submits that data; this isn&#8217;t be the best solution because the user will need to click the <em>Back</em> button for each letter entry. Use <code>replaceState()</code> instead, like this:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;input type=&quot;text&quot; id=&quot;search&quot; /&gt;\n</pre><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n$(&quot;#search&quot;).keyup(function() {\n  history.replaceState(null, null, &quot;search?=&quot; + $(&quot;#search&quot;).val());\n});\n</pre><hr\n/><h2>Further Reading</h2><p>Naturally, this is just the tip of the iceberg. There are many techniques, patterns, and libraries on the web that work with the HTML5 history API. While I cannot possibly cover every aspect of the history API, I can provide you with a variety of resources to further your knowledge.</p><ul><li><a\nhref=\"http://html5doctor.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'html5doctor.com\']);\">HTML5Doctor</a> &#8211; <a\nhref=\"http://html5doctor.com/history-api/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'html5doctor.com\']);\">Pushing and Popping with the History API</a></li><li><a\nhref=\"http://dev.opera.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'dev.opera.com\']);\">dev.opera</a> &#8211; <a\nhref=\"http://dev.opera.com/articles/view/introducing-the-html5-history-api/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'dev.opera.com\']);\">Introducing the HTML5 History API</a></li><li><a\nhref=\"http://davisjs.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'davisjs.com\']);\">Davis.js</a> &#8211; RESTful degradable JavaScript routing using pushState &#8211; (<a\nhref=\"https://github.com/olivernn/davis.js\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">Github</a>)</li><li><a\nhref=\"https://developer.mozilla.org\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'developer.mozilla.org\']);\">Mozilla Developer Network</a> on <a\nhref=\"https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'developer.mozilla.org\']);\">Manipulating the browser history</a></li><li><a\nhref=\"https://github.com/blog\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">Github Blog</a> on <a\nhref=\"https://github.com/blog/760-the-tree-slider\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">The Tree Slider</a></li><li><a\nhref=\"http://www.w3.org\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.w3.org\']);\">W3C</a> &#8211; <a\nhref=\"http://www.w3.org/TR/html5/history.html#the-history-interface\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.w3.org\']);\">The History interface</a></li><li>A <a\nhref=\"http://blog.gesteves.com/2011/09/22/better-infinite-scrolling-with-the-html5-history-api/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'blog.gesteves.com\']);\">great article</a> on how <a\nhref=\"http://piictu.com/streams/4df4fcc02d26880001000353\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'piictu.com\']);\">piictu</a> uses history management with infinite scrolling. <a\nhref=\"http://blog.gesteves.com/2011/09/22/better-infinite-scrolling-with-the-html5-history-api/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'blog.gesteves.com\']);\">Better infinite scrolling with the HTML5 History API</a></li><li><a\nhref=\"http://diveintohtml5.info/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'diveintohtml5.info\']);\">Dive into HTML5</a> &#8211; <a\nhref=\"http://diveintohtml5.info/history.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'diveintohtml5.info\']);\">Manipulating History for Fun &amp; Profit</a></li><li><a\nhref=\"http://mtrpcic.github.com/pathjs/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'mtrpcic.github.com\']);\">path.js</a> &#8211; Simple, lightweight routing for web browsers &#8211; <a\nhref=\"https://github.com/mtrpcic/pathjs\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">Github</a></li><li>Interesting information on <a\nhref=\"https://github.com/balupton/history.js/wiki/Intelligent-State-Handling\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">Intelligent State Handling</a> which is on the Wiki of the <a\nhref=\"https://github.com/balupton/history.js\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">history.js project</a>. (Also check out the owners <a\nhref=\"https://gist.github.com/854622\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'gist.github.com\']);\">gist</a>! )</li><li><a\nhref=\"http://railscasts.com/episodes/294-playing-with-pjax\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'railscasts.com\']);\">Playing with PJAX</a> &#8211; A cool screencast on using pjax within <a\nhref=\"https://github.com/rails/pjax_rails\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">Rails</a></li><li><a\nhref=\"http://www.thegillowfamily.co.uk/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.thegillowfamily.co.uk\']);\">ABaroids</a> &#8211; a game in the address bar using html5 history.replaceState!</li></ul><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(14,4,1,1358016707,NULL,' Responsive Grids With Susy ','Are you happy with with any of the CSS grid libraries available? No? I don’t blame you. Enter Susy, a plugin for the Compass CSS framework that lets you create your own custom grid framework, minimizing overhead, while making it more understandable to use. Sounds good, right? Let’s jump right in.(Continue)','Are you happy with with any of the CSS grid libraries available? No? I don’t blame you. Enter Susy, a plugin for the Compass CSS framework that lets you create your own custom grid framework, minimizing overhead, while making it more understandable to use. Sounds good, right? Let’s jump right in.(Continue)',1,0,'responsive-grids-with-susy',126,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2154_suzy/suzy.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2148_grids/code_download.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-27893\'), post_id: 27893, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Are you happy with with any of the CSS grid libraries available? No? I don&#8217;t blame you. Enter <a\nhref=\"http://susy.oddbird.net/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'susy.oddbird.net\']);\">Susy</a>, a plugin for the Compass CSS framework that lets you create your own custom grid framework, minimizing overhead, while making it more understandable to use. Sounds good, right? Let&#8217;s jump right in.</p><p><span\nid=\"more-27893\"></span></p><p>I&#8217;m not going to delve much into Compass or SCSS (the language you write the CSS in), but feel free to refer to our <a\nhref=\"https://tutsplus.com/course/maintainable-css-with-sass/\" >Maintainable CSS With Sass and Compass</a> Premium course, if you want to learn about them.</p><hr\n/><h2>Setting the Stage</h2><blockquote\nclass=\"pullquote\"><p>You can create three different types of grids: static, fluid and magic.</p></blockquote><p>Today&#8217;s popular grid libraries seem to fall short in one way or another. Grids like 960 and Blueprint are both static grids with very specific pixel values. Viewing these grids on screens that are under 950 pixels wide results in horizontal scroll bars&#8211;the bane of the Web.</p><p>Fluid grids are tricky to get right, but a few do exist. Most fluid grids work with percentages instead of pixels, but they tend to have a maximum size and make it impossible to scale past a respectable maximum width. By itself, a fluid layout is almost as bad as a fixed layout, because while you get better coverage of desktop computers, mobile devices tend to suffer with a worse layout. In this particular situation, a static grid gives you a better experience. Yes, you do have to scroll horizontally on devices with a lower resolution, but percentage based systems usually end up with a column that is, for example, 10% of 480px. This causes a vertical split in your text.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2148_grids/images/FluidStatic.png\" border=\"0\" /></div><p>One solution to this problem is CSS <em>media queries</em>. Some of the more popular libraries, like the <a\nhref=\"http://cssgrid.net/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'cssgrid.net\']);\" alt=\"1140 grid\">&#8220;1140 grid&#8221;</a> and the <a\nhref=\"http://twitter.github.com/bootstrap/scaffolding.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'twitter.github.com\']);\" alt=\"Bootstrap scaffolding grid\">&#8220;Bootstrap scaffolding grid&#8221;</a>, come with preset media queries. The 1140 grid has a fluid layout, but small screen sizes cause the columns to stack on top of each other.</p><blockquote\nclass=\"pullquote\"><p>Fluid grids are tricky to get right&#8230;</p></blockquote><p>Bootstrap&#8217;s scaffolding grid, on the other hand, incorporates multiple static layouts. As the screen size changes, Bootstrap changes the layout to the one best suited for the current screen size. Once you get to a mobile screen size, Bootstrap loads the same setup as the 1140 grid, a fluid layout with all the columns stacked on top of each other.</p><p>What&#8217;s wrong with choosing one of these? Well, technically nothing, but they are not tailor-made for your specific app. This forces you to build your app into their grid and work around the framework&#8217;s limitations. You can always modify their framework, but you might as well make your own and shave off the unneeded, overhead features.</p><hr\n/><h2>Introducing Susy</h2><p>As I mentioned before, Susy is a plugin for the Compass framework that brings a wide array of mix-ins for creating your own CSS grids. You simply specify the default number of columns and a few size options (column width, grid padding, etc), and Susy calculates the correct percentages for your elements. This gives you the power to change the number of columns and their sizes.</p><blockquote><p>You can create three different types of grids: static, fluid and magic.</p></blockquote><p>You already know what static and fluid grids are; let&#8217;s take a look at what &#8220;magic&#8221; grids give you. Magic grids have an elastic outside and a fluid inside. In other words, the outside of the grid (max width) adjusts according to the browser&#8217;s default font size (desktop browsers usually have a default of about 16px). The grid&#8217;s inside resizes based on the browser&#8217;s actual width. This combination gives your site a more consistent look across browsers while still supporting smaller screens.</p><p>Susy provides a mix-in called &#8220;at-breakpoint&#8221;, which allows you to set custom CSS according to the size of the screen. This mix-in accomplishes this feat with CSS media queries. So for example, you can rearrange the columns to stack on top of each other like in the previously discussed frameworks, and you can even remove content that doesn&#8217;t fit a mobile device.</p><hr\n/><h2>Setting Up a Susy Project</h2><p>I assume you already have Compass installed, but if not, you can refer to Jeffrey&#8217;s video series. To install Susy, just open a Ruby command line and type the following:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nsudo gem install susy\n</pre><p>Next create a Compass project. Type the following:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\ncompass create project_name -r susy -u susy\n</pre><p>You should see an info page, detailing how to get started.</p><p>Inside the newly created directory, you should see two folders along with a config file. You will edit the files residing in the <code>sass</code> directory; Compass compiles these files to output the final CSS to the stylesheets folder.</p><p>To save time compiling the CSS files after each update, you can use Compass&#8217; <code>watch</code> command to make Compass automatically recompile your files every time you save an update. So, in the terminal window type the following command:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\ncompass watch\n</pre><p>Compass will now start monitoring and re-compiling the files in the <code>sass</code> folder. Keep in mind that you must keep the terminal window open in order to monitor the folder; if you use the terminal for file editing (i.e. vim), then you need to open another window.</p><hr\n/><h2>Susy in Action</h2><p>Now that you have everything setup, let&#8217;s take a look at my quick demo. I am going to keep the HTML short because it&#8217;s the CSS that we are really here for. The demo is an event guest manager that lists the invited guests and keeps track of who RSVP&#8217;d. It&#8217;s a simple idea that showcases many of the concepts we discussed.</p><h3>The Plan</h3><p>HTML-wise, there will be a header area followed by a row with the name of the event, some controls, and finally the actual list of guests. You can take a look at the image below to better understand the layout.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2148_grids/images/Imac.png\" border=\"0\" /></div><p>Here is the entire HTML page for the demo:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n	&lt;head&gt;\n		&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;\n		&lt;link href=&quot;stylesheets/screen.css&quot; media=&quot;screen, projection&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;\n	&lt;/head&gt;\n	&lt;body&gt;\n		&lt;div class=&quot;container&quot;&gt;\n			&lt;h1 id=&quot;header&quot;&gt;Plan It! &lt;span class=&quot;tagline&quot;&gt;Event Guest Manager&lt;/span&gt;&lt;/h1&gt;\n			&lt;div id=&quot;controls&quot;&gt;\n				&lt;h3 id=&quot;menutitle&quot;&gt;Guest List For - John\'s Wedding&lt;/h3&gt;\n				&lt;div id=&quot;buttons&quot;&gt;\n					&lt;a id=&quot;phonebook&quot; href=&quot;#&quot;&gt;Add From Contacts&lt;/a&gt;\n					&lt;a id=&quot;newguest&quot; href=&quot;#&quot;&gt;Add New Guest&lt;/a&gt;\n				&lt;/div&gt;\n			&lt;/div&gt;\n			&lt;table cellspacing=&quot;0&quot;&gt;\n				&lt;thead&gt;\n					&lt;tr&gt;\n						&lt;th&gt;Name&lt;/th&gt;\n						&lt;th class=&quot;email&quot;&gt;Email&lt;/th&gt;\n						&lt;th class=&quot;phone&quot;&gt;Phone&lt;/th&gt;\n						&lt;th class=&quot;cell&quot;&gt;Cell&lt;/th&gt;\n						&lt;th&gt;RSVP Status&lt;/th&gt;\n					&lt;/tr&gt;\n				&lt;/thead&gt;\n				&lt;tbody&gt;\n					&lt;tr&gt;\n						&lt;td&gt;Dave K. Samten&lt;/th&gt;\n						&lt;td class=&quot;email&quot;&gt;dsamten@gman.com&lt;/td&gt;\n						&lt;td class=&quot;phone&quot;&gt;708-6777&lt;/td&gt;\n						&lt;td class=&quot;cell&quot;&gt;360-234-1192&lt;/td&gt;\n						&lt;td class=&quot;buttoncell&quot;&gt;\n							&lt;a class=&quot;unconfirm&quot; href=&quot;#&quot; alt=&quot;Confirmed&quot;&gt;Confirmed&lt;/a&gt;\n						&lt;/td&gt;\n					&lt;/tr&gt;\n					&lt;tr class=&quot;alt&quot;&gt;\n						&lt;td&gt;Bob Renper&lt;/th&gt;\n						&lt;td class=&quot;email&quot;&gt;bobren@gman.com&lt;/td&gt;\n						&lt;td class=&quot;phone&quot;&gt;537-4267&lt;/td&gt;\n						&lt;td class=&quot;cell&quot;&gt;621-124-4294&lt;/td&gt;\n						&lt;td class=&quot;buttoncell&quot;&gt;\n							&lt;a class=&quot;unconfirm&quot; href=&quot;#&quot; alt=&quot;Confirmed&quot;&gt;Confirmed&lt;/a&gt;\n						&lt;/td&gt;\n					&lt;/tr&gt;\n					&lt;tr&gt;\n						&lt;td&gt;Kevin D. Turner&lt;/th&gt;\n						&lt;td class=&quot;email&quot;&gt;kturn@gman.com&lt;/td&gt;\n						&lt;td class=&quot;phone&quot;&gt;942-2674&lt;/td&gt;\n						&lt;td class=&quot;cell&quot;&gt;930-654-4144&lt;/td&gt;\n						&lt;td class=&quot;buttoncell&quot;&gt;\n							&lt;a class=&quot;confirm&quot; href=&quot;#&quot; alt=&quot;RSVP&quot;&gt;RSVP&lt;/a&gt;\n						&lt;/td&gt;\n					&lt;/tr&gt;\n				&lt;/tbody&gt;\n			&lt;/table&gt;\n		&lt;/div&gt;\n	&lt;/body&gt;\n&lt;/html&gt;\n</pre><p>Susy uses <code>min-width</code> for the media queries by default; so, you start by defining the CSS for the smallest layout and then gradually expand the layout with the increasing screen size. The &#8216;mobile&#8217; version separates the tagline and buttons onto their own lines, and we make everything fill the width of the page.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p>I use another Compass plugin, called Sassy Buttons, to generate the buttons&#8217; CSS. It isn&#8217;t integral to this demo, but you can install it by typing the following in a terminal:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\ngem install sassy-buttons\n</pre><p>Then add the following line to your <code>config.rb</code> file:</p><pre class=\"brush: ruby; title: ; notranslate\" title=\"\">\nrequire \'sassy-buttons\'\n</pre><hr\n/><h2>The SCSS</h2><p>Let&#8217;s define the layout. Open <code>_base.scss</code> in the <code>sass</code> folder. This file contains all the <code>import</code> statements and variables that we need later. Replace everything inside that file with the following:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n@import &quot;susy&quot;;\n//if you want to use the buttons plugin\n@import &quot;sassy-buttons&quot;;\n//this is the default number of columns\n$total-columns: 5;\n//width of each column\n$column-width   : 4em;\n//space between columns\n$gutter-width   : 1em;\n//space on the right and left of the grid\n$grid-padding   : $gutter-width;\n//alternative layout breakpoints\n$tablet: 8;\n$computer: 55em 12;\n</pre><blockquote\nclass=\"pullquote\"><p>By itself, a fluid layout is almost as bad as a fixed layout&#8230;</p></blockquote><p>The <code>total-columns</code> holds the default number of columns for the smallest display in your layout.</p><p>I went with three layouts total: mobile, tablet, and computer. Susy&#8217;s breakpoints allow you to do things like setting the min and max sizes for the media queries, and you can even add special support for Internet Explorer. I&#8217;m going to keep this example simple and cover just two types.</p><p>The tablet breakpoint activates when the screen can fit eight columns. The computer breakpoint activates when the screen is at least 55em wide, and the <code>12</code> in <code>$computer: 55em 12;</code> tells Susy to switch to twelve columns.</p><p>Now save this file and open <code>screen.scss</code>. Erase everything in the file and import the base file. Let&#8217;s also define the main container:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n@import &quot;base&quot;;\nbody{\n	background:#F7F3E8;\n	a{ text-decoration: none; }\n	.container{\n		@include container($total-columns, $tablet, $computer);\n</pre><p>Notice you don&#8217;t need the underscore or the file extension when importing the <code>base</code> file. Inside the container class, we use the first Susy mix-in that defines the different layouts for the grid. Then, it&#8217;s just regular SCSS for the mobile layout:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n		#header{\n			font-weight: 700;\n			font-size: 72px;\n			span{\n				font-weight: 300;\n				font-size: 18px;\n				display: block;\n			}\n		}\n		#controls{\n			#buttons{\n				margin-bottom: 5px;\n				#phonebook{ @include sassy-button(&quot;simple&quot;, 6px, 14px, #337EC4); }\n				#newguest{\n					margin-top: 5px;\n					@include sassy-button(&quot;simple&quot;, 6px, 14px, #D93131);\n				}\n			}\n		}\n		table{\n			width:100%;\n			thead{\n				color: #FEFEFE;\n				background: #000;\n				th{\n					text-align: left;\n					font-weight:500;\n					padding:10px;\n				}\n			}\n			tbody{\n				border: 3px solid #000;\n				tr{ background: #E5E5E5; }\n				tr.alt{ background: #EEEEEE; }\n				.buttoncell{\n					.confirm{ @include sassy-button(&quot;simple&quot;, 6px, 14px, #F39B06); }\n					.unconfirm{ @include sassy-button(&quot;flat&quot;, 6px, 14px, #3BA06F); }\n				}\n			}\n			.email{ display: none; }\n			.phone{ display: none; }\n		}\n	}\n}\n</pre><p>As you can see in the last two lines, I hide the email and phone columns in the table so that the page fits normally on a mobile device. As a best practice, give the user a different way to view the full information (i.e. modal, other page), but I leave that out for the sake of this example&#8217;s simplicity.</p><p>We now have the basic CSS completed for the mobile website, and we can start modifying the layout with breakpoints. Here is a quick screenshot I took on my iPhone of the mobile version:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2148_grids/images/Iphone.png\" border=\"0\" /></div><h3>Adding Breakpoints</h3><p>The first breakpoint we need to implement is the tablet version; remember, we must start with the smallest layout first. The tablet size is large enough to put the tagline on it&#8217;s own line, and we can also display the email column. Unfortunately, it still isn&#8217;t big enough to put the event name and buttons on the same line. Here is the SCSS for this breakpoint:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n@include at-breakpoint($tablet){\n	body .container{\n		#header span{ display: inline; }\n		table .email{ display: table-cell; }\n	}\n}\n</pre><p>No &#8216;magic&#8217; commands here, just standard SCSS inside a Susy mix-in. Here is a screenshot from an iPad of the tablet layout:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2148_grids/images/Ipad.png\" border=\"0\" /></div><p>Finally, let&#8217;s implement the desktop version. We definitely have more than enough room for all the columns; therefore, we indent the table on both sides so that it doesn&#8217;t have too much blank space. We also move the buttons onto the same line as the event&#8217;s name, aligning it to the right side, in order to center the table (visually, at least). Here is that code:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n@include at-breakpoint($computer){\n	body .container{\n		#controls{\n			#menutitle{\n				@include span-columns(5);\n				margin-top:5px;\n			}\n			#buttons{\n				text-align: right;\n				@include span-columns(5 omega);\n			}\n		}\n		table{\n			@include prefix(1);\n			@include suffix(1);\n			.cell{ display: table-cell; }\n		}\n	}\n}\n</pre><p>This is the first time we use the <code>span-columns</code> mix-in. Susy takes whatever value you pass to calculate the width percentage of the container. The <code>omega</code> keyword tells Susy that this is the final column in the row. This makes Compass float the column to the right and removes the right margin.</p><blockquote><p>The <code>prefix</code> and <code>suffix</code> mix-ins push the container x amount of columns in from the left and right respectively.</p></blockquote><p>You can now save this file and let compass compile it into CSS. If you added the sassy-buttons plugin after launching the <code>compass watch</code> command, you have to stop the watch command ( shortcut: CTLR-C ) and restart it in order to compile the SCSS.</p><hr\n/><h2>Closing Thoughts</h2><p>This is a very brief introduction into Susy. For a more complete list of features, you can visit <a\nhref=\"http://susy.oddbird.net/guides/reference/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'susy.oddbird.net\']);\" alt=\"Susy Documentation\">Susy&#8217;s documentation</a>.</p><p>I hope you enjoyed this article, and thank you for reading. Like always, feel free to leave any comments or questions in the comments section. You can also contact me on Twitter &#8211; <a\nhref=\"https://twitter.com/GabrielManricks\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'twitter.com\']);\" alt=\"Gabriel Manricks on Twitter\">@GabrielManricks</a> and I will try to get back to you as soon as possible.</p><p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(15,4,1,1358016707,NULL,' A Simple Parallax Scrolling Technique ','Parallax scrolling is an interesting technique, where, as you scroll, the background images translate slower than the content in the foreground, creating the illusion of 3D depth. As I planned to re-design my personal website, my first goal was to write the shortest and simplest code to achieve maximum awesomeness! I’ll show you how I did it.(Continue)','Parallax scrolling is an interesting technique, where, as you scroll, the background images translate slower than the content in the foreground, creating the illusion of 3D depth. As I planned to re-design my personal website, my first goal was to write the shortest and simplest code to achieve maximum awesomeness! I’ll show you how I did it.(Continue)',1,0,'simple-parallax-scrolling-technique',318,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2138_SimpleParallax/images/preview.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2138_SimpleParallax/source.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div><div\nclass=\"big_btn\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2138_SimpleParallax/Demo/index.html\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-27641\'), post_id: 27641, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Parallax scrolling is an interesting technique, where, as you scroll, the background images translate slower than the content in the foreground, creating the illusion of 3D depth. As I planned to re-design my <a\nhref=\"http://www.mohi.me\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.mohi.me\']);\" target=\"_blank\">personal website</a>, my first goal was to write the shortest and simplest code to achieve maximum awesomeness! I&#8217;ll show you how I did it.</p><p><span\nid=\"more-27641\"></span></p><blockquote><p>In this tutorial, I&#8217;ll teach you the simplest parallax scrolling technique you&#8217;ve ever came across, so let&#8217;s dig in!</p></blockquote><hr\n/><h2><span>Step 1:</span> The Markup</h2><p> This technique revolves around controlling the speed of background image. So let&#8217;s begin with the HTML markup, creating two sections along with the required attributes: <code>\"data-type\"</code> and <code>\"data-speed\"</code>. Don&#8217;t worry; I&#8217;ll explain these later.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n                &lt;section id=&quot;home&quot; data-type=&quot;background&quot; data-speed=&quot;10&quot;&gt;\n                &lt;/section&gt;\n                &lt;section id=&quot;about&quot; data-type=&quot;background&quot; data-speed=&quot;10&quot;&gt;\n                &lt;/section&gt;\n                </pre><p>I am using the <code>&lt;section&gt;</code> tag with the attributes <code>data-type</code> &#038; <code>data-speed</code>, which were introduced in HTML5. This makes the HTML markup cleaner and easier to read.</p><p> According to the specification for <a\nhref=\"http://dev.w3.org/html5/spec/global-attributes.html#custom-data-attribute\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'dev.w3.org\']);\" target=\"_blank\"> Custom Data Attributes</a>, any attribute that starts with <code>data-</code> will be treated as a storage area for private data. Additionally, this won&#8217;t affect the layout or presentation.</p><p>Since all we need to do is control the speed of the background images, we&#8217;ll use <code>data-type=\"background\"</code> and <code>data-speed=\"10\"</code> as key attributes to specify the necessary parameters.</p><p>I know what you&#8217;re thinking: you&#8217;re worried about IE. Never fear; I have a workaround for that too! We&#8217;ll discuss it momentarily.</p><p>Next, let&#8217;s add the content within the <code>&lt;article&gt;</code> tag inside each <code>&lt;section&gt; </code>.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n                &lt;section id=&quot;home&quot; data-type=&quot;background&quot; data-speed=&quot;10&quot; class=&quot;pages&quot;&gt;\n                         &lt;article&gt;I am absolute positioned&lt;/article&gt;\n                    &lt;/section&gt;\n                &lt;section id=&quot;about&quot; data-type=&quot;background&quot; data-speed=&quot;10&quot; class=&quot;pages&quot;&gt;\n                         &lt;article&gt;Simple Parallax Scroll&lt;/article&gt;\n                &lt;/section&gt;\n                </pre><p>What we&#8217;re attempting to do here is making the &lt;section&gt; background scroll slower than its content, i.e &lt;article&gt;. This will help us create a parallax illusion. Before moving on to the jQuery magic, let&#8217;s add the background images in our CSS for each &lt;section&gt;.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n                #home {\n                background: url(home-bg.jpg) 50% 0 repeat fixed; min-height: 1000px;\n                }\n                #about {\n                background: url(about-bg.jpg) 50% 0 no-repeat min-height: 1000px;\n                }\n         </pre><p>Upon adding backgrounds for both sections, it should look like:</p><div\nclass=\"tutorial_image\"><img\nalt=\"image\" src=\"http://d2o0t5hpnwv4c1.cloudfront.net/2138_SimpleParallax/images/only_background_1.jpg\" alt=\"Home Background\"></div><div\nclass=\"tutorial_image\"><img\nalt=\"image\" src=\"http://d2o0t5hpnwv4c1.cloudfront.net/2138_SimpleParallax/images/only_background_2.jpg\" alt=\"About Background\"></div><p> Let&#8217;s add some more CSS to style and spice up the page!</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n                #home {\n                  background: url(home-bg.jpg) 50% 0 repeat fixed; min-height: 1000px;\n                  height: 1000px;\n                  margin: 0 auto;\n                  width: 100%;\n                  max-width: 1920px;\n                  position: relative;\n                }\n                #home article {\n                  height: 458px;\n                  position: absolute;\n                  text-align: center;\n                  top: 150px;\n                  width: 100%;\n                }\n                #about {\n                  background: url(about-bg.jpg) 50% 0 repeat fixed; min-height: 1000px;\n                  height: 1000px;\n                  margin: 0 auto;\n                  width: 100%;\n                  max-width: 1920px;\n                  position: relative;\n                  -webkit-box-shadow: 0 0 50px rgba(0,0,0,0.8);\n                  box-shadow: 0 0 50px rgba(0,0,0,0.8);\n                }\n                #about article {\n                  height: 458px;\n                  position: absolute;\n                  text-align: center;\n                  top: 150px;\n                  width: 100%;\n                }\n                </pre><p>Now it should look like this&#8230;</p><div\nclass=\"tutorial_image\"><img\nalt=\"image\" src=\"http://d2o0t5hpnwv4c1.cloudfront.net/2138_SimpleParallax/images/1.jpg\" alt=\"Home Preview\"></div><hr\n/><h2><span>Step 2:</span> The Magic Code</h2><p>Yep, that&#8217;s right; this is where the magic begins! Using jQuery, we&#8217;ll begin with the standard <code>document.ready()</code> method to ensure that the page has loaded and is ready to be manipulated.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n                $(document).ready(function(){\n                });\n                </pre><blockquote><p>This technique revolves around controlling the speed of the background image that exists in both sections.</p></blockquote><p>Now I need your attention here. The first thing happening below is that we&#8217;re iterating over each <code>&lt;section&gt;</code> in the page, which has the atrribute <code>data-type=\"background\"</code>.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n                $(document).ready(function(){\n                    $(\'section[data-type=&quot;background&quot;]\').each(function(){\n                      var $bgobj = $(this); // assigning the object\n                    });\n                });\n                </pre><p>Add another function, <code>.scroll()</code>, inside <code>.each()</code>, which is invoked as the user begins scrolling.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n                $(window).scroll(function() {\n                });\n                </pre><p>We need to determine how much the user scrolled up, and then divide the value by the <code>data-speed</code> value, mentioned in the markup.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n                var yPos = -($window.scrollTop() / $bgobj.data(\'speed\'));\n                </pre><p><code>$window.scrollTop()</code>: we are getting the current scroll value from the top. This basically determines how much the user has scrolled up. <code>$bgobj.data(\'speed\')</code> refers to the <code>data-speed</code> assigned in the markup, and <code>yPos</code> is the final value that we need to apply for scrolling.  However, it will be a negative value,  because we have to move the background in the opposite direction of the user&#8217;s scroll.</p><p>Let&#8217;s investigate a bit more with an example:</p><div\nclass=\"tutorial_image\"><img\nalt=\"image\" src=\"http://d2o0t5hpnwv4c1.cloudfront.net/2138_SimpleParallax/images/2.jpg\" alt=\"Wireframe Explained\"></div><p> In the above image, <code>data-speed</code> is 10, and let&#8217;s assume that the browser window has scrolled <code>57px</code>. This means <code>57px</code> divided by <code>10</code> = <code>5.7px</code>.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n                // Put together our final background position\n                var coords = \'50% \'+ yPos + \'px\';\n                // Move the background\n                $bgobj.css({ backgroundPosition: coords });\n                </pre><p> The last thing that we need to do is put together our final background position into a variable.  In order to keep the horizontal position of the background as static, we&#8217;ve assigned <code>50%</code> as its <code>xPosition</code>. Then, we added <code>yPos</code> as the <code>yPosition</code>, and, finally, assigned the background coordinates to our <code>&lt;section&gt;</code> background: <code> $bgobj.css({ backgroundPosition: coords });</code>.</p><p> Your final code might look like:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n$(document).ready(function(){\n    $(\'section[data-type=&quot;background&quot;]\').each(function(){\n        var $bgobj = $(this); // assigning the object\n        $(window).scroll(function() {\n            var yPos = -($window.scrollTop() / $bgobj.data(\'speed\'));\n            // Put together our final background position\n            var coords = \'50% \'+ yPos + \'px\';\n            // Move the background\n            $bgobj.css({ backgroundPosition: coords });\n        });\n    });\n});\n</pre><p>Yay, we&#8217;ve done it! <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/2138_SimpleParallax/Demo/index.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">Try it out</a> for yourself.</p><hr\n/><h2>IE Fix</h2><p> There&#8217;s one last fix: older IE can&#8217;t render the <code>&lt;section&gt;</code> and <code>&lt;article&gt;</code> tags. That&#8217;s easy to fix, though; we&#8217;ll use the standard solution of creating the elements, which makes the browser magically recognize the HTML5 tags.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\n                    // Create HTML5 elements for IE\n                    document.createElement(&quot;article&quot;);\n                    document.createElement(&quot;section&quot;);\n                </pre><p> Additionally, we need to use a basic <a\nhref=\"http://mohi.me/reset/reset.css\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'mohi.me\']);\" target=\"_blank\">CSS reset</a> file in order to make all the browsers play nicely. Luckily, tools, like <a\nhref=\"http://html5boilerplate.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'html5boilerplate.com\']);\">HTML5 Boilerplate</a> take care of the brunt of the work for us, when it comes to cross-browser normalizing.</p><hr\n/> That does it for this lesson! Any questions or notes that you&#8217;d like to add? Let me know below!<div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(16,4,1,1358016708,NULL,' An Introduction to the CSS Flexbox Module ','CSS, despite its relatively low perceived skill ceiling, always seems to have a killer feature up its sleeve. Remember how media queries made responsive layouts possible and revolutionized front-end development? Well, today, we’re going to talk about a new layout mode, called flexbox – new in CSS3. I’m sure you’re raring to go! Let’s get started after the jump.(Continue)','CSS, despite its relatively low perceived skill ceiling, always seems to have a killer feature up its sleeve. Remember how media queries made responsive layouts possible and revolutionized front-end development? Well, today, we’re going to talk about a new layout mode, called flexbox – new in CSS3. I’m sure you’re raring to go! Let’s get started after the jump.(Continue)',1,0,'an-introduction-to-css-flexbox',216,0,'https://d2o0t5hpnwv4c1.cloudfront.net/2071_cssflexbox/css-flexbox-preview.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:120px;\"> <a\nhref=\"http://umaar.github.com/css-flexbox-demo/\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25655\'), post_id: 25655, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>CSS, despite its relatively low perceived skill ceiling, always seems to have a killer feature up its sleeve. Remember how media queries made responsive layouts possible and revolutionized front-end development? Well, today, we&#8217;re going to talk about a new layout mode, called flexbox &#8211; new in CSS3. I&#8217;m sure you&#8217;re raring to go! Let&#8217;s get started after the jump.</p><p><span\nid=\"more-25655\"></span></p><hr\n/><h2>CSS Flexbox Support</h2><p>Currently, the <a\nhref=\"http://www.w3.org/TR/css3-flexbox/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.w3.org\']);\" rel=\"external\" target=\"_blank\">CSS Flexbox specification</a> is a working draft and <strong>things will change</strong>! The examples this tutorial covers could potentially fail to work in the future, as browsers change their flexbox implementation to match up with the specification. The aim of this tutorial is to provide you with a basic understanding of CSS flexbox, and demonstrate how to use it in your web pages.</p><blockquote><p>Please note that this tutorial will use webkit/non-vendor-prefixed examples for the sake of brevity. Have a look at <a\nhref=\"http://caniuse.com/flexbox\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'caniuse.com\']);\" rel=\"external\" target=\"_blank\" title=\"Can I Use CSS Flexbox\">caniuse.com</a> for a list of browsers that support the flexbox module, and reference the necessary prefixes in your projects, accordingly.</p></blockquote><hr\n/><h2>Background on Layout Modes</h2><p>CSS Flexbox is essentially a layout mode. There are existing layout modes within CSS, and they&#8217;ve been there for a long while. One example of a layout mode is <strong>block</strong> (e.g. display: block). Block layouts are a great way to style entire documents, many elements are treated by the browser as <a\nhref=\"https://developer.mozilla.org/en/HTML/Block-level_elements\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'developer.mozilla.org\']);\">block level, by default</a>; these include common elements, such as paragraphs and <code>div</code>s.</p><p>Occasionally, when an element is not block, it&#8217;s likely to be <strong>inline</strong>. <a\nhref=\"http://en.wikipedia.org/wiki/HTML_element#Inline_elements\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'en.wikipedia.org\']);\">Inline level elements</a> include the anchor tag, input tag &amp; the strong tag. The <a\nhref=\"https://developers.google.com/chrome-developer-tools/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'developers.google.com\']);\">developer tools</a> in Chrome actually allow you to view the &#8220;<a\nhref=\"https://developers.google.com/chrome-developer-tools/docs/elements-styles#computed_style\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'developers.google.com\']);\">computed style</a>&#8221; of an element, which is a great way to determine what CSS properties and values have been applied to elements that weren&#8217;t explicitly set by the developer.</p><p>Here&#8217;s a quick tip for accessing the computed style of an element using JavaScript&#8217;s <a\nhref=\"https://developer.mozilla.org/en/DOM/window.getComputedStyle\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'developer.mozilla.org\']);\">window.getComputedStyle</a> method.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nvar elem = document.querySelector(\'h1#someId\');\nwindow.getComputedStyle(elem).display; //block\n</pre><p>Block and inline layout modes aside, CSS also has tabled and positioned layout modes. The reason layout modes are being referenced is because flexbox is a new layout mode, which allows for greater flexibility when laying out web pages.</p><p>The flexbox layout provides us with simple techniques to easily dictate the manner in which items are to be laid out.</p><hr\n/><h2>How Can You Use Flexbox?</h2><p>To force an element to use the flexbox layout, we add the <code>flexbox</code> value to the display property.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n#container {\n	display: flexbox;\n}\n</pre><p>By default, a flexbox is a block level element; we can define an inline-level element like so:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n#container {\n	display: inline-flexbox;\n}\n</pre><p>Similar to the example above, you&#8217;ll want to apply the flexbox layout to the <strong>parent</strong> of the children whose positioning you&#8217;d like to control. Let&#8217;s look at <a\nhref=\"http://jsbin.com/imuson/edit#html,live\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">simple, live example</a>.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;ul&gt;\n  &lt;li&gt;An item&lt;/li&gt;\n  &lt;li&gt;Another item&lt;/li&gt;\n  &lt;li&gt;The last item&lt;/li&gt;\n&lt;/ul&gt;\n</pre><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nul {\n	/* Old Syntax */\n	display: -webkit-box;\n	/* New Syntax */\n	display: -webkit-flexbox;\n}\n</pre><p>You&#8217;ll notice that the list item elements are now flowing horizontally, similar to how they might render, if we had used <code>float: left</code>. The list item elements can now be referred to as <strong>flexbox items.</strong></p><blockquote><p>Note: a direct descendent of a flexbox, which is absolutely positioned, e.g. using <code>position: absolute</code>, cannot be a flexbox item, as it breaks the usual flow.</p></blockquote><div\nclass=\"tutorial_image\"><img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/2071_cssflexbox/simple-example.png\" alt=\"Very basic example\" border=\"0\" /></div><p>You may notice that the items (the list item elements) have assumed a horizontal flow (the direction of the flow is also known as the main axis). Fortunately, we are able to control this flow (and thus what is considered to be the main axis) and avoid the use of floats!</p><hr\n/><h2>Exploring <code>flex-direction</code></h2><p>We can apply the <code>flex-direction</code> property and specify the direction in which we wish for our flexbox items to be laid out. The property accepts <code>row, row-reverse, column &amp; column-reverse</code> as values. The default value is <code>row</code>.</p><p>Using similar markup to the above example, we can add one more CSS property:value pair: (<a\nhref=\"http://jsbin.com/ubugej/2/edit\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">flex-direction: column</a>)</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nul {\n	-webkit-flex-direction: column;\n}\n</pre><div\nclass=\"tutorial_image\"><img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/2071_cssflexbox/flex-direction-example.png\" alt=\"Very basic example\" border=\"0\" /></div><p>If working along, go ahead and try changing the <code>column</code> value on the <code>flex-direction</code> property to <code>column-reverse</code>, and witness how the flexbox items are displayed in a columned layout, but in the reverse order.</p><hr\n/><h2>Wrapping With <code>flex-wrap</code></h2><p>By default, a flexbox is single-line. One which cannot contain its children may overflow using the <code>flex-wrap</code> property; we can instruct the flexbox to become multi-line, in which case the flexbox items can wrap over. <code>flex-wrap</code> accepts the values, <code>nowrap</code> (the default value), <code>wrap</code> &amp; <code>wrap-reverse</code>.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/2071_cssflexbox/flex-direction-example.png\" alt=\"Very basic example\" border=\"0\" /></div><p>Notice how, in the <a\nhref=\"http://jsbin.com/iqarak/edit#html,live\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">demo</a>, the items &#8216;wrap&#8217; over, since they cannot be contained within their small <code>100px</code> parent. Using the developer tools, try toggling the <code>overflow: hidden</code> and <code>-webkit-flex-wrap</code> bits. Without the <code>flex-wrap</code> and <code>overflow</code> properties, the items overflow their parent.</p><p>There&#8217;s a useful shorthand property for <code>flex-direction</code> and <code>flex-wrap</code>, as shown below:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nflex-direction: row;\nflex-wrap: nowrap;\n//Using the two values above with the flex-flow shorthand we get:\nflew-flow: row nowrap;\n//flex-direction: column; flex-wrap: wrap;\nflex-flow: column wrap;\n</pre><hr\n/><h2>A Quickie Example</h2><p>While certainly not the nicest looking there is, this <a\nhref=\"http://jsbin.com/aqunam/edit#html,live\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">example menu</a> demonstrates some uses for flexbox.</p><ul><li>A width of <code>300px</code> has been set on the flexbox, itself, to demonstrate wrapping.</li><li>A general idea for a menu could be to utilize media queries in order to serve a mobile friendly menu, where <code>flex-direction: column</code> might make sense.</li></ul><div\nclass=\"tutorial_image\"><img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/2071_cssflexbox/boring-menu.png\" alt=\"Boring menu\" border=\"0\" /></div><p>What would be nice is to instruct the flexbox items to spread out and use the space they have available to them &#8211; something <a\nhref=\"http://jsbin.com/aqunam/3/edit\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">like this</a>. That&#8217;s what the flex property is for.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><div\nclass=\"tutorial_image\"><img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/2071_cssflexbox/slightly-better-menu.png\" alt=\"Boring menu\" border=\"0\" /></div><hr\n/><h2>Flexing</h2><blockquote><p> Flexing is the ability of the container to alter its width or height to fill the available space.&#8221;</p></blockquote><p>The <code>flex</code> property is a nice feature; it offers something new that would have been difficult to achieve in the past.</p><p>With this property, we can set a preferred size for our items. Do keep in mind that the flex property is applied on flexbox items, not on the flexbox itself. The browser will attempt to set the size of the flexbox items on a <strong>per line basis</strong>. It will then try to evenly distribute the remaining free space on the items. If we look at the <a\nhref=\"http://jsbin.com/aqunam/3/edit\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">menu example</a>, and use the developer tools to discover the computed width of the flexbox items, we&#8217;ll see that it is <strong>78px</strong>. Let&#8217;s investigate further&#8230;</p><div\nclass=\"tutorial_image\"><img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/2071_cssflexbox/computed-style-menu-width.png\" alt=\"The rcomputed width of a flexbox item\" border=\"0\" /></div><p>You&#8217;re probably wondering, <em>&#8220;How did the flexbox items gain their extra space when we set their preferred width to <code>60px</code>?&#8221;</em></p><div\nclass=\"tutorial_image\"><img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/2071_cssflexbox/flexbox-item-computed-style.jpg\" alt=\"The rcomputed width of a flexbox item\" border=\"0\" /></div><ul><li>In the first line, there are three items, which should be around <code>60px</emcode each, because we set that as our preference in the <code>flex</code> property (that&#8217;s a total of <code>180px</code>).</li><li>The width of the entire flexbox is <code>300px</code>. That, minus <code>180px </code> (the total preferred size of the items), is <code>120px</code>. However, it doesn&#8217;t appear that we actually have <code>120px</code> of free space.</li><li> Each flexbox item has a <code>margin-right</code> of <code>10px</code>; that&#8217;s a total of <code>30px</code> for three items, leaving us with <code>90px</code> of free space.</li><li>But wait, each item also has padding: <code>5px</code> &#8211; that&#8217;s <code>5px</code> of padding on the top, right, bottom, and left. So, similar to the <code>margin-right</code> property, each item uses up <code>10px</code> of padding in regard to its width. We&#8217;re left with <code>60px</code> of free space &#8211; well almost.</li><li>Each item has <code>border: 1px solid black</code> &#8211; <code>1px</code> on the left and right sides. A total of two pixels per item, so, for three items, that comes to <code>6px</code>. We&#8217;re now left with <code>54px</code> of free space.</li><li>With <code>54px</code> of free space, we can distribute that equally to the three items on the first line &#8211; that&#8217;s <code>18px</code>, per item, which now makes sense why, when we set a preference of <code>60px</code>, the computed width turned into <code>78px</code>.</li></ul><p>As you may have guessed, the last line (containing the item &#8216;Contact us&#8217;) flexes to the full width of the flexbox.</p><p>Flexbox items can be given different widths; an item with a <code>flex</code> of <code>2</code> is said to be <strong>twice as flexible</strong> as an item with a <code>flex</code> of <code>1</code>. So, when it comes to distributing free space between the two items, the item with a <code>flex</code> of <code>1</code> will be given half the space that the item with a <code>flex</code> of <code>2</code> receives.</p><hr\n/><h2>Ordering</h2><p>Flexbox gives us an easy way to order certain items using CSS, regardless of the order that they appear in the document. Here is a quick <a\nhref=\"http://jsbin.com/upiyoy/edit#html,live\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">example</a>.</p><p>Given the following markup:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;ul&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2&lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n</pre><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nul {\n	display: -webkit-flexbox;\n}\nul li:nth-child(1) {\n	-webkit-flex-order: 2;\n}\n</pre><p>We can target the first list item element using the <a\nhref=\"https://developer.mozilla.org/en/CSS/:nth-child\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'developer.mozilla.org\']);\">nth-child</a> pseudo class, and then apply the <code>flex-order</code> property to it. Flexbox items are, by default, at order <code>0</code>. By placing the first list item at order <code>2</code>, the browser will display items 2 &amp; 3 first, which will be followed by item 1.</p><hr\n/><h2>Alignment</h2><p>We&#8217;re able to align flexbox items on the main axis using the <code>flex-pack</code> property. This property accepts the following as values:</p><ul><li>start</li><li> end</li><li> center</li><li> justify</li><li> distribute</li></ul><p> The demo for this tutorial provides some examples of the different types of alignment. Looking at the <a\nhref=\"http://jsbin.com/oyigap/4/edit\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">jsbin example</a>, we can see that the items have only been centered on one axis: the main axis. This is essentially the axis upon which the flexbox items are placed.</p><p>We can change the axis by adjusting the <code>flex-direction</code> property. By setting it to <code>column</code>, it <a\nhref=\"http://jsbin.com/oyigap/3/edit\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">becomes apparent</a> that the main axis has changed. In order to affect the alignment of the cross axis, (the axis perpendicular to the main axis) we <a\nhref=\"http://jsbin.com/oyigap/5/edit\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">can use <code>flex-align</code>.</a></p><h4>Centering an Item</h4><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div class=&quot;flexbox&quot;&gt;\n	&lt;p&gt;I should be centered&lt;/p&gt;\n&lt;/div&gt;\n</pre><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.flexbox {\n	display: -webkit-flexbox;\n	-webkit-flex-pack: center;\n	-webkit-flex-align: center;\n	width: 50%;\n	height: 100px;\n	background: orange;\n}\n.flexbox p {\n	border: 1px solid green;\n	padding: 5px;\n}\n</pre><p>Definitely check out the <a\nhref=\"http://jsbin.com/upumiw/edit#html,live\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">live demo</a> if you&#8217;re confused.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/2071_cssflexbox/centering-example.png\" alt=\"Centered example\" border=\"0\" /></div><hr\n/><h2>Further Reading</h2><ul><li> <a\nhref=\"http://flexiejs.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'flexiejs.com\']);\">flexiejs</a> offers cross browser support for flexbox.</li><li><a\nhref=\"http://modernizr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'modernizr.com\']);\">Modernizr</a> can detect <a\nhref=\"http://modernizr.com/docs/#flexbox\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'modernizr.com\']);\">support for flexbox</a>.</li><li> <a\nhref=\"http://www.html5rocks.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.html5rocks.com\']);\">html5rocks</a> contains a <a\nhref=\"http://www.html5rocks.com/en/tutorials/flexbox/quick/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.html5rocks.com\']);\">tutorial on flexbox</a></li><li>Alex Russell, who works on Google Chrome, has an interesting set of <a\nhref=\"http://infrequently.org/2009/08/css-3-progress/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'infrequently.org\']);\">CSS classes</a> for using flexbox.</li><li>inserthtml has a fun <a\nhref=\"http://www.inserthtml.com/2012/05/css3-flex-box-specification-change-layout-design/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.inserthtml.com\']);\">tutorial</a> on the flexbox specification, it includes a great set of visuals which can help in understanding certain concepts.</li><li>The book <a\nhref=\"http://www.stunningcss3.com/code/index.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.stunningcss3.com\']);\">Stunning CSS3</a> has a section on flexbox.</li></ul><p>Thanks for reading, and be sure to refer to <a\nhref=\"http://caniuse.com/flexbox\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'caniuse.com\']);\" rel=\"external\" target=\"_blank\" title=\"Can I Use CSS Flexbox\">caniuse.com</a> for a list of browsers that support the flexbox module, as well as which vendor prefixes should be referenced.<div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(17,4,1,1358016708,NULL,' Diving Into CSS Regions ','This tutorial will cover the basics of CSS regions, which allow us to flow content within various sections of the page. Confused? You probably are; read on!(Continue)','This tutorial will cover the basics of CSS regions, which allow us to flow content within various sections of the page. Confused? You probably are; read on!(Continue)',1,0,'diving-into-css-regions',393,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2040_cssRegions/preview-img.jpg','',1),(18,4,1,1358016709,NULL,' Optimize Your CSS With RequireJS ',' In this lesson, we’ll review the awesome RequireJS optimizer to handle the process of merging and compressing our stylesheets. While preprocessors continue to become increasingly popular, there are still plenty of folks who stick with regular CSS. In these cases, a solid build tool/process is vital.(Continue)',' In this lesson, we’ll review the awesome RequireJS optimizer to handle the process of merging and compressing our stylesheets. While preprocessors continue to become increasingly popular, there are still plenty of folks who stick with regular CSS. In these cases, a solid build tool/process is vital.(Continue)',1,0,'optimize-your-css-with-require-js',100,0,'http://tutsplus.s3.amazonaws.com/tutspremium/web-development/149_Next_Generation_JavaScript/images/preview.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-24755\'), post_id: 24755, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p> In this lesson, we&#8217;ll review the awesome <a\nhref=\"http://requirejs.org/docs/optimization.html#download\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'requirejs.org\']);\">RequireJS optimizer</a> to handle the process of merging and compressing our stylesheets. While <a\nhref=\"http://sass-lang.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'sass-lang.com\']);\">preprocessors</a> continue to become increasingly popular, there are still plenty of folks who stick with regular CSS. In these cases, a solid build tool/process is vital.</p><p><span\nid=\"more-24755\"></span></p><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"600\" height=\"437\" src=\"http://www.youtube.com/embed/mC-geGmLQ6Q\" frameborder=\"0\" allowfullscreen></iframe></p><div>Choose <strong>720p</strong> for the clearest video.</div></div><hr\n/><h2>Closing Thoughts</h2><p>If you don&#8217;t like the idea of using Require.js, alternatively you might consider <a\nhref=\"https://github.com/cowboy/grunt\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">Grunt</a> (along with the <a\nhref=\"https://github.com/jzaefferer/grunt-css\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">Grunt-CSS</a> plugin), or <a\nhref=\"http://howtonode.org/intro-to-jake\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'howtonode.org\']);\">Jake</a>.<div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(19,4,1,1358016710,NULL,' Toying With the HTML5 File System API ','HTML5 provides us with a whole crop of new possibilities, such as drawing with canvas, implementing multimedia with the audio and video APIs, and so on. One of these tools, which is still relatively new, is the File System API. It gives us access to a sandboxed section of the user’s local file system, thus filling the gap between desktop and web applications even further! In today’s tutorial, we’ll go through the basics of this new and exciting API, exploring the most common filesystem tasks. Let’s get started!(Continue)','HTML5 provides us with a whole crop of new possibilities, such as drawing with canvas, implementing multimedia with the audio and video APIs, and so on. One of these tools, which is still relatively new, is the File System API. It gives us access to a sandboxed section of the user’s local file system, thus filling the gap between desktop and web applications even further! In today’s tutorial, we’ll go through the basics of this new and exciting API, exploring the most common filesystem tasks. Let’s get started!(Continue)',1,0,'toying-with-the-html5-filesystem-api',373,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2030_fileAPI/HTML5_badge.png',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-24719\'), post_id: 24719, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>HTML5 provides us with a whole crop of new possibilities, such as drawing with <a\nhref=\"http://net.tutsplus.com/sessions/canvas-from-scratch/\" >canvas</a>, implementing multimedia with the <a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/html5-audio-and-video-what-you-must-know/\" >audio and video</a> APIs, and so on. One of these tools, which is still relatively new, is the <a\nhref=\"http://dev.w3.org/2009/dap/file-system/pub/FileSystem/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'dev.w3.org\']);\">File System API</a>. It gives us access to a sandboxed section of the user&#8217;s local file system, thus filling the gap between desktop and web applications even further! In today&#8217;s tutorial, we&#8217;ll go through the basics of this new and exciting API, exploring the most common filesystem tasks. Let&#8217;s get started!</p><p><span\nid=\"more-24719\"></span></p><hr\n/><h2>Introduction</h2><blockquote><p>No longer do we need to download and install a given piece of software in order to use it. Simply a web browser and an internet connection gives us the ability to use any web application, anytime, anywhere, and on any platform.</p></blockquote><p>In short, web apps are cool; but, compared to desktop apps, they still have one significant weakness: they don&#8217;t have a way to interact and organize data into a structured hierarchy of folders &#8211; a real filesystem. Fortunately, with the new Filesystem API, this can be changed. This API gives web applications controlled access to a private local filesystem &#8220;sandbox,&#8221; in which they can write and read files, create and list directories, and so on. Although at the time of this writing only Google&#8217;s Chrome browser supports the &#8220;full&#8221; implementation of the Filesystem API, it still deserves to be studied as a powerful and convenient form of local storage.</p><div\nclass=\"tutorial_image\"> <a\nhref=\"http://caniuse.com/#search=filesystem\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'caniuse.com\']);\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2030_fileAPI/caniuse.jpg\" alt=\"Can I Use Support}\" /></a></div><p>The Filesystem API comes in two different versions. The asynchronous API, which is useful for normal applications, and the synchronous API, reserved for use with web workers. For the purposes of this tutorial, we will exclusively explore the asynchronous version of the API.</p><hr\n/><h2><span>Step 1 &#8211; </span>Getting Started</h2><p>Your first step is to obtain access to the HTML5 Filesystem by requesting a <code>LocalFile</code> System object, using the <code>window.requestFileSystem()</code> global method:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nwindow.requestFileSystem(type, size, successCallback, opt_errorCallback)</pre><blockquote\nclass=\"pullquote\"><p> There&#8217;s no way for a web application to &#8220;break out&#8221; beyond the local root directory.</p></blockquote><p>As the first two parameters, you specify the lifetime and size of the filesystem you want. A <strong>PERSISTENT</strong> filesystem is suitable for web apps that want to store user data permanently. The browser won&#8217;t delete it, except at the user&#8217;s explicit request. A <strong>TEMPORARY</strong> filesystem is appropriate for web apps that want to cache data, but can still operate if the web browser deletes the filesystem. The size of the filesystem is specified in bytes and should be a reasonable upper bound on the amount of data you need to store.</p><p>The third parameter is a callback function that is triggered when the user agent successfully provides a filesystem. Its argument is a <code>FileSystem</code> object. And, lastly, we can add an optional callback function, which is called when an error occurs, or the request for a filesystem is denied. Its argument is a <code>FileError</code> object. Although this parameter is optional, it&#8217;s always a good idea to catch errors for users, as there are a number of places where things can go wrong.</p><p>The filesystem obtained with these functions depends on the origin of the containing document. All documents or web apps from the same origin (host, port, and protocol) share a filesystem. Two documents or applications from different origins have completely distinct and disjoint filesystems. A filesystem is restricted to a single application and cannot access another application&#8217;s stored data. It&#8217;s also isolated from the rest of the files on the user&#8217;s hard drive, which is a good thing: there&#8217;s no way for a web application to &#8220;break out&#8221; beyond the local root directory or otherwise access arbitrary files.</p><p>Let&#8217;s review an example:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">window.requestFileSystem  = window.requestFileSystem || window.webkitRequestFileSystem;\nwindow.requestFileSystem(window.TEMPORARY, 5*1024*1024, initFS, errorHandler);\nfunction initFS(fs){\n  alert(&quot;Welcome to Filesystem! It\'s showtime :)&quot;); // Just to check if everything is OK :)\n  // place the functions you will learn bellow here\n}\nfunction errorHandler(){\n  console.log(\'An error occured\');\n}\n</pre><p>This creates a temporary filesystem with 5MB of storage. It then provides a success callback function, which we will use to operate our filesystem. And, of course, an error handler is also added &#8211; just in case something goes wrong. Here, the <code>errorHandler()</code> function is too generic. So if you want, you can create a slightly optimized version, which gives the reader a more descriptive error message:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">function errorHandler(err){\n var msg = \'An error occured: \';\n  switch (err.code) {\n    case FileError.NOT_FOUND_ERR:\n      msg += \'File or directory not found\';\n      break;\n    case FileError.NOT_READABLE_ERR:\n      msg += \'File or directory not readable\';\n      break;\n    case FileError.PATH_EXISTS_ERR:\n      msg += \'File or directory already exists\';\n      break;\n    case FileError.TYPE_MISMATCH_ERR:\n      msg += \'Invalid filetype\';\n      break;\n    default:\n      msg += \'Unknown Error\';\n      break;\n  };\n console.log(msg);\n};</pre><p>The filesystem object you obtain has a <code>name</code> (a unique name for the filesystem, assigned by the browser) and <code>root</code> property that refers to the root directory of the filesystem. This is a <code>DirectoryEntry</code> object, and it may have nested directories that are themselves represented by <code>DirectoryEntry</code> objects. Each directory in the file system may contain files, represented by <code>FileEntry</code> objects. The <code>DirectoryEntry</code> object defines methods for obtaining <code>DirectoryEntry</code> and <code>FileEntry</code> objects by pathname (they will optionally create new directories or files if you specify a name that doesn&#8217;t exist). <code>DirectoryEntry</code> also defines a <code>createReader()</code> factory method that returns a <code>DirectoryReader</code> object for listing the contents of a directory. The <code>FileEntry</code> class defines a method for obtaining the <code>File</code> object (a Blob) that represents the contents of a file. You can then use a <code>FileReader</code> object  to read the file. <code>FileEntry</code> defines another method to return a <code>FileWriter</code> object that you can use to write content into a file.</p><p>Phhew&#8230;sounds complicated? Don&#8217;t worry. Everything will become clearer as we progress through the examples below.</p><hr\n/><h2><span>Step 2 &#8211; </span>Working With Directories</h2><p>Obviously, the first thing you need to create in a filesystem is some buckets, or directories. Although the root directory already exists, you don&#8217;t want to place all of your files there. Directories are created by the <code>DirectoryEntry</code> object. In the following example, we create a directory, called <code>Documents</code>, within the root directory:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">fs.root.getDirectory(\'Documents\', {create: true}, function(dirEntry) {\n  alert(\'You have just created the \' + dirEntry.name + \' directory.\');\n}, errorHandler);</pre><p>The <code>getDirectory()</code> method is used both to read and create directories. As the first parameter, you can pass either a name or path as the directory to look up or create. We set the second argument to <code>true</code>, because we&#8217;re attempting to create a directory &#8211; not read an existing one. And at the end, we add an error callback.</p><p>So far, so good. We have a directory; let&#8217;s now add a subdirectory. The function is exactly the same with one difference: we change the first argument from &#8216;Documents&#8217; to &#8216;Documents/Music&#8217;. Easy enough; but what if you want to create a subfolder, <code>Sky</code>, with two parent folders, <code>Images</code> and <code>Nature</code>, inside the <code>Documents</code> folder? If you type &#8216;<code>Documents/Images/Nature/Sky</code>&#8216; for the path argument, you will receive an error, because you can&#8217;t create a directory, when its immediate parent does not exist. A solution for this is to create each folder one by one: <code>Images</code> inside <code>Documents</code>, <code>Nature</code> inside <code>Images</code>, and then <code>Sky</code> inside <code>Nature</code>. But this is a very slow and inconvenient process. There is a better solution: to create a function which will create all necessary folders automatically.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nfunction createDir(rootDir, folders) {\n  rootDir.getDirectory(folders[0], {create: true}, function(dirEntry) {\n    if (folders.length) {\n      createDir(dirEntry, folders.slice(1));\n    }\n  }, errorHandler);\n};\ncreateDir(fs.root, \'Documents/Images/Nature/Sky/\'.split(\'/\'));\n</pre><p>With this little trick, all we need to do is provide a full path representing the folders which we want to create. Now, the <code>Sky</code> directory is successfully created, and you can create other files or directories within it.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p>Now it&#8217;s time to check what we have in our filesystem. We&#8217;ll create a <code>DirectoryReader</code> object, and use the <code>readEntries()</code> method to read the content of the directory.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nfs.root.getDirectory(\'Documents\', {}, function(dirEntry){&lt;br&gt;\n  var dirReader = dirEntry.createReader();\n  dirReader.readEntries(function(entries) {&lt;br&gt;\n    for(var i = 0; i &lt; entries.length; i++) {\n      var entry = entries[i];\n      if (entry.isDirectory){\n        console.log(\'Directory: \' + entry.fullPath);\n      }\n      else if (entry.isFile){\n        console.log(\'File: \' + entry.fullPath);\n      }\n    }\n  }, errorHandler);\n}, errorHandler);\n</pre><p>In the code above, the <code>isDirectory</code> and <code>isFile</code> properties are used in order to obtain a different output for directories and files, respectively. Additionally, we use  the <code>fullPath</code> property in order to get the full path of the entry, instead of its name only.</p><p>There are two ways to remove a <code>DirectoryEntry</code> from the filesystem: <code>remove()</code> and <code>removeRecursively()</code>. The first one removes a given directory only if it is empty. Otherwise, you&#8217;ll receive an error.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nfs.root.getDirectory(\'Documents/Music\', {}, function(dirEntry) {\n  dirEntry.remove(function(){\n    console.log(\'Directory successfully removed.\');\n  }, errorHandler);\n}, errorHandler);</pre><p>If the <code>Music</code> folder has files within it, then you need to use the second method, which recursively deletes the directory and all of its contents.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\nfs.root.getDirectory(\'Documents/Music\', {}, function(dirEntry) {\n  dirEntry.removeRecursively(function(){\n    console.log(\'Directory successufully removed.\');\n  }, errorHandler);\n}, errorHandler);</pre><hr\n/><h2><span>Step 3 &#8211; </span>Working With Files</h2><p>Now that we know how to create directories, it&#8217;s time to populate them with files!</p><p>The following example creates an empty <code>test.txt</code> in the root directory:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">fs.root.getFile(\'test.txt\', {create: true, exclusive: true}, function(fileEntry) {\n  alert(\'A file \' + fileEntry.name + \' was created successfully.\');\n}, errorHandler);</pre><p>The first argument to <code>getFile()</code> can be an absolute or relative path, but it must be valid. For instance, it is an error to attempt to create a file, when its immediate parent does not exist. The second argument is an object literal, describing the function&#8217;s behavior if the file does not exist. In this example, <code>create: true</code> creates the file if it doesn&#8217;t exist and throws an error if it does (<code>exclusive: true</code>). Otherwise, if <code>create: false</code>, the file is simply fetched and returned.</p><p>Having an empty file is not very useful, though; so let&#8217;s add some content inside. We can use the <code>FileWriter</code> object for this.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">fs.root.getFile(\'test.txt\', {create: false}, function(fileEntry) {\n  fileEntry.createWriter(function(fileWriter) {\n    window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder;\n    var bb = new BlobBuilder();\n    bb.append(\'Filesystem API is awesome!\');\n    fileWriter.write(bb.getBlob(\'text/plain\'));\n  }, errorHandler);\n}, errorHandler);\n</pre><p>Above, we retrieve the <code>test.txt</code> file, and create a <code>FileWriter</code> object for it. We then append content to it by creating a new <code>BlobBuilder</code> object and using the <code>write()</code> method of <code>FileWriter</code>.</p><p>Calling <code>getFile()</code> only retrieves a <code>FileEntry</code>. It does not return the contents of the file. So, if we want to read the content of the file, we need to use the <code>File</code> object and the <code>FileReader</code> object.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">fs.root.getFile(\'test.txt\', {}, function(fileEntry) {\n  fileEntry.file(function(file) {\n    var reader = new FileReader();\n    reader.onloadend = function(e) {\n      alert(this.result);\n    };\n    reader.readAsText(file);\n  }, errorHandler);\n}, errorHandler);</pre><p>We have written some content to our file, but what if desire to add more at a later date? To append data to an existing file, the <code>FileWriter</code> is used once again. We can reposition the writer to the end of the file, using the <code>seek()</code> method. <code>seek</code> accepts a byte offset as an argument, and sets the file writer&#8217;s position to that offset.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">fs.root.getFile(\'test.txt\', {create: false}, function(fileEntry) {\n  fileEntry.createWriter(function(fileWriter) {\n    fileWriter.seek(fileWriter.length);\n    window.BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder;\n    var bb = new BlobBuilder();\n    bb.append(\'Yes, it is!\');\n    fileWriter.write(bb.getBlob(\'text/plain\'));\n  }, errorHandler);\n}, errorHandler);\n</pre><p>To remove a file from the filesystem, simply call <code>entry.remove()</code>. The first argument to this method is a zero-parameter callback function, which is called when the file is successfully deleted. The second is an optional error callback if any errors occur.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">fs.root.getFile(\'test.txt\', {create: false}, function(fileEntry) {\n  fileEntry.remove(function() {\n    console.log(\'File successufully removed.\');\n  }, errorHandler);\n}, errorHandler);\n</pre><hr\n/><h2><span>Step 4 &#8211; </span>Manipulating Files and Directories</h2><p><code>FileEntry</code> and <code>DirectoryEntry</code> share the same API methods for copying, moving and renaming entries. There are two methods you can use for these operations: <code>copyTo()</code> and <code>moveTo()</code>. They both accept the exact same parameters:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">copyTo(parentDirEntry, opt_newName, opt_successCallback, opt_errorCallback);\nmoveTo(parentDirEntry, opt_newName, opt_successCallback, opt_errorCallback);\n</pre><p>The first parameter is the parent folder to move/copy the entry into. The second is an optional new name to give the moved/copied entry, which is actually required when you copy an entry in the same folder; otherwise you will get an error. The third and fourth parameters were explained previously.</p><p>Let&#8217;s review some simple examples. In the following one, we copy the file <code>test.txt</code> from the <code>root</code> to the <code>Documents</code> directory.</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">function copy(currDir, srcEntry, destDir) {\n  currDir.getFile(srcEntry, {}, function(fileEntry) {\n    currDir.getDirectory(destDir, {}, function(dirEntry) {\n      fileEntry.copyTo(dirEntry);\n    }, errorHandler);\n  }, errorHandler);\n}\ncopy(fs.root, \'test.txt\', \'Documents/\');</pre><p>This next example moves <code>test.txt</code> to <code>Documents</code>, instead of copying it:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">function move(currDir, srcEntry, dirName) {\n  currDir.getFile(srcEntry, {}, function(fileEntry) {\n    currDir.getDirectory(dirName, {}, function(dirEntry) {\n      fileEntry.moveTo(dirEntry);\n    }, errorHandler);\n  }, errorHandler);\n}\nmove(fs.root, \'test.txt\', \'Documents/\');</pre><p>The following example renames <code>test.txt</code> to <code>text.txt</code>:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">function rename(currDir, srcEntry, newName) {\n  currDir.getFile(srcEntry, {}, function(fileEntry) {\n    fileEntry.moveTo(currDir, newName);\n  }, errorHandler);\n}\nrename(fs.root, \'test.txt\', \'text.txt\');</pre><hr\n/><h2>Learn More</h2><p>In this introductory tutorial, we&#8217;ve only scratched the surface of the different filesystem interfaces. If you want to learn more and dig deeper into Filesystem API, you should refer to the W3C specifications specifications:</p><ul><li><a\nhref=\"http://www.w3.org/TR/file-system-api/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.w3.org\']);\">File API: Directories and System</a></li><li><a\nhref=\"http://www.w3.org/TR/file-writer-api/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.w3.org\']);\">File API: Writer</a></li><li><a\nhref=\"http://www.w3.org/TR/file-upload/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.w3.org\']);\">File API</a></li></ul><p>Now that you have a basic understanding of what the Filesystem API is, and how it can be used, it should be considerably easier to understand the API documentation, which can be a bit confusing at first sight.</p><hr\n/><h2>Conclusion</h2><p>The Filesystem API is a powerful and easy to use technology, which provides web developers with a whole crop of new possibilities when building web applications. Admittedly, it&#8217;s still quite new and not widely supported by all major browsers, but this will certainly change in the future. You might as well get a head start!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(20,4,1,1358016711,NULL,' CSS Refreshers: Borders ','Sure, we’re all familiar with borders. Is there anything new that could possibly be introduced? Well, I bet there’s quite a few things in this article that you never knew about!Not only can CSS3 be used to create rounded corners, but plain-ole’ CSS can also be wrestled into displaying custom shapes. That’s right; in the past, before these techniques were discovered, we might have resorted to using absolutely positioned background images to display circles or arrows. Thankfully – as we gleefully take one more step away from Photoshop – this is no longer the case.','Sure, we’re all familiar with borders. Is there anything new that could possibly be introduced? Well, I bet there’s quite a few things in this article that you never knew about!Not only can CSS3 be used to create rounded corners, but plain-ole’ CSS can also be wrestled into displaying custom shapes. That’s right; in the past, before these techniques were discovered, we might have resorted to using absolutely positioned background images to display circles or arrows. Thankfully – as we gleefully take one more step away from Photoshop – this is no longer the case.',1,0,'css-refreshers-borders',262,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/css-borders-preview.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-24655\'), post_id: 24655, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Sure, we&rsquo;re all familiar with borders. Is there anything new that could possibly be introduced? Well, I bet there&rsquo;s quite a few things in this article that you never knew about!</p><p>Not only can CSS3 be used to create rounded corners, but plain-ole&#8217; CSS can also be wrestled into displaying custom shapes. That&rsquo;s right; in the past, before these techniques were discovered, we might have resorted to using absolutely positioned background images to display circles or arrows. Thankfully &#8211; as we gleefully take one more step away from Photoshop &#8211; this is no longer the case.</p><p><span\nid=\"more-24655\"></span></p><hr\n/><h2>The Basics</h2><p>You&rsquo;re likely familiar with the most basic use of borders.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">border: 1px solid black;\n</pre><p>The above code will apply a <code>1px</code> border to an element. Plain and simple; but we can also modify the syntax a bit.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">border-width: thick;\nborder-style: solid;\nborder-color: black;\n</pre><p>In addition to passing a specific value to <code>border-width</code>, three keywords may alternatively be used: <code>thin</code>, <code>medium</code>, and <code>thick</code>.</p><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/border-width.jpg\" alt=\"image\" /></div><p>While it might initially seem unnecessary to ever make use of the <em>long-hand</em> form, there are a handful of cases when it&rsquo;s advantageous, such as when you need to update some aspect of a border when a designated event occurs.</p><p>Perhaps you need to change the color of a border when the user hovers over a specific element. Using the shorthand form would require that you repeat the pixel values.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.box {\n    border: 1px solid red;\n}\n.box:hover {\n    border: 1px solid green;\n}\n</pre><p>A more elegant and DRY approach would be to specifically update the <code>border-color</code> property.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.box {\n    border: 1px solid red;\n}\n.box:hover {\n    border-color: green;\n}\n</pre><p>Additionally, as you&rsquo;ll find shortly, this <em>long-hand</em> technique is helpful when creating custom shapes with CSS.</p><hr\n/><h2>Border-Radius</h2><p><code>border-radius</code> is the golden child of CSS3 &#8211; the first new property to gain widespread use in the community. What this translates to is that, excluding Internet Explorer 8 and below, all browsers can display rounded corners.</p><p>Previously, it was necessary to use vendor prefixes for both Webkit and Mozilla, in order for the styling to be correctly applied.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">-webkit-border-radius: 10px;\n-moz-border-radius: 10px;\nborder-radius: 10px;\n</pre><p>These days, however, we can slice off the vendor versions without worry, and simply stick with the official form: <code>border-radius</code>.</p><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/border-radius.jpg\" alt=\"image\" /></div><p>As one might expect, we can also specify custom values for each side of a box.</p><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/each-side.jpg\" alt=\"image\" /></div><pre class=\"brush: css; title: ; notranslate\" title=\"\">border-top-left-radius: 20px;\nborder-top-right-radius: 0;\nborder-bottom-right-radius: 30px;\nborder-bottom-left-radius: 0;\n</pre><p>In the code above, setting <code>border-top-right-radius</code> and <code>border-bottom-left-radius</code> to zero would be superfluous, unless the element is inheriting values which need to be reset.</p><p>Much like <code>margin</code> or <code>padding</code>, these settings can be condensed into a single property, if necessary.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">/* top left, top right, bottom right, bottom left */\nborder-radius: 20px 0 30px 0;\n</pre><p>As an example (and as web designers do <em>so</em> often), the shape of a lemon can be reproduced with CSS and the <code>border-radius</code> property, like so:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.lemon {\n   width: 200px; height: 200px;\n   background: #F5F240;\n   border: 1px solid #F0D900;\n   border-radius: 10px 150px 30px 150px;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/lemon.jpg\" alt=\"image\" /></div><hr\n/><h2>Beyond the Basics</h2><p>Many designers happily stick with the knowledge outlined thus far in this chapter; however, there&rsquo;s a few ways we can push it further!</p><hr\n/><h2>Multiple Borders</h2><p>There&rsquo;s a variety of techniques that we can refer to, when tasked with applying multiple borders to an element.</p><h4>Border-Style</h4><p>While <code>solid</code>, <code>dashed</code>, and <code>dotted</code> are the most frequent values for the <code>border-style</code> property, there&rsquo;s also a few others that we can make use of, including <code>groove</code> and <code>ridge</code>.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">border: 20px groove #e3e3e3;\n</pre><p>Or, with the long-hand form:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">border-color: #e3e3e3;\nborder-width: 20px;\nborder-style: groove;\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/groove-ridge.jpg\" alt=\"image\" /></div><p>While this is certainly helpful, a <em>ridge</em> or <em>groove</em> effect isn&rsquo;t really multiple borders.</p><h4>Outline</h4><p>The most popular technique for creating two borders is to take advantage of the <code>outline</code> property.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.box {\n   border: 5px solid #292929;\n   outline: 5px solid #e3e3e3;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/outline.jpg\" alt=\"image\" /></div><p>This method works wonderfully, however, it&rsquo;s limited to two borders. Should you need to create a layered, gradient-esque, effect, a different approach will be necessary.</p><h4>Pseudo Elements</h4><p>When the <code>outline</code> technique doesn&rsquo;t suffice, an alternate approach is to take advantage of the <code>:before</code> and <code>:after</code> pseudo elements, and apply any necessary additional borders to the generated content.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.box {\n  width: 200px; height: 200px;\n  background: #e3e3e3;\n  position: relative;\n  border: 10px solid green;\n}\n/* Create two boxes with the same width of the container */\n.box:after, .box:before {\n  content: \'\';\n  position: absolute;\n  top: 0; left: 0; bottom: 0; right: 0;\n}\n.box:after {\n  border: 5px solid red;\n  outline: 5px solid yellow;\n}\n.box:before {\n  border: 10px solid blue;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/pseudo-borders.jpg\" alt=\"image\" /></div><p>This perhaps isn&rsquo;t the most elegant approach, but it certainly gets the job. One caveat is that it&rsquo;s easy to confuse the order in which the border colors will be applied. A certain level of &ldquo;guess and check&rdquo; is often required to apply the correct sequence.</p><h4>Box-Shadow</h4><p>The <em>cool kids</em> way to create an infinite number of borders is to take advantage of the <code>spread</code> parameter in the <code>box-shadow</code> CSS3 property.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.box {\n    border: 5px solid red;\n     box-shadow:\n       0 0 0 5px green,\n       0 0 0 10px yellow,\n       0 0 0 15px orange;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/box-shadow.jpg\" alt=\"image\" /></div><p>In this case, we&rsquo;re being clever and are using <code>box-shadow</code> in a way that might not necessarily have been intended when the specification was originally written.</p><p>By setting the <code>x</code>, <code>y</code>, and <code>blur</code> components to <code>0</code>, we can instead use the <code>spread</code> value to create solid borders at the desired locations. Because <code>box-shadow</code>s can be stacked, through the use of a comma, the number of possible levels is infinite.</p><p>This technique gracefully degrades quite nicely. In older browsers, which do not recognize the <code>box-shadow</code> property, this will simply render the single red <code>5px</code> border.</p><blockquote><p>Remember: designs needn&rsquo;t be identical in all browsers. Write your CSS for the most modern of browsers, and then provide suitable fallbacks, accordingly.</p></blockquote><hr\n/><h2>Modifying Angles</h2><p>In addition to passing a single value to <code>border-radius</code>, we can alternatively provide two &#8211; separated by a <code>/</code> &#8211; to specify unique values for both the horizontal and vertical radii.</p><p>For example&hellip;</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">border-radius: 50px / 100px; /* horizontal radius, vertical radius */\n</pre><p>&hellip;is equivalent to:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">border-top-left-radius: 50px 100px;\nborder-top-right-radius: 50px 100px;\nborder-bottom-right-radius: 50px 100px;\nborder-bottom-left-radius: 50px 100px;\n</pre><p>This technique is particularly helpful when you need to mimic a subtle, lengthy curve, rather than a generic rounded corner. For instance, the following code allows us to slightly break away from a square shape, resulting in more of a curled, paper-like effect.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.box {\n    width: 200px; height: 200px;\n    background: #666;\n    border-top-left-radius: 15em 1em;\n    border-bottom-right-radius: 15em 1em;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/subtle-curve.jpg\" alt=\"image\" /></div><hr\n/><h2>CSS Shapes</h2><p>Perhaps the neatest use of borders is when they&rsquo;re cleverly applied to elements, which have a zero width and height. Confusing, huh? Let&rsquo;s see a demonstration.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p>For the next several examples, assume the following markup&hellip;</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;\n</pre><p>…and the following <em>base</em> styling:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.box {\n   width: 200px;\n   height: 200px;\n   background: black;\n}\n</pre><p>The most frequently referenced example, when demonstrating how CSS shapes might be used in a project, is to create the obligatory arrow.</p><p>The key to understanding how an arrow might be formed with CSS is to set a unique <code>border-color</code> to each side, and then reduce both the <code>width</code> and <code>height</code> values for the container to <code>0</code>.</p><p>Assuming a <code>div</code> with a class of <code>arrow</code> as the container:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.arrow {\n  width: 0; height: 0;\n  border-top: 100px solid red;\n  border-right: 100px solid green;\n  border-bottom: 100px solid blue;\n  border-left: 100px solid yellow;\n}\n</pre><p>As demonstrated at the beginning of this chapter, a cleaner syntax would be to <em>not</em> use the all-encompassing short-hand version:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.arrow {\n  width: 0; height: 0;\n  border: 100px solid;\n  border-top-color: red;\n  border-right-color: green;\n  border-bottom-color: blue;\n  border-left-color: yellow;\n}\n</pre><p>We can even reduce this further, by grouping the color values.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.arrow {\n  width: 0; height: 0;\n  border: 100px solid;\n  border-color: red green blue yellow;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/all-side-colors.jpg\" alt=\"image\" /></div><p>Interesting, right? It makes perfect sense, though, when we take a step back. That&rsquo;s the only possible way that the colors could align, assuming a <code>width</code> and <code>height</code> of zero for the container. Now, what if we set all of the border-colors to transparent, except for the blue side?</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.arrow {\n  width: 0; height: 0;\n  border: 100px solid;\n  border-bottom-color: blue;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/single-border.jpg\" alt=\"image\" /></div><p>Excellent! But it doesn&rsquo;t seem too semantic to create an <code>.arrow</code> <code>div</code>, all for the purpose of adding an arrow to the page. Instead, pseudo elements can be used to apply the arrow after or before the associated element.</p><h4>Creating a Speech Bubble</h4><p>To create a 100% CSS speech bubble, we begin with the markup.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;div class=&quot;speech-bubble&quot;&gt;Hi there!&lt;/div&gt;\n</pre><p>Next, some <em>base</em> styling should be applied.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.speech-bubble {\n    position: relative;\n    background-color: #292929;\n    width: 200px;\n    height: 150px;\n    line-height: 150px; /* vertically center */\n    color: white;\n    text-align: center;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/bubble-base-styling.jpg\" alt=\"image\" /></div><p>The arrow will be applied using the <code>after</code> psuedo-element.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.speech-bubble:after {\n    content: \'\';\n}\n</pre><blockquote><p>The <code>:before</code> and <code>:after</code> psuedo elements can be used to insert generated content either before or after an element&rsquo;s content.</p></blockquote><p>At this point, it&rsquo;s simply a matter of reproducing the arrow, and positioning it in the proper location. We start by absolutely positioning the content, resetting the <code>width</code> and <code>height</code>, and applying the border colors.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.speech-bubble:after {\n  content: \'\';\n  position: absolute;\n  width: 0;\n  height: 0;\n  border: 10px solid;\n  border-color: red green blue yellow;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/ap-pos.jpg\" alt=\"image\" /></div><p>Because we know that we want the arrow to point downward, the image above demonstrates that all but the red (or top) border should either be omitted, or set to transparent.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.speech-bubble:after {\n  content: \'\';\n  position: absolute;\n  width: 0;\n  height: 0;\n  border: 10px solid;\n  border-top-color: red;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/redsquare.jpg\" alt=\"image\" /></div><p>When creating CSS shapes, because we can&rsquo;t use the <code>width</code> property to specify how wide the arrow should be, the <code>border-width</code> property should be used instead. In this case, the arrow should be slightly larger; so the <code>border-width</code> can be increased to <code>15px</code>. We&rsquo;ll also position the arrow at the bottom and center of the container, by using the <code>top</code> and <code>left</code> properties, respectively.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.speech-bubble:after {\n  content: \'\';\n  position: absolute;\n  width: 0;\n  height: 0;\n  border: 15px solid;\n  border-top-color: red;\n  top: 100%;\n  left: 50%;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/red-pos.jpg\" alt=\"image\" /></div><p>Almost there; the final step is to update the color of the arrow to be the same as the container&rsquo;s background. The positioning also needs to be modified to account for the width of the borders (<code>15px</code>). While we&rsquo;re here, we&rsquo;ll also apply a subtle <code>border-radius</code> to make the container appear to be more bubble-like.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.speech-bubble {\n   /* … other styles */\n   border-radius: 10px;\n}\n.speech-bubble:after {\n  content: \'\';\n  position: absolute;\n  width: 0;\n  height: 0;\n  border: 15px solid;\n  border-top-color: #292929;\n  top: 100%;\n  left: 50%;\n  margin-left: -15px; /* adjust for border width */\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/final.jpg\" alt=\"image\" /></div><p>Not bad, ay? Abstract this code away to a few reusable classes, and you&rsquo;re good to go for all future projects.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">/*\n   Speech Bubbles\n   Usage: Apply a class of .speech-bubble and .speech-bubble-DIRECTION\n   &lt;div class=&quot;speech-bubble speech-bubble-top&quot;&gt;Hi there&lt;/div&gt;\n*/\n.speech-bubble {\n  position: relative;\n  background-color: #292929;\n  width: 200px;\n  height: 150px;\n  line-height: 150px; /* vertically center */\n  color: white;\n  text-align: center;\n  border-radius: 10px;\n  font-family: sans-serif;\n}\n.speech-bubble:after {\n  content: \'\';\n  position: absolute;\n  width: 0;\n  height: 0;\n  border: 15px solid;\n}\n/* Position the Arrow */\n.speech-bubble-top:after {\n  border-bottom-color: #292929;\n  left: 50%;\n  bottom: 100%;\n  margin-left: -15px;\n}\n.speech-bubble-right:after {\n  border-left-color: #292929;\n  left: 100%;\n  top: 50%;\n  margin-top: -15px;\n}\n.speech-bubble-bottom:after {\n  border-top-color: #292929;\n  top: 100%;\n  left: 50%;\n  margin-left: -15px;\n}\n.speech-bubble-left:after {\n  border-right-color: #292929;\n  top: 50%;\n  right: 100%;\n  margin-top: -15px;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/bubbles.jpg\" alt=\"image\" /></div><h4>Bonus: Better Vertical Centering</h4><p>One downside to using <code>line-height</code> to vertically center text is that you&rsquo;re limited to a single line. Should the text require two or more lines, each line height will be far too large. A clever solution is to set a <code>display</code> of <code>table</code> to the speech bubble, and a <code>display</code> of <code>table-cell</code> to the paragraph that wraps the text. This then allows us to align the text to the middle, accordingly.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;div class=&quot;speech-bubble speech-bubble-top&quot;&gt;\n    &lt;p&gt;Text goes here.&lt;/p&gt;\n&lt;/div&gt;\n</pre><p>Next, the modified CSS.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">.speech-bubble {\n /* other styles */\n  display: table;\n}\n.speech-bubble p {\n  display: table-cell;\n  vertical-align: middle;\n}\n</pre><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/displayTableCell.jpg\" alt=\"image\" /></div><blockquote><p>If references to <code>display: table</code> bring back terrible memories of old-fashioned, table-based layouts, don&rsquo;t worry. These properties merely refer to the style in which an element should display.</p></blockquote><p>We&rsquo;re not limited to triangles; CSS is capable of producing all sorts of shapes &#8211; even hearts and biohazard signs!</p><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2027_borders/images/biohazard.jpg\" alt=\"image\" /></div><pre class=\"brush: css; title: ; notranslate\" title=\"\">.biohazard {\n  width: 0; height: 0;\n  border: 60px solid;\n  border-radius: 50%;\n  border-top-color: black;\n  border-bottom-color: black;\n  border-left-color: yellow;\n  border-right-color: yellow;\n}\n</pre><hr\n/><h2>Summary</h2><p>Though it&rsquo;s true that the simple <code>border: 1px solid black</code> syntax goes a long way, if we&rsquo;re clever, we can create a variety of helpful effects, icons, and shapes. Who would have thought that borders could be so powerful? The key is to remember that the styling for common shapes or speech bubbles should only be created once, and then abstracted away to utility classes for future usage.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(21,3,1,1358049610,NULL,' Quick Tip: Deploy PHP to Heroku in Seconds ','We’ve raved about the brilliance of Heroku before, mostly around the fact that it makes launching a Rails or Node app rather simple without having to configure your own server. But what if you want the same kind of freedom and speed of deployment with PHP? Fortunately, Heroku has quietly offered support for PHP for quite some time.(Continue)','We’ve raved about the brilliance of Heroku before, mostly around the fact that it makes launching a Rails or Node app rather simple without having to configure your own server. But what if you want the same kind of freedom and speed of deployment with PHP? Fortunately, Heroku has quietly offered support for PHP for quite some time.(Continue)',1,0,'quick-tip-deploy-php-to-heroku-in-seconds',230,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2139_phpheroku/heroku.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-27657\'), post_id: 27657, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>We&#8217;ve raved about the brilliance of <a\nhref=\"http://www.heroku.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.heroku.com\']);\">Heroku</a> before, mostly around the fact that it makes launching a Rails or Node app rather simple without having to configure your own server. But what if you want the same kind of freedom and speed of deployment with PHP? Fortunately, Heroku has quietly offered support for PHP for quite some time.</p><p><span\nid=\"more-27657\"></span></p><hr/><h2>Make Sure You Have the Heroku Toolbelt</h2><p>For Heroku deployment, you need the provided <a\nhref=\"https://toolbelt.heroku.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'toolbelt.heroku.com\']);\" target=\"_blank\">command line toolbelt</a>. Follow the instructions on the same page; they&#8217;ll walk you through setting up the Heroku command line toolbelt with your <a\nhref=\"https://api.heroku.com/signup\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'api.heroku.com\']);\" target=\"_blank\">Heroku account</a>.</p><hr/><h2>Ready, Set, Deploy</h2><p>First, create an <code>index.php</code> file within your application&#8217;s directory, and type the following code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;?php\n# This function reads your DATABASE_URL configuration automatically set by Heroku\n# the return value is a string that will work with pg_connect\nfunction pg_connection_string() {\n  // we will fill this out next\n}\n# Establish db connection\n$db = pg_connect(pg_connection_string());\nif (!$db) {\n	echo &quot;Database connection error.&quot;\n	exit;\n}\n$result = pg_query($db, &quot;SELECT statement goes here&quot;);\n?&gt;\n</pre><p>This code uses <a\nhref=\"http://php.net/manual/en/function.pg-connect.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'php.net\']);\">pg_connect</a> to connect to your automatically created Heroku Postgres database. We don&#8217;t have the connection information yet; we&#8217;ll have to wait until after we create our Heroku repository. Let&#8217;s do that now. From your project directory, run the following commands:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n	&gt; git init\n	&gt; git add .\n	&gt; heroku create\n	...\n</pre><p>This automatically creates your project and adds the repository as the &#8220;<code>heroku</code>&#8221; branch. Now run the following commands to deploy the project:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n	&gt; git push heroku master\n	&gt; heroku addons:add heroku-postgresql:ronin # this will return something like the following\n	Adding heroku-postgresql on intense-harbor-6679... done, v8 (free)\n	Attached as HEROKU_POSTGRESQL_PINK\n	Database has been created and is available\n	&gt; heroku pg:credentials COLOR\n	&quot;dbname=abcdefg host=****.amazonaws.com port=5432 user=**** password=**** sslmode=require&quot;\n</pre><p>This final command should return a credentials string that you can use in your <code>index.php</code> file (or anywhere you need a database connection).</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;?php\n# This function reads your DATABASE_URL configuration automatically set by Heroku\n# the return value is a string that will work with pg_connect\nfunction pg_connection_string() {\n  return &quot;dbname=abcdefg host=****.amazonaws.com port=5432 user=**** password=**** sslmode=require&quot;;\n}\n# Establish db connection\n$db = pg_connect(pg_connection_string());\nif (!$db) {\n	echo &quot;Database connection error.&quot;\n	exit;\n}\n$result = pg_query($db, &quot;SELECT statement goes here&quot;);\n?&gt;\n</pre><p>To view your <code>index.php</code> on Heroku, run <code>heroku open</code>, which simply opens the project in your browser.</p><hr/><h2>Conclusion</h2><p>That&#8217;s it! There&#8217;s plenty more that you can learn about Heroku, but this will get you deployed and connected to a database in less than 5 minutes.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(22,3,1,1358049611,NULL,' How to Use Selenium 2 With PHPUnit ','In this lesson, we will learn how to work with Selenium 2 directly within PHPUnit. For those unfamiliar, Selenium gives us an easy way to automate the browser. This makes it perfect for writing user acceptances tests.(Continue)','In this lesson, we will learn how to work with Selenium 2 directly within PHPUnit. For those unfamiliar, Selenium gives us an easy way to automate the browser. This makes it perfect for writing user acceptances tests.(Continue)',1,0,'how-to-use-selenium-2-with-phpunit',340,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2134_PHPUnit_With_Selenium/phpunit-and-selenium.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2134_PHPUnit_With_Selenium/seleniumTut.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div><div\nclass=\"session-post\"><em>This entry is part 9 of 12 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/test-driven-php/\" >Test-Driven PHP</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/php/hands-on-unit-testing-with-phpunit/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/articles/interviews/chatting-with-the-grumpy-php-programmer\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/articles/news/its-time-to-dig-in/\" >It\'s Time to Dig In</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/\" >The Newbie\'s Guide to TDD</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/test-driven-development-in-php-first-steps/\" >First Steps</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/automatic-testing-for-tdd-with-php/\" >Automatic Testing</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/lets-tdd-a-simple-app-in-php/\" >Let\'s TDD a Simple App</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/deciphering-testing-jargon/\" >Deciphering Testing Jargon</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/all-about-mocking-with-phpunit/\" >All About Mocking in PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/hands-on-unit-testing-with-phpunit/\" >Hands-On Testing With PHPUnit</a></li><li>How to Use Selenium 2 With PHPUnit</li><li><a\nhref=\"http://net.tutsplus.com/articles/interviews/chatting-with-the-grumpy-php-programmer\" >Chatting With The Grumpy PHP Programmer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/evolving-toward-a-persistence-layer/\" >Evolving Toward a Persistence Layer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/mockery-a-better-way/\" >Mockery: A Better Way</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-27577\'), post_id: 27577, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this lesson, we will learn how to work with <a\nhref=\"http://seleniumhq.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'seleniumhq.org\']);\">Selenium 2</a> directly within PHPUnit. For those unfamiliar, Selenium gives us an easy way to automate the browser. This makes it perfect for writing user acceptances tests.</p><p><span\nid=\"more-27577\"></span></p><div\nclass=tutorial_image> <iframe\nwidth=\"600\" height=\"375\" src=\"http://www.youtube.com/embed/zva_GETXimI\" frameborder=\"0\" allowfullscreen></iframe></p><div>Choose <strong>720p</strong> for the clearest picture.</div></div><hr\n/><h2>Show Links</h2><ul><li><a\nhref=\"http://www.phpunit.de/manual/current/en/index.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.phpunit.de\']);\">PHPUnit</a><li><a\nhref=\"http://seleniumhq.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'seleniumhq.org\']);\">Selenium</a><li><a\nhref=\"http://www.phpunit.de/manual/current/en/selenium.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.phpunit.de\']);\">PHPUnit Selenium Documentation</a><li><a\nhref=\"https://github.com/sebastianbergmann/phpunit-selenium/blob/master/Tests/Selenium2TestCaseTest.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">PHPUnit Selenium Test Examples</a></ul><hr\n/><h2>Closing Notes</h2><p>I&#8217;m relatively new to working with Selenium, so, if any of you have some tips or advice related to improving workflow, definitely chime in below! I&#8217;m currently researching the best way to speed up the tests, or, at the very least, hide the browser during tests. Have you found a good way to deal with this? Virtual machines?<div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(23,3,1,1358049612,NULL,' Deciphering Testing Jargon ','Lately, we’ve been hearing and reading more and more about test-driven development. This domain, however, comes with a series of expressions and specific jargon that can be confusing to newcomers. This article will walk you through the most common definitions, test types and test parts. Use cases will be provided, and, where possible, some code in PHP will also be presented.(Continue)','Lately, we’ve been hearing and reading more and more about test-driven development. This domain, however, comes with a series of expressions and specific jargon that can be confusing to newcomers. This article will walk you through the most common definitions, test types and test parts. Use cases will be provided, and, where possible, some code in PHP will also be presented.(Continue)',1,0,'deciphering-testing-jargon',125,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2133_DecipheringTestingJargon/Images/preview.png','<div\nclass=\"session-post\"><em>This entry is part 6 of 12 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/test-driven-php/\" >Test-Driven PHP</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/php/lets-tdd-a-simple-app-in-php/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/php/all-about-mocking-with-phpunit/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/articles/news/its-time-to-dig-in/\" >It\'s Time to Dig In</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/\" >The Newbie\'s Guide to TDD</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/test-driven-development-in-php-first-steps/\" >First Steps</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/automatic-testing-for-tdd-with-php/\" >Automatic Testing</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/lets-tdd-a-simple-app-in-php/\" >Let\'s TDD a Simple App</a></li><li>Deciphering Testing Jargon</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/all-about-mocking-with-phpunit/\" >All About Mocking in PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/hands-on-unit-testing-with-phpunit/\" >Hands-On Testing With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/how-to-use-selenium-2-with-phpunit/\" >How to Use Selenium 2 With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/articles/interviews/chatting-with-the-grumpy-php-programmer\" >Chatting With The Grumpy PHP Programmer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/evolving-toward-a-persistence-layer/\" >Evolving Toward a Persistence Layer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/mockery-a-better-way/\" >Mockery: A Better Way</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-27513\'), post_id: 27513, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Lately, we&#8217;ve been hearing and reading more and more about test-driven development. This domain, however, comes with a series of expressions and specific jargon that can be confusing to newcomers. This article will walk you through the most common definitions, test types and test parts. Use cases will be provided, and, where possible, some code in PHP will also be presented.</p><p><span\nid=\"more-27513\"></span></p><hr\n/><h2>First Day at a New Job</h2><p>A few years ago, a new programmer was hired to a development team. As any other newcomer, he was quite confused on his first day. As he listened to the discussions around him in the office, a lot of testing specific terms were used. These were expressions unknown to our fictional new programmer.</p><p>Fortunately for him, this being his first day at work, the two colleagues were later assigned to explain all this jargon to him. They began with a list of terms related to the inner workings of a test case.</p><h3>Automated Test</h3><p><i>Software testing software</i> is practically an automated test. Test automation has been around since before the PC; the first automated testing frameworks appeared in the times of mainframes and consoles. Today, automated testing is the obvious way to go. Why? Because testing is a tedious and repetitive task &#8211; something not well suited for human beings. Automated testing is considerably faster, and more precise than manual testing. And no, it doesn&#8217;t eliminate the human tester or a QA team from the scheme. It simply makes them do a more human suited job, and allow them to do it well.</p><h3>Setup / Exercise / Verify / Teardown</h3><p>Any test should be breakable into four parts:</p><ul><li><strong>Setup</strong> &#8211; whatever needs to be prepared before the code can be run</li><li><strong>Exercise</strong> &#8211; run the code we want to test</li><li><strong>Verify</strong> &#8211; compare the result of the run with some expected condition</li><li><strong>Teardown</strong> &#8211; cleanup all the extra stuff we used for testing so that the system is in the same state as it was before we started the current test (the state from before the <i>Setup</i> step).</li></ul><blockquote><p>We design each test to have four distinct phases that are executed in sequence: fixture setup, exercise SUT, result verification, and fixture teardown. &#8211; <a\nhref=\"http://enva.to/QQw6ci\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'enva.to\']);\">xUnit Test Patterns: Refactoring Test Code</a>, by Gerard Meszaros</p></blockquote><h3>A Test Fixture</h3><p>A Fixture represents all the information that the test needs in order to be exercised. A fixture can be as simple as creating a plain object, like <i>$testedObject = new RealObject();</i>, or something as complicated as populating databases and starting user interfaces.</p><blockquote><p>Everything a system under test (SUT) needs to have in place so that we can exercise the SUT for the purpose of verifying its behavior. &#8211; xUnit Test Patterns: Refactoring Test Code by Gerard Meszaros</p></blockquote><h3>SUT: The System Under Test</h3><p>You probably observed this recurring term. Programmers will usually refer to it as <i>SUT</i>. It represents all the things required to be tested. Depending on the type of the test (see below for test types) the SUT can be many things from a method or a class to the whole system.</p><blockquote><p>Whatever thing we are testing. The SUT is always defined from the perspective of the test. &#8211; <a\nhref=\"http://enva.to/QQw6ci\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'enva.to\']);\">xUnit Test Patterns: Refactoring Test Code</a>, by Gerard Meszaros</p></blockquote><hr\n/><h2>Discovering More &#8230;</h2><p>Starting his second day on the job, our programmer wrote his first test. It was more difficult than he anticipated. To write it, he needed a <i>testing framework</i>, and he had to create a <i>test case</i> and then run all the <i>test methods</i>. There were also a handful of strange dependencies that he needed to figure out. It seemed that learning about <i>DOC</i> was on schedule.</p><h3>Testing Framework</h3><p>A testing framework is an application that is specifically designed for testing code in a specific language. The concept of a <i>test framework</i> was pioneered by Kent Beck in the early &#8217;90s. His work later led to a framework for SmallTalk, called SmalltalkUnit, and afterwards renamed to <i>SUnit</i>.</p><blockquote><p>Smalltalk has suffered because it lacked a testing culture. This column describes a simple testing strategy and a framework to support it. The testing strategy and framework are not intended to be complete solutions, but rather a starting point from which industrial strength tools and procedures can be constructed. &#8211; <a\nhref=\"http://enva.to/VK2fH8\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'enva.to\']);\">Simple Smalltalk Testing: With Patterns</a>, by Kent Beck</p></blockquote><p>It was the first <i>xUnit</i> framework, and it defined the basic concept of testing and the terms presented above. Today, nearly every programming language offers its version of this framework: PHPUnit for PHP, JUnit for Java, ShUnit for UNIX Shell Scripts and so on. You would be surprised to find out how many things can be tested today, and how many tests can be automated.</p><h3>Test Case</h3><p>Originally, a &#8220;test case&#8221; was defined as the smallest unit of testing by Kent Beck.</p><blockquote><p>When you talk to a tester, the smallest unit of testing they talk about is a test case. TestCase is a User’s Object, representing a single test case. &#8211; <a\nhref=\"http://enva.to/VK2fH8\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'enva.to\']);\">Simple Smalltalk Testing: With Patterns</a> by Kent Beck</p></blockquote><p>These days, we are using <i>test method</i> to define this smallest part and a test case mostly refers to a set of related test methods. For example, a typical situation is when we are unit testing our code and a test case refers to the totality of the test methods testing a particular class or whatever is the smallest unit in our programming language. A test case, many times, is simply referred to as: <i>&#8220;a test.&#8221;</i></p><h3>Test Method</h3><p>A test method is the smallest part of a test architecture. A test method is the unit that consists of the above defined parts: setup / exercise / verify / teardown. It is the essential part of any test; the one that <i>does the work.</i></p><blockquote><p>A test method is a definitive procedure that produces a test result. &#8211; Form and Style Manual, ASTM, 2012</p></blockquote><h3>DOC &#8211; Dependent-On Component</h3><p>This was easily one of the most confusing new terms for our new programmer. It represents all the other classes and system components that our SUT needs in order to properly run. But, also, the DOC has to provide specific methods that allows us to observe and test it. The concepts of <i>mocking</i> and <i>test doubles</i> are strongly related to the DOC.</p><blockquote><p>An individual class or a large-grained component on which the system under test (SUT) depends. The dependency is usually one of delegation via method calls. &#8211; <a\nhref=\"http://enva.to/QQw6ci\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'enva.to\']);\">xUnit Test Patterns: Refactoring Test Code</a>, by Gerard Meszaros</p></blockquote><hr\n/><h2>Are There Any Other Than Unit Tests?</h2><p>Soon after writing his first few tests, the new guy realized that he is testing different logical parts of the application. Sometimes, it is best to test a small part in isolation; other times, it is required to test a group of objects together and the way they talk to one another; and other times, you need to test the whole system. Things looked more complicated than previously presumed; so our programmer went on and read a book, and another, and another, and, finally, he understood.</p><h3>The Testing Pyramid</h3><p>The testing pyramid was first defined in the book, <i><a\nhref=\"http://enva.to/Plp42c\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'enva.to\']);\">Succeeding with Agile Software Development Using Scrum</a>, by Mike Cohn</i>, and then soon adopted by the software community.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2133_DecipheringTestingJargon/Images/testing_pyramid_original.png\" style=\"display: block;margin-left: auto;margin-right: auto;\" alt=\"Testing Pyramid\" /></div><p>The pyramid represents the three main testing layers: UI, Service, and Unit.</p><p>The <strong>UI layer</strong> represents the topmost testing level: when the system is exercised through the UI and the whole application is tested as one. This layer should represent the smallest amount in our multitude of tests.</p><p>The <strong>Service layer</strong> contains several different test types. It is mostly concerned with the internal communication of modules and by the correct working of the external API (application programming interface) of an application. There should be several such tests in our suites, but they should not be a base for our testing. These tests are usually training several parts of the application, and, thus, they are fairly slow. They should be run as frequently as possible, but not on every save of the code. Probably at every build of the system or when a commit happens to the versioning system.</p><p>The <strong>Unit layer</strong> refers to tests exercising the smallest possible units of our code in complete isolation. These tests should represent the vast majority of the tests. They should be very fast (1-4 milliseconds / test) and should be run as frequently as possible. Test driven development (TDD) is a good example of how to maximize the use of unit tests.</p><h3>Detailing the Testing Pyramid</h3><p>Based on the above example, the community devised several more detailed versions of the testing pyramid. The one I consider to be the best can be seen in the image below.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2133_DecipheringTestingJargon/Images/testing_pyramid_detailed.png\" style=\"width: 600px;\" alt=\"Detailed Testing Pyramid\" /></div><p>The three main layers can be clearly distinguished, but the center layer is more detailed. As time passed by, the software community discovered and defined several new testing methods. Some of them were included on the pyramid.</p><div\nclass=\"tip-shortcode\"><p><strong>Please Note:</strong> automated testing techniques and frameworks are still changing very fast. This is why, as you can see below, some expressions are not yet clear and there are several terms for the same definitions depending on the community which promoted them.</p></div><h3>The Unit Test</h3><p>A unit test represents the testing of the smallest unit one&#8217;s programming language allows. In object oriented programming, these are classes/objects. In other languages, they can be small modules or even functions/procedures.</p><p><i>A <strong>test</strong> in these definitions refer to the same thing as a test case represents.</i></p><blockquote><p>A test that verifies the behavior of some small part of the overall system. What turns a test into a unit test is that the system under test (SUT) is a very small subset of the overall system and may be unrecognizable to someone who is not involved in building the software. &#8211; xUnit Test Patterns: Refactoring Test Code by Gerard Meszaros</p></blockquote><p>Unit tests represent the vast majority of the tests that a programmer writes. Yes, it&#8217;s true: unit tests are most of the time written by programmers. Unit test help the programmers to develop the application, prevent common bugs, typos and regressions. They are tests made by programmers for programmers.</p><p>This is why unit tests are more technical and more cryptic in nature. They are here to help programmers write better code; when something fails on a unit test level, it is usually a problem for a programmer to fix. </a></p><h3>Component Tests</h3><p>As the name suggests, component tests are written for a little bit larger chunks of the application. A component test usually exercises a whole module or a group of logically interdependent units.</p><blockquote><p>The component is a consequence of one or more design decisions, although its behavior may also be traced back to some aspect of the requirements. &#8211; xUnit Test Patterns: Refactoring Test Code by Gerard Meszaros</p></blockquote><p>Surely, a component test exercises more code than a unit test. It also may test how some units work together and talk to each other.</p><p>A component can also be traced back to a requirement or a part of a requirement. This means that a component test is not just for programmers. Team leaders, scrum masters, architects and other technically involved people are surely interested by the modules, by their organization and sometime even by their inner-workings. These people are not necessary familiar with a specific programming language. The test has to concentrate more on the behavior and define the expectations in a more understandable way.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p>For example, a unit test may have an error message stating that:</p><p><code>TestFileAccessCanWriteToAFile: Failed asserting that file \'/tmp/testfile\' is present on the system.</code></p><p>Such a message would not be helpful for an architect or a manager or a team leader. A component test may fail with a more descriptive error:</p><p><code>Account Administration Test: Failed when we tried to specify 0 (zero) as the total money a user has in his account.</code></p><p>Such a test exercises a higher level functionality. Based on the error message above, there may be several layers of communication and classes / objects involved in the operation of specifying an amount as the total in someones account.</p><h3>The Integration Test</h3><p>This type of test takes several modules, and checks how they integrate with one another. It verifies if the internal module APIs are compatible and working as expected.</p><p>The term, however, allows a wide range of possible uses. Some software communities strongly relate integration tests with testing how our application works inside the medium it has to run. In other words, how it integrates into the higher system.</p><p>Others define integration test at different levels: anything defining the communication between two elements can be seen as an integration. These elements can be units, like classes, modules or even higher functional parts of the software.</p><blockquote><p>There is no unanimously accepted definition for the term, integration test.</p></blockquote><h3>API Tests</h3><p>The GUI of an application is talking to the software by the software&#8217;s API. Testing at this level exercises a lot of code, and can a relatively significant amount of time to run.</p><blockquote><p>API is the means by which other software can invoke some piece of functionality. &#8211; xUnit Test Patterns: Refactoring Test Code by Gerard Meszaros</p></blockquote><p>In object oriented programming, such APIs are defined by the public methods of the classes. However, if we take a look at a high level architectural design schema, the meaning of the API can be restricted to the public methods of the classes providing functionality through the borders of the business logic. These boundary classes represent the API and we should test that, when we call and use them, the system behaves as expected.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2133_DecipheringTestingJargon/Images/HighLevelDesign.png\" alt=\"High Level Architecture\" /></div><p>Usually, these tests are run periodically and take a long time to finish.</p><h3>Testing the GUI</h3><p>There should be only a few rare cases when you wish test to the presentation of an application. There is really no logic in the GUI layer, just presentation.</p><p>Testing if a button is green or red, or if it has <code>30px</code> in width is useless, and is too much of an overhead. So don&#8217;t jump into testing your views. If something goes terribly wrong with the GUI, it will be observed on the exploratory manual testing phase.</p><blockquote><p>Testing views should do only two things: test conditional presentation, and test that the expected API is called.</p></blockquote><p>Jumping into testing your views can be tempting. Don&#8217;t! Test only what you think can fail. Test only for values or function calls. Never check for GUI elements or their properties. Use REGEX whenever possible to match strings and check keywords that are not probable to change.</p><p>For instance, the following pseudo code is a bad example for testing the presence of a string on the screen.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testItCanTellTheNameOfTheUser() {\n	// some rendering code logic here\n	$renderedName = $this-&gt;renderName();\n	$this-&gt;assertEquals(\'User has the name \' . $renderedName[\'first\'] . \' \' . $renderedName[\'last\'] . \'.\');\n}\n</pre><p>Not only is this test difficult to read, but it tests for an exact phrase &#8211; something like <i>&#8220;User has the name John Doe.&#8221;</i>, including punctuation! Why is this bad? Because someone may easily change the form of this sentence without changing its meaning.</p><p>What if our client requires <i>Lastname, Firstname</i> form to be presented? That would make our test fail. We have to ask ourselves: should the test fail? Did we change software logic? I say no, it should not fail. The name would still be present on the screen; the order of the two parts would simply be different. This is a more appropriate test.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">function testItCanTellTheNameOfTheUser() {\n	// some rendering code logic here\n	$renderedName = $this-&gt;renderName();\n	$this-&gt;assertRegExp($renderedName[\'first\'], $renderedName);\n	$this-&gt;assertRegExp($renderedName[\'last\'], $renderedName);\n}\n</pre><p>This now ensures that the name is present, but it doesn&#8217;t care about the lexical construct. Someone could change the initial phrase into something, like <i>Don, John is the name of the current user.</i> The meaning will remain the same and the test will still pass correctly!</p><hr\n/><h2>What&#8217;s Missing from the Pyramid?</h2><p>After a month or so of working on the job, our fictional new programmer realizes that, even if the pyramid is quite cool, it&#8217;s not complete. Sometimes, there are a couple or so different test that should be execute &#8211; and they are pretty hard to place on the pyramid.</p><h3>Acceptance Tests</h3><p>These are one of the most controversial tests. Depending on what kind of books you are reading, acceptance tests might be referred to as <i>Functional Tests</li><p> or<li>End-to-End Tests</li><p> or<li>Acceptance Tests</li><p> or<li>Customer Tests</i>.</p><p>Each name comes from a different community or author. I personally prefer <i>Acceptance Tests</i> or <i>End-to-End Tests</i>.</p><blockquote><p>An acceptance test verifies the behavior of a slice of the visible functionality of the overall system. &#8211; xUnit Test Patterns: Refactoring Test Code by Gerard Meszaros</p></blockquote><p>Such a test will do something on the GUI. The change will happen in the whole system. Data will be saved to the database or file system. Network communication will be made. Finally, the GUI will be checked for the response from the system. Such tests attempt to mimic a user completely.</p><p>Acceptance tests are closely related to the stakeholders of our application. They are usually defined in the language of the business, and, when something goes wrong, a whole functionality is considered defunct. These tests are also used to define the high level functionality of the application.</p><p>Usually, they are written by QA and management and implemented by programmers. Originally, they were invented as a bridge between management and production. For some situations, they succeeded. The language of the tests is flexible enough to be written and understood by people not directly involved in software writing.</p><p>There are special frameworks for such tests, like Fitness, Selenium, Watir, Cucumber and others.</p><h3>Contract Tests</h3><p>These are a more special case, and are not used too often. You may use them sometimes in object oriented languages when interfaces and inheritance needs to be tested. The test basically ensures that a class really implements all the interfaces it has to.</p><blockquote><p>Contract Tests explain how a class should extend a superclass or implement an interface. &#8211; J. B. Rainsberger</p></blockquote><p>In some applications, the term <i>contract</i> is used for another type of testing. This second definition of the contract test checks if the contract between our application and a third party component we depend on is respected. These tests exercise current code and third party code ensuring that the results are as expected.</p><hr\n/><h2>All These Tests Must Be Run!</h2><p>After a well deserved vacation, our not-so-junior programmer is back at work. It was his first leave and he feels full with new power for writing tests and code. After six months, he feels pretty well at work; he has integrated nicely into the team, and he writes really good code. But from time to time, he has a frustrating feeling. Running five different types of test suites in a strictly defined order each evening is boring and error prone.</p><p>Then, there is another strange discussion between his team leader and management. They are talking about <i>C.I.</i> and <i>C.D.</i>. What could those mean? It was too cryptic for our new programmer to understand. A few weeks later, there was a company wide message: <i>&#8220;Please do not run your evening tests any more. We have C.I.!</i>. To learn more, he went to his team leader, and asked: <i>&#8220;What is CI and CD?&#8221;</i>.</p><h3>Continuous Integration (CI)</h3><p>Teams that heavily rely on automated testing need a way to run all these tests in an organized and efficient way. A continuous integration system helps with this.</p><blockquote><p>Continuous Integration is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily &#8211; leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible. &#8211; Martin Fowler</p></blockquote><p>Based on this definition, the continuous integration process will do the job of running our tests without human intervention. In the definition, frequent integration is exemplified as daily, but I can tell you that it is really cool to work on a software base that is automatically tested on each commit. Committing frequently means that any modification that is complete has to be commited so you may have tens of commits in a single day. Each commit will trigger a complete testing of the system and you will get a nice email, green or red, depending on the result, in just a few minutes. If the mail is green, the product is theoretically immediately shippable.</p><h3>Continuous Delivery (CD)</h3><p>This is not so related to testing, but to CI. While CI lets you have a deliverable system, releases are still done periodically and manually.</p><blockquote><p>Continuous Delivery automates all the steps from code to client.</p></blockquote><p>After all is done on the CI level, continuous delivery takes it a step further and builds the software install kits, publishes them as needed, and it can even trigger remote update procedures on clients. The goal of such a system is to deliver the product as quickly as possible to the end user. It is highly dependent on the automated tests, and, if all of them pass, the product is delivered. Period.</p><p>Even if, in some situations, this may sound very attractive, in most applications, it is still too dangerous. Usually, any decently critical system has to go under an exploratory manual testing session before delivery.</p><hr\n/><h2>Why Is Manual Testing Still Used?</h2><p>There are parts of a testing procedure that are simply too difficult &#8211; if not impossible &#8211; to automate. That&#8217;s why an <i>Exploratory Manual Testing</i> session is usually done before each software release. These tests may be done by specialized testers or by the programmers depending on the structure of the team and company.</p><p>Manual testing involves imagination. Human beings are poking around the system ensuring that it works and looks as desired.</p><blockquote><p>Some teams consider manual testing a &lt;&lt; Break it if you can! &gt;&gt; concept.</p></blockquote><hr\n/><h2>Conclusions</h2><p>You can&#8217;t avoid testing jargon. Hopefully, this article has shed some light on the differences between the various forms of testing. Any questions? Ask below!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(24,3,1,1358049613,NULL,' Namespacing in PHP ','It’s been a bumpy ride, in regards to namespace support in PHP. Thankfully, it was added to the language in PHP 5.3, and the applicable structure of PHP code has improved greatly since then. But how exactly do we use them?(Continue)','It’s been a bumpy ride, in regards to namespace support in PHP. Thankfully, it was added to the language in PHP 5.3, and the applicable structure of PHP code has improved greatly since then. But how exactly do we use them?(Continue)',1,0,'namespacing-in-php-2',211,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2123_phpnamespace/preview.png',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-27203\'), post_id: 27203, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>It&#8217;s been a bumpy ride, in regards to namespace support in PHP. Thankfully, it was added to the language in PHP 5.3, and the applicable structure of PHP code has improved greatly since then. But how exactly do we use them?</p><p><span\nid=\"more-27203\"></span></p><hr\n/><h2>What&#8217;s a Namespace?</h2><blockquote\nclass=\"pullquote pqRight\"><p>&quot;Don&#8217;t forget to escape the backslash when you store a namespace name in a string!&quot;</p></blockquote><p>Imagine a namespace as a drawer in which you can put all kinds of things: a pencil, a ruler, a piece of paper and so forth. These are your belongings. Directly underneath your drawer is someone else&#8217;s, and he puts the same things in it. To avoid using each other&#8217;s items, you decide to label the drawers so it&#8217;s clear what belongs to whom.</p><p>Previously, developers had to use underscores in their classes, functions and constants to separate code bases. That&#8217;s equivalent to labeling each others belongings and putting them in one big drawer. Sure, it&#8217;s at least some kind of organization, but it&#8217;s very inefficient.</p><p>Namespacing to the rescue! You can declare the same function, class, interface and constant definitions in separate namespaces without receiving fatal errors. Essentialy, a namespace is nothing more than a hierarchically labeled code block holding regular PHP code.</p><h3>You are Using Them!</h3><p>It is important to keep in mind that you indirectly make use of namespaces; as of PHP 5.3, all the definitions which are not yet declared in a user defined namespace fall under the global namespace.</p><p>The global namespace also holds all internal PHP definitions, like <code>echo()</code>, <code>mysqli_connect()</code>, and the <code>Exception</code> class. Because the global namespace has no unique identifying name, its most often referred to as the <strong>global space</strong>.</p><blockquote><p>Note that it&#8217;s not an obligation to use namespacing.</p></blockquote><p>Your PHP script will work perfectly fine without them, and this behavior isn&#8217;t about to change very soon.</p><hr\n/><h2>Defining a Namespace</h2><p>A namespace definition is the first statement the PHP interpreter should encounter in a PHP file. The only statement allowed to occur above a namespace declaration is a <code><a\nhref=\"http://www.php.net/manual/en/control-structures.declare.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.php.net\']);\">declare</a></code> statement, and then again, only if it declares the encoding of the script.</p><p>Declaring a namespace is as simple as using the <code>namespace</code> keyword. A namespace name should obey the same rules as other identifiers in PHP. Therefore, a namespace must <em>start with a letter or underscore, followed by any number of letters, numbers, or underscores</em>.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject {\n    // Regular PHP code goes here, anything goes!\n    function run()\n    {\n        echo \'Running from a namespace!\';\n    }\n}</pre><p>If you want to assign a code block to the global space, you use the <code>namespace</code> keyword without appending a name.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace {\n    // Global space!\n}</pre><p>You are allowed to have multiple namespaces in the same file.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject {\n}\nnamespace MySecondProject {\n}\nnamespace {\n}</pre><p>You can also scatter the same namespace throughout different files; the process of file inclusion automatically merges them. Therefore, it&#8217;s a good coding practice to limit the amount of namespace definitions to one per file, just like you would do with classes.</p><blockquote\nclass=\"pullquote\"><p>Namespacing is used to avoid conflicting definitions and introduce more flexibility and organization in your code base.</p></blockquote><p>Note that the brackets surrounding the namespace code block are completely optional. In fact, sticking to the one-namespace-per-file rule and omitting the curly brackets makes your code a lot cleaner&#8211;there&#8217;s no need to indent the nested code.</p><h3>Sub-namespaces</h3><p>Namespaces can follow a certain hierarchy, much like the directories in the file system on your computer. Sub-namespaces are extremely useful for organizing the structure of a project. For example, if your project requires database access, you might want to put all the database-related code, such as a database exception and connection handler, in a sub-namespace called <code>Database</code>.</p><p>To maintain flexibility, it is wise to store sub-namespaces in sub-directories. This encourages structuring of your project and makes it much easier to use autoloaders that follow <a\nhref=\"https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">the PSR-0 standard</a>.</p><p>PHP uses the <strong>backslash</strong> as its namespace separator.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2123_phpnamespace/1_namespace_separator_table.png\" width=\"600\" /> <br\n/><span>Fun fact: in <a\nhref=\"https://wiki.php.net/rfc/namespaceseparator\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'wiki.php.net\']);\">the RFC</a> to decide which namespace separator should be used, they even considered using a smiley.</div><pre class=\"brush: php; title: ; notranslate\" title=\"\">// myproject/database/connection.php\n&lt;?php\nnamespace MyProject\\Database\nclass Connection {\n    // Handling database connections\n}</pre><p>You can have as many sub-namespaces as you want.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject\\Blog\\Auth\\Handler\\Social;\nclass Twitter {\n    // Handles Twitter authentification\n}</pre><p>Defining sub-namespaces with nested code blocks is not supported. The following example will throw a very descriptive fatal error: &#8220;Namespace declarations cannot be nested&#8221;.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject {\n    namespace Database {\n        class Connection { }\n    }\n}</pre><hr\n/><h2>Calling Code from a Namespace</h2><p>If you want to instantiate a new object, call a function or use a constant from a different namespace, you use the backslash notation. They can be resolved from three different view points:</p><ul><li>Unqualified name</li><li>Qualified name</li><li>Fully qualified name</li></ul><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2123_phpnamespace/2_resolve_name.png\" width=\"600\" /></div><h3>Unqualified Name</h3><p>This is the name of a class, function or constant without including a reference to any namespace whatsoever. If you are new to namespacing, this is the view point you are used to working from.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject;\nclass MyClass {\n    static function static_method()\n    {\n        echo \'Hello, world!\';\n    }\n}\n// Unqualified name, resolves to the namespace you are currently in (MyProject\\MyClass)\nMyClass:static_method();</pre><h3>Qualified Name</h3><p>This is how we access the sub-namespace hierarchy; it makes use of the backslash notation.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject;\nrequire \'myproject/database/connection.php\';\n// Qualified name, instantiating a class from a sub-namespace of MyProject\n$connection = new Database\\Connection();</pre><p>The example below throws a fatal error: &#8220;Fatal error: Class &#8216;MyProject\\Database\\MyProject\\FileAccess\\Input&#8217; not found&#8221; because <code>MyProject\\FileAccess\\Input</code> is approached relatively to the namespace you are currently in.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject\\Database;\nrequire \'myproject/fileaccess/input.php\';\n// Trying to access the MyProject\\FileAccess\\Input class\n$input = new MyProject\\FileAccess\\Input();</pre><h3>Fully Qualified Name</h3><p>The unqualified and qualified names are both relative to the namespace you are currently in. They can only be used to access definitions on that level or to dive deeper into the namespace hierarchy.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p>If you want to access a function, class or constant residing at a higher level in the hierarchy, then you need to use the fully qualified name&#8211;an absolute path rather than relative. This boils down to prepending your call with a backslash. This lets PHP know that this call should be resolved from the global space instead of approaching it relatively.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject\\Database;\nrequire \'myproject/fileaccess/input.php\';\n// Trying to access the MyProject\\FileAccess\\Input class\n// This time it will work because we use the fully qualified name, note the leading backslash\n$input = new \\MyProject\\FileAccess\\Input();</pre><p>It&#8217;s not required to use the fully qualified name of internal PHP functions. Calling an <strong>unqualified name</strong> for a constant or function which does not exist in the namespace you are currently working in results in PHP searching the global namespace for them. This is a built-in fallback which does not apply to unqualified class names.</p><p>With this in mind, we can now overload internal PHP functions whilst still being able to call the original function (or constant for that matter).</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject;\nvar_dump($query); // Overloaded\n\\var_dump($query); // Internal\n// We want to access the global Exception class\n// The following will not work because there\'s no class called Exception in the MyProject\\Database namespace and unqualified class names do not have a fallback to global space\n// throw new Exception(\'Query failed!\');\n// Instead, we use a single backslash to indicate we want to resolve from global space\nthrow new \\Exception(\'ailed!\');\nfunction var_dump() {\n    echo \'Overloaded global var_dump()!&lt;br /&gt;\';\n}\n</pre><h3>Dynamic calls</h3><p>PHP is a dynamic programming language; so you can also apply this functionality for calling namespaced code. This is essentially the same as instantiating variable classes or including variable files. The namespace separator PHP uses is also a meta character in strings. Don&#8217;t forget to escape the backslash when you store a namespace name in a string!</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace OtherProject;\n$project_name = \'MyProject\';\n$package_name = \'Database\';\n$class_name = \'Connection\';\n// Include a variable file\nrequire strtolower($project_name . \'/\'. $package_name .  \'/\' . $class_name) . \'.php\';\n// Name of a variable class in a variable namespace. Note how the backslash is escaped to use it properly\n$fully_qualified_name = $project_name . \'\\\\\' . $package_name . \'\\\\\' . $class_name;\n$connection = new $fully_qualified_name();</pre><h3>The <code>namespace</code> Keyword</h3><p>Not only is the <code>namespace</code> keyword used to define a namespace, it can also be used to explicitly resolve to the current namespace, functionally similar to the <code>self</code> keyword for classes.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject;\nfunction run()\n{\n    echo \'Running from a namespace!\';\n}\n// Resolves to MyProject\\run\nrun();\n// Explicitly resolves to MyProject\\run\nnamespace\\run();</pre><h3>The <code>__NAMESPACE__</code> constant</h3><p>Much like the <code>self</code> keyword cannot be used to determine what the current class name is, the <code>namespace</code> keyword cannot be used to determine what the current namespace is. This is why we have the <code>__NAMESPACE__</code> constant.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject\\Database;\n// \'MyProject\\Database\'\necho __NAMESPACE__;</pre><p>This constant is very useful for learning if you are just starting out with namespaces; it is also helpful for debugging. As it is a string, it can also be used in combination with dynamic code calls which we previously discussed.</p><hr\n/><h2>Aliasing or Importing</h2><blockquote\nclass=\"pullquote\"><p>&quot;it&#8217;s not an obligation to use namespacing&quot;</p></blockquote><p>Namespacing in PHP has support for <strong>importing</strong>. Importing is also referred to as <strong>aliasing</strong>. Only classes, interfaces, and namespaces can be aliased or imported.</p><p>Importing is a very useful and fundamental aspect of namespacing. It gives you the ability to make use of external code packages, like libraries, without having to worry about conflicting names. Importing is achieved by using the <code>use</code> keyword. Optionally, you can specify a custom alias with the <code>as</code> keyword.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">use [name of class, interface or namespace] as [optional_custom_alias]</pre><h3>How it&#8217;s Done</h3><p>A fully qualified name can be aliased to a shorter unqualified name so that you don&#8217;t have to write its fully qualified name each time you want to make use of it. Aliasing or importing should occur in the highest scope of a namespace or in the global scope. Trying to do this in the scope of a method or function is invalid syntax.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace OtherProject;\n// This holds the MyProject\\Database namespace with a Connection class in it\nrequire \'myproject/database/connection.php\';\n// If we want to access the database connection of MyProject, we need to use its fully qualified name as we\'re in a different name space\n$connection = new \\MyProject\\Database\\Connection();\n// Import the Connection class (it works exactly the same with interfaces)\nuse MyProject\\Database\\Connection;\n// Now this works too! Before the Connection class was aliased PHP would not have found an OtherProject\\Connection class\n$connection = new Connection();\n// Import the MyProject\\Database namespace\nuse MyProject\\Database;\n$connection = new Database\\Connection()</pre><p>Alternatively, you can alias to it a different name:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace OtherProject;\nrequire \'myproject/database/connection.php\';\nuse MyProject\\Database\\Connection as MyConnection;\n$connection = new MyConnection();\nuse MyProject\\Database as MyDatabase;\n$connection = new MyDatabase\\Connection();</pre><p>You are also allowed to import global classes, like the <code>Exception</code> class. When imported, you don&#8217;t have to write its fully qualified name anymore.</p><p>Note that import names are not resolved as relative to the current namespace but from an absolute standpoint, starting at the global space. This means that a leading backslash is unnecessary and not recommended.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace MyProject;\n// Fatal error: Class \'SomeProject\\Exception\' not found\nthrow new Exception(\'An exception!\');\n// OK!\nthrow new \\Exception(\'An exception!\');\n// Import global Exception. \'Exception\' is resolved from an absolute standpoint, the leading backslash is unnecessary\nuse Exception;\n// OK!\nthrow new Exception(\'An exception!\');</pre><p>Though it is possible to dynamically call namespaced code, dynamic importing is not supported.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nnamespace OtherProject;\n$parser = \'markdown\';\n// This is valid PHP\nrequire \'myproject/blog/parser/\' . $parser . \'.php\';\n// This is not\nuse MyProject\\Blog\\Parser\\$parser;</pre><hr\n/><h2>Conclusion</h2><p>Namespacing is used to avoid conflicting definitions and introduce more flexibility and organization in your code base. Remember that you are not obligated to use namespacing; it&#8217;s a feature used in combination with an object oriented workflow. Hopefully, however, you will consider taking your (future) PHP project to the next level by making use of namespacing. Have you decided yet?</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(25,3,1,1358049614,NULL,' All About Mocking with PHPUnit ','There are two styles of testing: “black box” and “white box” styles. Black box testing focuses on the object’s state; whereas, white box testing focuses on behavior. The two styles complement each other and can be combined to thoroughly test code. Mocking allows us to test behavior, and this tutorial combines the mocking concept with TDD to build an example class that uses several other components to achieve its goal.(Continue)','There are two styles of testing: “black box” and “white box” styles. Black box testing focuses on the object’s state; whereas, white box testing focuses on behavior. The two styles complement each other and can be combined to thoroughly test code. Mocking allows us to test behavior, and this tutorial combines the mocking concept with TDD to build an example class that uses several other components to achieve its goal.(Continue)',1,0,'all-about-mocking-with-phpunit',284,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2126_mockingphp/mocking-in-php.jpg','<div\nclass=\"session-post\"><em>This entry is part 7 of 12 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/test-driven-php/\" >Test-Driven PHP</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/php/deciphering-testing-jargon/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/php/hands-on-unit-testing-with-phpunit/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/articles/news/its-time-to-dig-in/\" >It\'s Time to Dig In</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/\" >The Newbie\'s Guide to TDD</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/test-driven-development-in-php-first-steps/\" >First Steps</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/automatic-testing-for-tdd-with-php/\" >Automatic Testing</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/lets-tdd-a-simple-app-in-php/\" >Let\'s TDD a Simple App</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/deciphering-testing-jargon/\" >Deciphering Testing Jargon</a></li><li>All About Mocking in PHPUnit</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/hands-on-unit-testing-with-phpunit/\" >Hands-On Testing With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/how-to-use-selenium-2-with-phpunit/\" >How to Use Selenium 2 With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/articles/interviews/chatting-with-the-grumpy-php-programmer\" >Chatting With The Grumpy PHP Programmer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/evolving-toward-a-persistence-layer/\" >Evolving Toward a Persistence Layer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/mockery-a-better-way/\" >Mockery: A Better Way</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-27252\'), post_id: 27252, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>There are two styles of testing: &#8220;black box&#8221; and &#8220;white box&#8221; styles. Black box testing focuses on the object&#8217;s state; whereas, white box testing focuses on behavior. The two styles complement each other and can be combined to thoroughly test code. <b>Mocking</b> allows us to test behavior, and this tutorial combines the mocking concept with TDD to build an example class that uses several other components to achieve its goal.</p><p><span\nid=\"more-27252\"></span></p><hr\n/><h2> <span>Step 1:</span> Introduction to Behavior Testing</h2><p>Objects are entities that send messages to each other. Each object recognizes a set of messages that it in turn answers to. These are <em>public</em> methods on an object. <em>Private</em> methods are the exact opposite. They are completely internal to an object and cannot communicate with anything outside of the object. If public methods are akin to messages, then private methods are similar to thoughts.</p><p>The total of all methods, public and private, accessible through public methods represent the behavior of an object. For example, telling an object to <em>move</em> causes that object to not only interact with its internal methods, but also with other objects. From the user&#8217;s point of view, the object has just one simple behavior: it <em>moves</em>.</p><blockquote><p>From the programmer&#8217;s point of view, however, the object has to do a lot of little things to achieve the movement.</p></blockquote><p>For example, imagine that our object is a car. In order for it to <em>move</em>, it must have a running engine, be in the first gear (or reverse), and the wheels have to turn. This is a behavior we need to test and build upon in order to design and write our production code.</p><hr\n/><h2> <span>Step 2:</span> Remote Controlled Toy Car</h2><blockquote\nclass=\"pullquote\"><p>Our tested class never actually uses these dummy objects.</p></blockquote><p>Let&#8217;s imagine we are building a program to remote control a toy car. All commands to our class come through the remote control. We have to create a class that <em>understands</em> what the remote control sends and issues <em>commands</em> to the car.</p><p>This will be an exercise application, and we presume that the other classes controlling the various parts of the car are already written. We know the exact signature of all these classes, but unfortunately, the car manufacturer could not send us a prototype&#8211;not even the source code. All we know are the names of the classes, the methods they have, and what behavior each method encapsulates. The return values are also specified.</p><hr\n/><h2> <span>Step 3:</span> Application Schema</h2><p>Here is the complete schema of the application. There&#8217;s no explanation at this point; simply keep it in mind for later reference.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2126_mockingphp/app_schema.png\"/></div><hr\n/><h2> <span>Step 4:</span> Test Doubles</h2><blockquote\nclass=\"pullquote\"><p>A test Stub is an object to control the indirect input of the tested code.</p></blockquote><p>Mocking is a style of testing that requires its own set of tools, a set of special objects representing different levels of faking the behavior of object. These are:</p><ul><li>dummy objects</li><li>test stubs</li><li>test spies</li><li>test mocks</li><li>test fakes</li></ul><p>Each of these objects have their special scope and behavior. In PHPUnit, they are created with the <code>$this->getMock()</code> method. The difference is how and for what reasons the objects are used.</p><p>To better understand these objects, I will implement the &#8220;Toy Car Controller&#8221; step by step using the types of objects, in order, as listed above. Each object in the list is more complex than the object before it. This leads to an implementation that is radically different than in the real world. Also, being an imaginary application, I will use some scenarios that may not even be feasible in a real toy car. But hey, let&#8217;s imagine what we need them in order to understand the bigger picture.</p><hr\n/><h2> <span>Step 5:</span> Dummy Object</h2><p>Dummy objects are objects that the System Under Test (SUT) depends on, but they are actually never used. A dummy object can be an argument passed to another object, or it can be returned by a second object and then passed to a third object. The point is, our tested class never actually use these dummy objects. At the same time, the object must resemble a real object; otherwise, the receiver may refuse it.</p><p>The best way to exemplify this is to imagine a scenario; the schema of which, is below:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2126_mockingphp/dummy_object.png\" alt=\"Dummy object in context schema\" /></div><p>The orange object is the <code>RemoteControlTranslator</code>. It&#8217;s main purpose is to receive signals from the remote control and translate them into messages for our classes. At some point, the user will do a <em>&#8220;Ready to Go&#8221;</em> action on the remote control. The translator will receive the message and create the classes necessary to make the car ready to go.</p><blockquote><p>The manufacturer said that <em>&#8220;Ready to Go&#8221;</em> means that the engine is started, the gearbox is in neutral, and the lights are set to on or off as per user request.</p></blockquote><p>This means that the user can predefine the state of the lights before being ready to go, and they will turn on or off based on this predefined value on activation. <code>RemoteControlTranslator</code> then sends all necessary information to the <code>CarControl</code> class&#8217; <code>getReadyToGo($engine, $gearbox, $electronics, $lights)</code> method. I know this is far from a perfect design and violates a few principles and patterns, but it is very good for this example.</p><p>Start our project with this initial file structure:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2126_mockingphp/initial_file_structure.png\" alt=\"Initial file structure\" /></div><p>Remember, all the classes in the <em>CarInterface</em> folder are provided by the car&#8217;s manufacturer; we don&#8217;t know their implementation. All we know are the class signatures, but we don&#8217;t care about them at this point.</p><p>Our main goal is to implement the <code>CarController</code> class. In order to test this class, we need to imagine how we want to use it. In other words, we put our self in the shoes of the <code>RemoteControlTranslator</code> and/or any other future class that may use <code>CarController</code>. Let&#8217;s start by creating the a case for our class.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class CarControllerTest extends PHPUnit_Framework_TestCase {\n}</pre><p>Then add a test method.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItCanGetReadyTheCar() {\n	}</pre><p>Now think about what we need to pass to the <code>getReadyToGo()</code> method: an engine, a gearbox, an electronics controller, and light information. For the sake of this example, we will only mock the lights:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">require_once \'../CarController.php\';\ninclude \'../autoloadCarInterfaces.php\';\nclass CarControllerTest extends PHPUnit_Framework_TestCase {\n	function testItCanGetReadyTheCar() {\n		$carController = new CarController();\n		$engine = new Engine();\n		$gearbox = new Gearbox();\n		$electornics = new Electronics();\n		$dummyLights = $this-&gt;getMock(\'Lights\');\n		$this-&gt;assertTrue($carController-&gt;getReadyToGo($engine, $gearbox, $electornics, $dummyLights));\n	}\n}</pre><p>This will obviously fail with:</p><pre class=\"brush: plain; title: ; notranslate\" title=\"\">PHP Fatal error:  Call to undefined method CarController::getReadyToGo()</pre><p>Despite the failure, this test gave us a starting point for our <code>CarController</code> implementation. I included a file, called <em>autoloadCarInterfaces.php</em>, that was not on the initial list. I realized I needed something to load the classes, and I wrote a very basic solution. We can always rewrite it when the real classes are provided, but that is an entirely different story. For now, we&#8217;ll stick with the easy solution:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">foreach (scandir(dirname(__FILE__) . \'/CarInterface\') as $filename) {\n	$path = dirname(__FILE__) . \'/CarInterface/\' . $filename;\n	if (is_file($path)) {\n		require_once $path;\n	}\n}</pre><p>I presume this class loader is obvious to everybody; so, let&#8217;s discuss the test code.</p><p>First, we create an instance of <code>CarController</code>, the class we want to test. Next, we create instances of all the other classes we care about: engine, gearbox, and electronics.</p><p>We then create a dummy <code>Lights</code> object by calling PHPUnit&#8217;s <code>getMock()</code> method and passing the name of the <code>Lights</code> class. This returns an instance of <code>Lights</code>, but every method returns <code>null</code>&#8211;a dummy object. This dummy object cannot do anything, but it gives our code the interface necessary to work with <code>Light</code> objects.</p><blockquote><p>It is very important to note that <code>$dummyLights</code> is a <code>Lights</code> object, and any user expecting a <code>Light</code> object can use the dummy object without knowing that it isn&#8217;t a real <code>Lights</code> object.</p></blockquote><p>To avoid confusion, I recommend specifying a parameter&#8217;s type when defining a function. This forces the PHP runtime to type check the arguments passed to a function. Without specifying the data type, you can pass any object to any parameter, which can result in the failure of your code. With this in mind, let&#8217;s examine the <code>Electronics</code> class:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">require_once \'Lights.php\';\nclass Electronics {\n	function turnOn(Lights $lights) {}\n}</pre><p>Let&#8217;s implement a test:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class CarController {\n	function getReadyToGo(Engine $engine, Gearbox $gearbox, Electronics $electronics, Lights $lights) {\n		$engine-&gt;start();\n		$gearbox-&gt;shift(\'N\');\n		$electronics-&gt;turnOn($lights);\n		return true;\n	}\n}</pre><p>As you can see, the <code>getReadyToGo()</code> function used the <code>$lights</code> object for the only purpose of sending it to the <code>$electronics</code> object&#8217;s <code>turnOn()</code> method. Is this the ideal solution for such a situation? Probably not, but you can clearly observe how a dummy object, with no relation whatsoever to the <code>getReadyToGo()</code> function, is passed along to the one object that really needs it.</p><p><em>Please note that all the classes contained in the</em> CarInterface <em> directory provide dummy objects when initialized. Also assume that, for this exercise, we expect the manufacturer to provide the real classes in the future. We cannot rely on their current lack of functionality; so, we must ensure that our tests pass.</em></p><hr\n/><h2> <span>Step 6:</span> &#8220;Stub&#8221; the Status and Go Forward</h2><p>A test Stub is an object to control the indirect input of the tested code. But what is indirect input? It is a source of information that can not be directly specified.</p><blockquote><p>The most common example of a test stub is when an object asks another object for information and then does something with that data.</p></blockquote><blockquote\nclass=\"pullquote\"><p>Spies, by definition, are more capable stubs.</p></blockquote><p>The data can only be obtained by asking a specific object for it, and in many cases, these objects are used for a specific purpose inside the tested class. We do not want to &#8220;new up&#8221; (<code>new SomeClass()</code>) a class inside of another class for testing purposes. Therefore, we need to inject an instance of a class that acts like <code>SomeClass</code> without injecting an actual <code>SomeClass</code> object.</p><p>What we want is a stub class, which then leads to <em>dependency injection</em>. Dependency injection (DI) is a technique that injects an object into another object, forcing it to use the injected object. DI is common in TDD , and it is absolutely required in almost any project. It provides a simple way to force an object to use a test-prepared class instead of a real class used in the production environment.</p><p>Let&#8217;s make our toy car move forward.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2126_mockingphp/test_stub.png\" alt=\"Test stub in context schema\" /></div><p>We want to implement a method called <code>moveForward()</code>. This method first queries a <code>StatusPanel</code> object for the fuel and engine status. If the car is ready to go, then the method instructs the electronics to accelerate.</p><p>To better understand how a stub works, I will first write the code for the status check and acceleration:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function goForward(Electronics $electronics) {\n		$statusPanel = new StatusPanel();\n		if($statusPanel-&gt;engineIsRunning() &amp;&amp; $statusPanel-&gt;thereIsEnoughFuel())\n			$electronics-&gt;accelerate ();\n	}</pre><p>This code is pretty simple, but we do not have a real engine or fuel to test our <code>goForward()</code> implementation. Our code won&#8217;t even enter the <code>if</code> statement because we don&#8217;t have a <code>StatusPanel</code> class. But if we continue with the test, a logical solution starts to emerge:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItCanAccelerate() {\n		$carController = new CarController();\n		$electronics = new Electronics();\n		$stubStatusPanel = $this-&gt;getMock(\'StatusPanel\');\n		$stubStatusPanel-&gt;expects($this-&gt;any())-&gt;method(\'thereIsEnoughFuel\')-&gt;will($this-&gt;returnValue(TRUE));\n		$stubStatusPanel-&gt;expects($this-&gt;any())-&gt;method(\'engineIsRunning\')-&gt;will($this-&gt;returnValue(TRUE));\n		$carController-&gt;goForward($electronics, $stubStatusPanel);\n	}</pre><p>Line by line explanation:</p><blockquote\nclass=\"pullquote\"><p>I love recursion; it is always easier to test recursion than loops.</p></blockquote><ul><li>create a new <code>CarController</code></li><li>create the dependent <code>Electronics</code> object</li><li>create a mock for the <code>StatusPanel</code></li><li>expect to call <code>thereIsEnoughFuel()</code> zero or more times and return <code>true</code></li><li>expect to call <code>engineIsRunning()</code> zero or more times and return <code>true</code></li><li>call <code>goForward()</code> with <code>Electronics</code> and <code>StubbedStatusPanel</code> object</li></ul><p>This is the test we want to write, but it will not work with our current implementation of <code>goForward()</code>. We have to modify it:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function goForward(Electronics $electronics, StatusPanel $statusPanel = null) {\n		$statusPanel = $statusPanel ? : new StatusPanel();\n		if($statusPanel-&gt;engineIsRunning() &amp;&amp; $statusPanel-&gt;thereIsEnoughFuel())\n			$electronics-&gt;accelerate ();\n	}</pre><p>Our modification uses <em>dependency injection</em> by adding a second optional parameter of type <code>StatusPanel</code>. We determine if this parameter has a value and create a new <code>StatusPanel</code> if <code>$statusPanel</code> is null. This ensures that a new <code>StatusPanel</code> object is created in production while still allowing us to test the method.</p><p>It is important to specify the type of the <code>$statusPanel</code> parameter. This ensures that only a <code>StatusPanel</code> object (or an object of an inherited class) can be passed to the method. But even with this modification, our test is still not complete.</p><hr\n/><h2> <span>Step 7:</span> Complete the Test with a Real Test Mock</h2><p>We have to test mock an <code>Electronics</code> object to ensure our method from Step 6 calls <code>accelerate()</code>. We can&#8217;t use the real <code>Electronics</code> class for several reasons:</p><ul><li>We don&#8217;t have the class.</code><li>We cannot verify its behavior.</cod><li>Even if we could call it, we should test it in isolation.</li></ul><p>A test mock is an object that is capable of controlling both indirect input and output, and it has a mechanism for automatic assertion on expectations and results. This definition may sound a little confusing, but it is really quite simple to implement:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItCanAccelerate() {\n		$carController = new CarController();\n		$electronics = $this-&gt;getMock(\'Electronics\');\n		$electronics-&gt;expects($this-&gt;once())-&gt;method(\'accelerate\');\n		$stubStatusPanel = $this-&gt;getMock(\'StatusPanel\');\n		$stubStatusPanel-&gt;expects($this-&gt;any())-&gt;method(\'thereIsEnoughFuel\')-&gt;will($this-&gt;returnValue(TRUE));\n		$stubStatusPanel-&gt;expects($this-&gt;any())-&gt;method(\'engineIsRunning\')-&gt;will($this-&gt;returnValue(TRUE));\n		$carController-&gt;goForward($electronics, $stubStatusPanel);\n	}</pre><p>We simply changed the <code>$electronics</code> variable. Instead of creating a real <code>Electronics</code> object, we simply mock one.</p><p>On the next line, we define an expectation on the <code>$electronics</code> object. More precisely, we expect that the <code>accelerate()</code> method is called only one time (<code>$this->once()</code>). The test now passes!</p><p>Feel free to play around with this test. Try changing <code>$this->once()</code> into <code>$this->exactly(2)</code> and see what a nice failure message PHPUnit gives to you:</p><pre class=\"brush: plain; title: ; notranslate\" title=\"\">1) CarControllerTest::testItCanAccelerate\nExpectation failed for method name is equal to &lt;string:accelerate&gt;; when invoked 2 time(s).\nMethod was expected to be called 2 times, actually called 1 times.</pre><hr\n/><h2> <span>Step 8:</span> Use a Test Spy</h2><p>A test spy is an object capable of capturing indirect output and providing indirect input as needed.</p><p>Indirect output is something we can\'t directly observe. For example: when the tested class computes a value and then uses it as an argument for another object\'s method. The only way to observe this output is to ask the called object about the variable used to access its method.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p>This definition makes a spy almost a mock.</p><blockquote><p>The main difference between a mock and spy is that mock objects have built-in assertions and expectations.</p></blockquote><p>In that case, how can we create a test spy using PHPUnit\'s <code>getMock()</code>? We can\'t (well, we can\'t create a pure spy), but we can create mocks capable of spying other objects.</p><p>Let\'s implement the braking system so we can stop the car. Braking is really simple; the remote control will sense the braking intensity from the user and send it to the controller. The remote also provides an \"Emergency Stop!\" button. This must instantly engage brakes with maximum power.</p><p>The braking power measures values ranging from 0 to 100, with 0 meaning nothing and 100 meaning maximum brake power. The \"Emergency Stop!\" command will be received as different call.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2126_mockingphp/test_spy.png\" alt=\"Test stub in context schema\" /></div><p>The <code>CarController</code> will issue a message to the <code>Electronics</code> object to activate the brake system. The  car controller can also query the <code>StatusPanel</code> for speed information obtained through sensors on the car.</p><h3>Implementation Using a Pure Test Spy</h3><p>Let\'s first implement a pure spy object without using PHPUnit\'s mocking infrastructure. This will give you a better understanding of the test spy concept. We start by checking the <code>Electronics</code> object\'s signature.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class Electronics {\n	function turnOn(Lights $lights) {}\n	function accelerate(){}\n	function pushBrakes($brakingPower){}\n}</pre><p>We\'re interested in the <code>pushBrakes()</code> method. I didn\'t call it <code>brake()</code> to avoid confusion with the <code>break</code> keyword in PHP.</p><p>To create a real spy, we will extend <code>Electronics</code> and override the <code>pushBrakes()</code> method. This overridden method will not push the brake; instead, it will only register the braking power.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class SpyingElectronics extends Electronics {\n	private $brakingPower;\n	function pushBrakes($brakingPower) {\n		$this-&gt;brakingPower = $brakingPower;\n	}\n	function getBrakingPower() {\n		return $this-&gt;brakingPower;\n	}\n}</pre><p>The the <code>getBrakingPower()</code> method gives us the ability to check the braking power in our test. This is not a method we would use in production.</p><p>We can now write a test capable of testing the braking power. Following TDD principles, we\'ll start with the simplest test and provide the most basic implementation:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItCanStop() {\n		$halfBrakingPower = 50;\n		$electronicsSpy = new SpyingElectronics();\n		$carController = new CarController();\n		$carController-&gt;pushBrakes($halfBrakingPower, $electronicsSpy);\n		$this-&gt;assertEquals($halfBrakingPower, $electronicsSpy-&gt;getBrakingPower());\n	}</pre><p>This test fails because we do not yet have a <code>pushBrakes()</code> method on <code>CarController</code>. Let\'s rectify that and write one:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function pushBrakes($brakingPower, Electronics $electronics) {\n		$electronics-&gt;pushBrakes($brakingPower);\n	}</pre><p>The test now passes, effectively testing the <code>pushBrakes()</code> method.</p><p>We can also spy on method calls. Testing the <code>StatusPanel</code> class is the next logical step. It provides the user different pieces of information regarding the remote controlled car. Let\'s write a test that checks if the <code>StatusPanel</code> object is asked about the car\'s speed. We\'ll create a spy for it:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class SpyingStatusPanel extends StatusPanel {\n	private $speedWasRequested = false;\n	function getSpeed() {\n		$this-&gt;speedWasRequested = true;\n	}\n	function speedWasRequested() {\n		return $this-&gt;speedWasRequested;\n	}\n}</pre><p>Then, we modify our test to use the spy:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItCanStop() {\n		$halfBrakingPower = 50;\n		$electronicsSpy = new SpyingElectronics();\n		$statusPanelSpy = new SpyingStatusPanel();\n		$carController = new CarController();\n		$carController-&gt;pushBrakes($halfBrakingPower, $electronicsSpy, $statusPanelSpy);\n		$this-&gt;assertEquals($halfBrakingPower, $electronicsSpy-&gt;getBrakingPower());\n		$this-&gt;assertTrue($statusPanelSpy-&gt;speedWasRequested());\n	}</pre><p>Note that I did not write a separate test.</p><blockquote><p>The recommendation of \"one assertion per test\" is good to follow, but when your test describes an action requiring several steps or states, using more than one assertion in the same test is acceptable.</p></blockquote><p>Even more, this keeps your assertions about a single concept in one place. This helps eliminate duplicate code by not requiring you to repeatedly set up the same conditions for your SUT.</p><p>And now the implementation:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function pushBrakes($brakingPower, Electronics $electronics, StatusPanel $statusPanel = null) {\n		$statusPanel = $statusPanel ? : new StatusPanel();\n		$electronics-&gt;pushBrakes($brakingPower);\n		$statusPanel-&gt;getSpeed();\n	}</pre><p>There\'s just a small, tiny thing bothering me: the name of this test is <code>testItCanStop()</code>. That clearly implies that we push the brakes until the car comes to a complete stop. We, however, called the method <code>pushBrakes()</code>, which is not quite correct. Time to refactor:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function stop($brakingPower, Electronics $electronics, StatusPanel $statusPanel = null) {\n		$statusPanel = $statusPanel ? : new StatusPanel();\n		$electronics-&gt;pushBrakes($brakingPower);\n		$statusPanel-&gt;getSpeed();\n	}</pre><p>Don\'t forgot to change the method call in the test also.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">$carController-&gt;stop($halfBrakingPower, $electronicsSpy, $statusPanelSpy);</pre><blockquote\nclass=\"pullquote\"><p>Indirect output is something we can\'t directly observe.</p></blockquote><p>At this point, we need to think about our braking system and how it works. There are several possibilities, but for this example, assume that the provider of the toy car specified that braking happens in discreet intervals. Calling an <code>Electronics</code> object\'s <code>pushBreakes()</code> method pushes the brake for a discreet amount of time and then releases it. The time interval is unimportant to us, but let\'s imagine it is a fraction of a second. With such a small time interval, we have to continuously send <code>pushBrakes()</code> commands until the speed is zero.</p><p>Spies, by definition, are more capable stubs, and they can also control indirect input if needed. Let\'s make our <code>StatusPanel</code> spy more capable and offer some value for the speed. I think the first call should provide a positive speed--let\'s say the value of <code>1</code>. The second call will provide the speed of <code>0</code>.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class SpyingStatusPanel extends StatusPanel {\n	private $speedWasRequested = false;\n	private $currentSpeed = 1;\n	function getSpeed() {\n		if ($this-&gt;speedWasRequested) $this-&gt;currentSpeed = 0;\n		$this-&gt;speedWasRequested = true;\n		return $this-&gt;currentSpeed;\n	}\n	function speedWasRequested() {\n		return $this-&gt;speedWasRequested;\n	}\n	function spyOnSpeed() {\n		return $this-&gt;currentSpeed;\n	}\n}</pre><p>The overridden <code>getSpeed()</code> method returns the appropriate speed value via the <code>spyOnSpeed()</code> method. Let\'s add a third assertion to our test:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItCanStop() {\n		$halfBrakingPower = 50;\n		$electronicsSpy = new SpyingElectronics();\n		$statusPanelSpy = new SpyingStatusPanel();\n		$carController = new CarController();\n		$carController-&gt;stop($halfBrakingPower, $electronicsSpy, $statusPanelSpy);\n		$this-&gt;assertEquals($halfBrakingPower, $electronicsSpy-&gt;getBrakingPower());\n		$this-&gt;assertTrue($statusPanelSpy-&gt;speedWasRequested());\n		$this-&gt;assertEquals(0, $statusPanelSpy-&gt;spyOnSpeed());\n	}</pre><p>According to the last assertion, the speed should have a speed value of <code>0</code> after the <code>stop()</code> method finishes execution. Running this test against our production code results in a failure with a cryptic message:</p><pre class=\"brush: plain; title: ; notranslate\" title=\"\">1) CarControllerTest::testItCanStop\nFailed asserting that 1 matches expected 0.</pre><p>Let\'s add our own custom assertion message:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">$this-&gt;assertEquals(0, $statusPanelSpy-&gt;spyOnSpeed(),\n	\'Expected speed to be 0 (zero) after stopping but it actually was \' . $statusPanelSpy-&gt;spyOnSpeed());</pre><p>That produces a much more readable failure message:</p><pre class=\"brush: plain; title: ; notranslate\" title=\"\">1) CarControllerTest::testItCanStop\nExpected speed to be 0 (zero) after stopping but it actually was 1\nFailed asserting that 1 matches expected 0.</pre><p>Enough failures! Let\'s make it pass.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function stop($brakingPower, Electronics $electronics, StatusPanel $statusPanel = null) {\n		$statusPanel = $statusPanel ? : new StatusPanel();\n		$electronics-&gt;pushBrakes($brakingPower);\n		if ($statusPanel-&gt;getSpeed()) $this-&gt;stop($brakingPower, $electronics, $statusPanel);\n	}</pre><p>I love recursion; it is always easier to test recursion than loops. Easier testing means simpler code, which in turn means a better algorithm. Check out the <a\nhref=\"http://cleancoder.posterous.com/the-transformation-priority-premise\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'cleancoder.posterous.com\']);\">The Transformation Priority Premise</a> for more on this subject.</p><h3>Getting Back to PHPUnit\'s Mocking Framework</h3><p>Enough with the extra classes. Let\'s rewrite this using PHPUnit\'s mocking framework and eliminate those pure spies. Why?</p><blockquote><p>Because PHPUnit offers better and simpler mocking syntax, less code, and some nice predefined methods.</p></blockquote><p>I usually create pure spies and stubs only when mocking them with <code>getMock()</code> would be too complicated. If your classes are so complex that <code>getMock()</code> can\'t handle them, then you have a problem with your production code--not with you tests.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItCanStop() {\n		$halfBrakingPower = 50;\n		$electronicsSpy = $this-&gt;getMock(\'Electronics\');\n		$electronicsSpy-&gt;expects($this-&gt;exactly(2))-&gt;method(\'pushBrakes\')-&gt;with($halfBrakingPower);\n		$statusPanelSpy = $this-&gt;getMock(\'StatusPanel\');\n		$statusPanelSpy-&gt;expects($this-&gt;at(0))-&gt;method(\'getSpeed\')-&gt;will($this-&gt;returnValue(1));\n		$statusPanelSpy-&gt;expects($this-&gt;at(1))-&gt;method(\'getSpeed\')-&gt;will($this-&gt;returnValue(0));\n		$carController = new CarController();\n		$carController-&gt;stop($halfBrakingPower, $electronicsSpy, $statusPanelSpy);\n	}</pre><blockquote\nclass=\"pullquote\"><p>The total of all methods, public and private, accessible through public methods represent the behavior of an object.</p></blockquote><p>A line by line explanation of the above code:</p><ul><li>set half braking power = 50</li><li>create an <code>Electronics</code> mock</li><li>expect method <code>pushBrakes()</code> to execute exactly two times with the above specified braking power</li><li>create a <code>StatusPanel</code> mock</li><li>return <code>1</code> on first <code>getSpeed()</code> call</li><li>return <code>0</code> on second <code>getSpeed()</code> execution</li><li>call the tested <code>stop()</code> method on a real <code>CarController</code> object</li></ul><p>Probably the most interesting thing in this code is the <code>$this->at($someValue)</code> method. PHPUnit counts the amount of calls to that mock. Counting happens on the mock level; so, calling multiple methods on <code>$statusPanelSpy</code> would increment the counter. This may seem a little counter-intuitive at first; so let\'s look at an example.</p><p>Presume we want to check the fuel level on each call to <code>stop()</code>. The code would look like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function stop($brakingPower, Electronics $electronics, StatusPanel $statusPanel = null) {\n		$statusPanel = $statusPanel ? : new StatusPanel();\n		$electronics-&gt;pushBrakes($brakingPower);\n		$statusPanel-&gt;thereIsEnoughFuel();\n		if ($statusPanel-&gt;getSpeed()) $this-&gt;stop($brakingPower, $electronics, $statusPanel);\n	}</pre><p>This will break our test. You may be confused why, but you will get the following message:</p><pre class=\"brush: plain; title: ; notranslate\" title=\"\">1) CarControllerTest::testItCanStop\nExpectation failed for method name is equal to &lt;string:pushBrakes&gt; when invoked 2 time(s).\nMethod was expected to be called 2 times, actually called 1 times.\n</pre><p>It is pretty obvious that <code>pushBrakes()</code> should be called two times. Why then do we get this message? Because of the <code>$this->at($someValue)</code> expectation. The counter increments as follows:</p><ul><li>first call to <code>stop()</code> -&gt; first call to <code>thereIsEnougFuel()</code> =&gt; internal counter at <code>0</code></li><li>first call to <code>stop()</code> -&gt; first call to <code>getSpeed()</code> =&gt; internal counter at 1 <strong>and</strong> return <code>0</code></li><li>second call to <code>stop()</code> never happens =&gt; second call to <code>getSpeed()</code> never happens</li></ul><p>Each call to <strong>any</strong> mocked method on <code>$statusPanelSpy</code> increments PHPUnit\'s internal counter.</p><hr\n/><h2> <span>Step 9:</span> A Test Fake</h2><blockquote\nclass=\"pullquote\"><p>If public methods are akin to messages, then private methods are similar to thoughts.</p></blockquote><p>A test fake is a simpler implementation of a production code object. This is a very similar definition to test stubs. In reality, Fakes and Stubs are very similar as per external behavior. Both are objects mimicking the behavior of some other real objects, and both implement a method to control indirect input. The difference is that Fakes are much more closer to a real object than to a dummy object.</p><p>A Stub is basically a dummy object whose methods return predefined values. A Fake, however, does a complete implementation of a real object in a much simpler way. Probably the most common example is an <code>InMemoryDatabase</code> to perfectly simulate a real database class without actually writing to the data store. Thus, testing becomes faster.</p><p>Test Fakes should not implement any methods to directly control input or return observable state. They are not used to be questioned; they are used to provide--not observe. Most common use cases of Fakes are when the real Dependent on Component (DOC) is not yet written, it is too slow (like a database), or the real DOC is not available in the testing environment.</p><hr\n/><h2> <span>Step 10:</span> Conclusions</h2><p>The most important mock functionality is controlling the DOC. It also provides a great way to control indirect I/O with the help of dependency injection techniques.</p><p>There are two main opinions about mocking:</p><blockquote\nclass=\"pullquote\"><p>Some say that mocking is bad...</p></blockquote><ul><li>Some say that <strong>mocking is bad</strong>, and they are right. Mocking does something subtle and ugly: it binds too much of the tests to the implementation. Whenever possible, the test should be as independent on the implementation as possible. Black box testing is always preferable to white box testing. Always test state if you can; don\'t mock behavior. Being anti-mockist encourages bottom-up development and design. This means that the small component parts of the system are created first and then combined into a harmonious structure.</li><li>Some say that <strong>mocking is good</strong>, and they are right. Mocking does something subtle and beautiful; it defines behavior. It makes us think much more from the point of view of a user. Mockists usually use a top-down approach to implementation and design. They start with the topmost class in the system and write the first test by mocking some other imaginary DOC that is not yet implemented. The components of the system appear and evolve based on the mocks created at one level higher.</li></ul><blockquote><p>This being said, it\'s up to you to decide which way to go.</p></blockquote><p>Some prefer to be mockists while others prefer state testing. Each approach has its pros and cons. An all-mocked system offers extra behavioral information in the tests. An all-state system offers more details about the components, but it may also hide some behavior.</p><hr\n/><h2>Additional References and Books</h2><ul><li><a\nhref=\"http://www.phpunit.de/manual/3.6/en/test-doubles.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.phpunit.de\']);\">The official PHPUnit mocking documentation</a></li><li><a\nhref=\"http://martinfowler.com/articles/mocksArentStubs.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'martinfowler.com\']);\">Mocks Aren\'t Stubs a blog post by Martin Fowler</a></li><li><a\nhref=\"http://cleancoder.posterous.com/the-transformation-priority-premise\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'cleancoder.posterous.com\']);\">The Transformation Priority Premise a blog post by Robert C. Martin</a></li><li><a\nhref=\"http://www.amazon.com/xUnit-Test-Patterns-Refactoring-Code/dp/0131495054\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.amazon.com\']);\">xUnit Test Patterns: Refactoring Test Code a book by Gerard Meszaros</a></li><li><a\nhref=\"http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052/ref=sr_1_1?s=books&#038;ie=UTF8&#038;qid=1344173305&#038;sr=1-1&#038;keywords=working+effectively+with+legacy+code\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.amazon.com\']);\">Working Effectively with Legacy Code a book by Michael Feather</a></li></ul><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(26,3,1,1358049616,NULL,' Hands-On Unit Testing With PHPUnit ','In this screencast, we’ll build a relatively simple class, using TDD techniques. Along the way, we’ll discuss various PHPUnit methods, how to create mock objects, and more! I encourage you to work along; it’s the best way to learn!(Continue)','In this screencast, we’ll build a relatively simple class, using TDD techniques. Along the way, we’ll discuss various PHPUnit methods, how to create mock objects, and more! I encourage you to work along; it’s the best way to learn!(Continue)',1,0,'hands-on-unit-testing-with-phpunit',381,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2131_handsOnPHPUnit/unit-testing.jpg','<div\nclass=\"session-post\"><em>This entry is part 8 of 12 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/test-driven-php/\" >Test-Driven PHP</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/php/all-about-mocking-with-phpunit/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/php/how-to-use-selenium-2-with-phpunit/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/articles/news/its-time-to-dig-in/\" >It\'s Time to Dig In</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/\" >The Newbie\'s Guide to TDD</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/test-driven-development-in-php-first-steps/\" >First Steps</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/automatic-testing-for-tdd-with-php/\" >Automatic Testing</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/lets-tdd-a-simple-app-in-php/\" >Let\'s TDD a Simple App</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/deciphering-testing-jargon/\" >Deciphering Testing Jargon</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/all-about-mocking-with-phpunit/\" >All About Mocking in PHPUnit</a></li><li>Hands-On Testing With PHPUnit</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/how-to-use-selenium-2-with-phpunit/\" >How to Use Selenium 2 With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/articles/interviews/chatting-with-the-grumpy-php-programmer\" >Chatting With The Grumpy PHP Programmer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/evolving-toward-a-persistence-layer/\" >Evolving Toward a Persistence Layer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/mockery-a-better-way/\" >Mockery: A Better Way</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-27454\'), post_id: 27454, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this screencast, we&#8217;ll build a relatively simple class, using TDD techniques. Along the way, we&#8217;ll discuss various PHPUnit methods, how to create mock objects, and more! I encourage you to work along; it&#8217;s the best way to learn!<br\n/> <span\nid=\"more-27454\"></span></p><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"600\" height=\"375\" src=\"http://www.youtube.com/embed/4BXpi7056RM\" frameborder=\"0\" allowfullscreen></iframe></p><div><em>Please choose 720p for optimal viewing.</em></div></div><hr\n/><h2>Closing Thoughts</h2><p>As with anything, there are various ways to approach test-driven development. Like they say, it doesn&#8217;t matter as much how you test, as long as you are testing. If you have a different approach, let us know in the comments. I&#8217;d love to learn more!<div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(27,3,1,1358049616,NULL,' Evolving Toward a Persistence Layer ','One of the most confusing design pattern is persistence. The need for an application to persist its internal state and data is so tremendous that there are likely tens – if not hundreds – of different technologies to address this single problem. Unfortunately, no technology is a magic bullet. Each application, and sometimes each component of the application, is unique in its own way – thus, requiring a unique solution.(Continue)','One of the most confusing design pattern is persistence. The need for an application to persist its internal state and data is so tremendous that there are likely tens – if not hundreds – of different technologies to address this single problem. Unfortunately, no technology is a magic bullet. Each application, and sometimes each component of the application, is unique in its own way – thus, requiring a unique solution.(Continue)',1,0,'evolving-toward-a-persistence-layer',137,0,'http://nettuts.s3.amazonaws.com/2118_persistence/persistence-layer.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-27138\'), post_id: 27138, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>One of the most confusing design pattern is persistence. The need for an application to persist its internal state and data is so tremendous that there are likely tens &#8211; if not hundreds &#8211; of different technologies to address this single problem. Unfortunately, no technology is a magic bullet. Each application, and sometimes each component of the application, is unique in its own way &#8211; thus, requiring a unique solution.</p><p><span\nid=\"more-27138\"></span></p><p>In this tutorial, I will teach you some best practices to help you determine which approach to take, when working on future applications. I will briefly discuss some high level design concerns and principles, followed by a more detailed view on the Active Record design pattern, combined with a few words about the Table Data Gateway design pattern.</p><blockquote><p>Of course, I will not merely teach you the theory behind the design, but I will also guide you through an example that begins as random code and transforms into a structured persistence solution.</p></blockquote><hr\n/><h2>Two Tales of a Single Application</h2><h3>The Database is for Data, not for Code</h3><blockquote\nclass=\"pullquote\"><p>Today, no programmer can understand this archaic system.</p></blockquote><p>The oldest project I have to work on began in the year 2000. Back then, a team of programmers started a new project by evaluating different requirements, thought about the workloads the application will have to handle, tested different technologies and reached a conclusion: all the PHP code of the application, except the <code>index.php</code> file, should reside in a MySQL database. Their decision may sound outrageous today, but it was acceptable twelve years ago (OK&#8230; maybe not).</p><p>They started by creating their base tables, and then other tables for each web page. The solution worked&#8230; for a time. The original authors knew how to maintain it, but then each author left one by one&#8211;leaving the code base in the hands of other newcomers.</p><p>Today, no programmer can understand this archaic system. Everything starts with a MySQL query from <code>index.php</code>. The result of that query returns some PHP code that executes even more queries. The simplest scenario involves at least five database tables. Naturally, there are no tests or specifications. Modifying anything is a no-go, and we simply have to rewrite the entire module if something goes wrong.</p><blockquote><p>The original developers ignored the fact that a database should only contain data, not business logic or presentation. They mixed PHP and HTML code with MySQL and ignored high level design concepts.</p></blockquote><h3>The HTML is for Presentation and Presentation Only</h3><blockquote\nclass=\"pullquote\"><p>All applications should concentrate on respecting a clean, high level design.</p></blockquote><p>As time passed, the new programmers needed to add additional features to the system while, at the same time, fixing old bugs. There was no way to continue using MySQL tables for everything, and everyone involved in maintaining the code agreed that its design was horribly flawed. So the new programmers evaluated different requirements, thought about the workloads the application will have to handle, tested different technologies and reached a conclusion: they decided to move as much code as possible to the final presentation. Again, this decision may sound outrageous today, but it was light years from the previous outrageous design.</p><p>The developers adopted a templating framework and based the application around it, starting every new feature and module with a new template. It was easy; the template was descriptive and they knew where to find the code that performs a specific task. But that&#8217;s how they ended up with template files containing the engine&#8217;s Domain Specific Language (DSL), HTML, PHP and of course MySQL queries.</p><p>Today, my team just watches and wonders. It is a miracle that many of the views actually work. It can take a hefty amount of time just to determine how information gets from the database to the view. Like its predecessor, it&#8217;s all a big mess!</p><p>Those developers ignored the fact that a view should not contain business or persistence logic. They mixed PHP and HTML code with MySQL and ignored high level design concepts.</p><hr/><h2>High Level Application Design</h2><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2118_persistence/HighLevelDesign.png\" alt=\"High level schema\" /></div><blockquote\nclass=\"pullquote\"><p>A mock is an object that acts like its real counterpart, but doesn’t execute the real code.</p></blockquote><p>All applications should concentrate on respecting a clean, high level design. This is not always achievable, but it should be a high priority. A good high level design has well-isolated business logic. Object creation, persistence, and delivery are outside of the core and <strong>dependencies point only toward the business logic.</strong></p><p>Isolating the business logic opens the door to great possibilities, and everything becomes somewhat of a plugin, if the external dependencies always point towards the business logic. For example, you could swap the heavy MySQL database with a lightweight SQLite3 database.</p><ul><li>Imagine being able to drop your current MVC framework and replacing it with another, without touching the business logic.<li>Imagine delivering the results of your application through a third party API and not over HTTP, or changing any third party technology you use today (except the programming language of course) without touching the business logic (or without much hassle).</p><li>Imagine making all these changes and your tests would still pass.</ul><hr/><h2>Implementing a Working Solution for Persisting a Blog Post</h2><p>To better identify the problems with a bad, albeit working, design, I will start with a simple example of, you guessed it, a blog. Throughout this tutorial, I will follow some test-driven development (TDD) principles and make the tests easily understandable &#8211; even if you don&#8217;t have TDD experience. Let&#8217;s imagine that you use a MVC framework. When saving a blog post, a controller named <code>BlogPost</code> executes a <code>save()</code> method. This method connects to an SQLite database to store a blog post in the database.</p><p>Let&#8217;s create a folder, called <em>Data</em> in our code&#8217;s folder and browse to that directory in the console. Create a database and a table, like this:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">$ sqlite3 MyBlog\nSQLite version 3.7.13 2012-06-11 02:05:22\nEnter &quot;.help&quot; for instructions\nEnter SQL statements terminated with a &quot;;&quot;\nsqlite&gt; create table BlogPosts (\n	title varchar(120) primary key,\n	content text,\n	published_timestamp timestamp);</pre><p>Our <code>save()</code> method gets the values from the form as an array, called <code>$data</code>:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class BlogPostController {\n	function save($data) {\n		$dbhandle = new SQLite3(\'Data/MyBlog\');\n		$query = \'INSERT INTO BlogPosts VALUES(&quot;\' . $data[\'title\'] . \'&quot;,&quot;\' . $data[\'content\'] . \'&quot;,&quot;\' . time(). \'&quot;)\';\n		$dbhandle-&gt;exec($query);\n	}\n}</pre><p>This code works, and you can verify it by calling it from another class, passing a predefined <code>$data</code> array, like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">$this-&gt;object = new BlogPostController;\n$data[\'title\'] = \'First Post Title\';\n$data[\'content\'] = \'Some cool content for the first post\';\n$data[\'published_timestamp\'] = time();\n$this-&gt;object-&gt;save($data);</pre><p>The content of the <code>$data</code> variable was indeed saved in the database:</p><pre class=\"brush: plain; title: ; notranslate\" title=\"\">sqlite&gt; select * from BlogPosts;\nFirst Post Title|Some cool content for the first post|1345665216</pre><hr/><h2>Characterization Tests</h2><blockquote\nclass=\"pullquote\"><p>Inheritance is the strongest type of dependency.</p></blockquote><p>A characterization test describes and verifies the current behavior of preexisting code. It is most frequently used to characterize legacy code, and it makes refactoring that code much easier.</p><p>A characterization test can test a module, a unit, or go all the way from the UI to the database; it all depends on what we want to test. In our case, such a test should exercise the controller and verify the contents of the database. This is not a typical unit, functional, or integration test, and it usually cannot be associated with either of those testing levels.</p><p>Characterization tests are a temporary safety net, and we typically delete them after the code is properly refactored and unit tested. Here is an implementation of a test, placed in the <em>Test</em> folder:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">require_once \'../BlogPostController.php\';\nclass BlogPostControllerTest extends PHPUnit_Framework_TestCase {\n	private $object;\n	private $dbhandle;\n	function setUp() {\n		$this-&gt;object = new BlogPostController;\n		$this-&gt;dbhandle = new SQLite3(\'../Data/MyBlog\');\n	}\n	function testSave() {\n		$this-&gt;cleanUPDatabase();\n		$data[\'title\'] = \'First Post Title\';\n		$data[\'content\'] = \'Some cool content for the first post\';\n		$data[\'published_timestamp\'] = time();\n		$this-&gt;object-&gt;save($data);\n		$this-&gt;assertEquals($data, $this-&gt;getPostsFromDB());\n	}\n	private function cleanUPDatabase() {\n		$this-&gt;dbhandle-&gt;exec(\'DELETE FROM BlogPosts\');\n	}\n	private function getPostsFromDB() {\n		$result = $this-&gt;dbhandle-&gt;query(\'SELECT * FROM BlogPosts\');\n		return $result-&gt;fetchArray(SQLITE3_ASSOC);\n	}\n}</pre><p>This test creates a new controller object and executes its <code>save()</code> method. The test then reads the information from the database and compares it with the predefined <code>$data[]</code> array. We preform this comparison by using the <code>$this->assertEquals()</code> method, an assertion that presumes that its parameters are equal. If they are different, the test fails. Also, we clean the <code>BlogPosts</code> database table each time we run the test.</p><blockquote><p> Legacy code is untested code. &#8211; Michael Feathers</p></blockquote><p>With our test up and running, let&#8217;s clean a little of the code. Open the database with the whole directory name and use <code>sprintf()</code> to compose the query string. This results in much simpler code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class BlogPostController {\n	function save($data) {\n		$dbhandle = new SQLite3(__DIR__ . \'/Data/MyBlog\');\n		$query = sprintf(\'INSERT INTO BlogPosts VALUES (&quot;%s&quot;,&quot;%s&quot;,&quot;%s&quot;)\', $data[\'title\'], $data[\'content\'], time());\n		$dbhandle-&gt;exec($query);\n	}\n}</pre><hr/><h2>The Table Data Gateway Pattern</h2><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2118_persistence/GatewayPattern.png\" alt=\"Gateway Pattern\" /></div><p>We recognize that our code needs to be moved from the controller to the business logic and persistence layer, and the Gateway Pattern can help us get started down that path. Here is the revised <code>testSave()</code> method:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItCanPersistABlogPost() {\n		$data = array(\'title\' =&gt; \'First Post Title\', \'content\' =&gt; \'Some content.\', \'timestamp\' =&gt; time());\n		$blogPost = new BlogPost($data[\'title\'], $data[\'content\'], $data[\'timestamp\']);\n		$mockedPersistence = $this-&gt;getMock(\'SqlitePost\');\n		$mockedPersistence-&gt;expects($this-&gt;once())-&gt;method(\'persist\')-&gt;with($blogPost);\n		$controller = new BlogPostController($mockedPersistence);\n		$controller-&gt;save($data);\n	}</pre><p>This represents how we want to use the <code>save()</code> method on the controller. We expect the controller to call a method named <code>persist($blogPostObject)</code> on the gateway object. Let&#8217;s change our <code>BlogPostController</code> to do that:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class BlogPostController {\n	private $gateway;\n	function __construct(Gateway $gateway = null) {\n		$this-&gt;gateway = $gateway ? : new SqlitePost();\n	}\n	function save($data) {\n		$this-&gt;gateway-&gt;persist(new BlogPost($data[\'title\'], $data[\'content\'], $data[\'timestamp\']));\n	}\n}</pre><blockquote\nclass=\"pullquote\"><p>A good high level design has a well isolated business logic.</p></blockquote><p>Nice! Our <code>BlogPostController</code> became much simpler. It uses the gateway (either supplied or instantiated) to persist the data by calling its <code>persist()</code> method. There is absolutely no knowledge about how the data is persisted; the persistence logic became modular.</p><p>In the previous test, we created the controller with a <em>mock</em> persistence object, ensuring that data never gets written to the database when running the test. In production code, the controller creates its own persisting object to persist the data using a <code>SqlitePost</code> object. A mock is an object that acts like its real counterpart, but it doesn&#8217;t execute the real code.</p><p>Now let&#8217;s retrieve a blog post from the data store. It&#8217;s just as easy as saving data, but please note that I refactored the test a bit.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">require_once \'../BlogPostController.php\';\nrequire_once \'../BlogPost.php\';\nrequire_once \'../SqlitePost.php\';\nclass BlogPostControllerTest extends PHPUnit_Framework_TestCase {\n		private $mockedPersistence;\n		private $controller;\n		private $data;\n	function setUp() {\n		$this-&gt;mockedPersistence = $this-&gt;getMock(\'SqlitePost\');\n		$this-&gt;controller = new BlogPostController($this-&gt;mockedPersistence);\n		$this-&gt;data = array(\'title\' =&gt; \'First Post Title\', \'content\' =&gt; \'Some content.\', \'timestamp\' =&gt; time());\n	}\n	function testItCanPersistABlogPost() {\n		$blogPost = $this-&gt;aBlogPost();\n		$this-&gt;mockedPersistence-&gt;expects($this-&gt;once())-&gt;method(\'persist\')-&gt;with($blogPost);\n		$this-&gt;controller-&gt;save($this-&gt;data);\n	}\n	function testItCanRetrievABlogPostByTitle() {\n		$expectedBlogpost = $this-&gt;aBlogPost();\n		$this-&gt;mockedPersistence-&gt;expects($this-&gt;once())\n				-&gt;method(\'findByTitle\')-&gt;with($this-&gt;data[\'title\'])\n				-&gt;will($this-&gt;returnValue($expectedBlogpost));\n		$this-&gt;assertEquals($expectedBlogpost, $this-&gt;controller-&gt;findByTitle($this-&gt;data[\'title\']));\n	}\n	public function aBlogPost() {\n		return new BlogPost($this-&gt;data[\'title\'], $this-&gt;data[\'content\'], $this-&gt;data[\'timestamp\']);\n	}\n}</pre><p>And the implementation in the <code>BlogPostController</code> is just a one statement method:</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function findByTitle($title) {\n		return $this-&gt;gateway-&gt;findByTitle($title);\n	}</pre><p>Isn&#8217;t this cool? The <code>BlogPost</code> class is now part of the business logic (remember the high level design schema from above). The UI/MVC creates <code>BlogPost</code> objects and uses concrete <code>Gateway</code> implementations to persist the data. All dependencies point to the business logic.</p><p>There&#8217;s only one step left: create a concrete implementation of <code>Gateway</code>. Following is the <code>SqlitePost</code> class:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">require_once \'Gateway.php\';\nclass SqlitePost implements Gateway {\n	private $dbhandle;\n	function __construct($dbhandle = null) {\n		$this-&gt;dbhandle = $dbhandle ? : new SQLite3(__DIR__ . \'/Data/MyBlog\');\n	}\n	public function persist(BlogPost $blogPost) {\n		$query = sprintf(\'INSERT INTO BlogPosts VALUES (&quot;%s&quot;,&quot;%s&quot;,&quot;%s&quot;)\', $blogPost-&gt;title, $blogPost-&gt;content, $blogPost-&gt;timestamp);\n		$this-&gt;dbhandle-&gt;exec($query);\n	}\n	public function findByTitle($title) {\n		$SqliteResult = $this-&gt;dbhandle-&gt;query(sprintf(\'SELECT * FROM BlogPosts WHERE title = &quot;%s&quot;\', $title));\n		$blogPostAsString = $SqliteResult-&gt;fetchArray(SQLITE3_ASSOC);\n		return new BlogPost($blogPostAsString[\'title\'], $blogPostAsString[\'content\'], $blogPostAsString[\'timestamp\']);\n	}\n}</pre><p><i>Note: The test for this implementation is also available in the source code, but, due to its complexity and length, I did not include it here.</i></p><hr/><h2>Moving Toward the Active Record Pattern</h2><p>Active Record is one of the most controversial patterns. Some embrace it (like Rails and CakePHP), and others avoid it. Many <i>Object Relational Mapping</i> (ORM) applications use this pattern to save objects in tables. Here is its schema:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2118_persistence/ActiveRecordPattern.png\" alt=\"Active record pattern\" /></div><p>As you can see, Active Record-based objects can persist and retrieve themselves. This is usually achieved by extending an <code>ActiveRecordBase</code> class, a class that knows how to work with the database.</p><p>The biggest problem with Active Record is the <i>extends</i> dependency. As we all know, inheritance is the strongest type of dependency, and it&#8217;s best to avoid it most of the time.</p><p>Before we go further, here is where we are right now:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2118_persistence/GatewayOnHighLevelDesign.png\" alt=\"Gateway in high level schema\" /></div><p>The gateway interface belongs to the business logic, and its concrete implementations belong to the persistence layer. Our <code>BlogPostController</code> has two dependencies, both pointing toward the business logic: the <code>SqlitePost</code> gateway and <code>BlogPost</code> class.</p><h3>Going for Active Record</h3><blockquote\nclass=\"pullquote\"><p>There are many other patterns, like the <i>Proxy Pattern</i>, that are closely related to persistence.</p></blockquote><p>If we were to follow the Active Record pattern exactly as it is presented by Martin Fowler in his 2003 book, <a\nhref=\"http://www.amazon.com/gp/product/0321127420/ref=as_li_ss_tl?ie=UTF8&#038;camp=1789&#038;creative=390957&#038;creativeASIN=0321127420&#038;linkCode=as2&#038;tag=nett02-20\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.amazon.com\']);\">Patterns of Enterprise Application Architecture</a>, then we would need to move the SQL queries into the <code>BlogPost</code> class. This, however, has the problem of violating both the <i>Dependency Inversion Principle</i> and the <i>Open Closed Principle</i>. The Dependency Inversion Principle states that:</p><ul><li>High-level modules should not depend on low-level modules. Both should depend on abstractions.</li><li>Abstractions should not depend upon details. Details should depend upon abstractions.</li></ul><p>And the Open Closed Principle states: software entities (classes, modules, functions, etc.) should be open for extension but closed for modification. We will take a more interesting approach and integrate the gateway into our Active Record solution.</p><p>If you try to do this on your own, you probably already realized that adding the Active Record pattern to the code will mess things up. For this reason, I took the option of disabling the controller and <code>SqlitePost</code> tests to concentrate only on the <code>BlogPost</code> class. The first steps are: make <code>BlogPost</code> load itself by setting its constructor as private and connect it to the gateway interface. Here is the first version of the <code>BlogPostTest</code> file:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">require_once \'../BlogPost.php\';\nrequire_once \'../InMemoryPost.php\';\nrequire_once \'../ActiveRecordBase.php\';\nclass BlogPostTest extends PHPUnit_Framework_TestCase {\n	function testItCanConnectPostToGateway() {\n		$blogPost = BlogPost::load();\n		$blogPost-&gt;setGateway($this-&gt;inMemoryPost());\n		$this-&gt;assertEquals($blogPost-&gt;getGateway(), $this-&gt;inMemoryPost());\n	}\n	function testItCanCreateANewAndEmptyBlogPost() {\n		$blogPost = BlogPost::load();\n		$this-&gt;assertNull($blogPost-&gt;title);\n		$this-&gt;assertNull($blogPost-&gt;content);\n		$this-&gt;assertNull($blogPost-&gt;timestamp);\n		$this-&gt;assertInstanceOf(\'Gateway\', $blogPost-&gt;getGateway());\n	}\n	private function inMemoryPost() {\n		return new InMemoryPost();\n	}\n}</pre><p>It tests that a blog post is correctly initialized and that it can have a gateway if set. It is a good practice to use multiple asserts when they all test the same concept and logic.</p></blockquote><p>Our second test has several assertions, but all of them refer to the same common concept of <i>empty blog post</i>. Of course, the <code>BlogPost</code> class has also been modified:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class BlogPost {\n	private $title;\n	private $content;\n	private $timestamp;\n	private static $gateway;\n	private function __construct($title = null, $content = null, $timestamp = null) {\n		$this-&gt;title = $title;\n		$this-&gt;content = $content;\n		$this-&gt;timestamp = $timestamp;\n	}\n	function __get($name) {\n		return $this-&gt;$name;\n	}\n	function setGateway($gateway) {\n		self::$gateway = $gateway;\n	}\n	function getGateway() {\n		return self::$gateway;\n	}\n	static function load() {\n		if(!self::$gateway) self::$gateway = new SqlitePost();\n		return new self;\n	}\n}</pre><p>It now has a <code>load()</code> method that returns a new object with a valid gateway. From this point on, we will continue with the implementation of a <code>load($title)</code> method to create a new <code>BlogPost</code> with information from the database. For easy testing, I implemented an <code>InMemoryPost</code> class for persistence. It just keeps a list of objects in memory and returns information as desired:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class InMemoryPost implements Gateway {\n	private $blogPosts = array();\n	public function findByTitle($blogPostTitle) {\n		return array(\n			\'title\' =&gt; $this-&gt;blogPosts[$blogPostTitle]-&gt;title,\n			\'content\' =&gt; $this-&gt;blogPosts[$blogPostTitle]-&gt;content,\n			\'timestamp\' =&gt; $this-&gt;blogPosts[$blogPostTitle]-&gt;timestamp);\n	}\n	public function persist(BlogPost $blogPostObject) {\n		$this-&gt;blogPosts[$blogPostObject-&gt;title] = $blogPostObject;\n	}\n}</pre><p>Next, I realized that the initial idea of connecting the <code>BlogPost</code> to a gateway via a separate method was useless. So, I modified the tests, accordingly:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class BlogPostTest extends PHPUnit_Framework_TestCase {\n	function testItCanCreateANewAndEmptyBlogPost() {\n		$blogPost = BlogPost::load();\n		$this-&gt;assertNull($blogPost-&gt;title);\n		$this-&gt;assertNull($blogPost-&gt;content);\n		$this-&gt;assertNull($blogPost-&gt;timestamp);\n	}\n	function testItCanLoadABlogPostByTitle() {\n		$gateway = $this-&gt;inMemoryPost();\n		$aBlogPosWithData = $this-&gt;aBlogPostWithData($gateway);\n		$gateway-&gt;persist($aBlogPosWithData);\n		$this-&gt;assertEquals($aBlogPosWithData, BlogPost::load(\'some_title\', null, null, $gateway));\n	}\n	private function inMemoryPost() {\n		return new InMemoryPost();\n	}\n	private function aBlogPostWithData($gateway = null) {\n		return BlogPost::load(\'some_title\', \'some content\', \'123\', $gateway);\n	}\n}</pre><p>As you can see, I radically changed the way <code>BlogPost</code> is used.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class BlogPost {\n	private $title;\n	private $content;\n	private $timestamp;\n	private function __construct($title = null, $content = null, $timestamp = null) {\n		$this-&gt;title = $title;\n		$this-&gt;content = $content;\n		$this-&gt;timestamp = $timestamp;\n	}\n	function __get($name) {\n		return $this-&gt;$name;\n	}\n	static function load($title = null, $content = null, $timestamp = null, $gateway = null) {\n		$gateway = $gateway ? : new SqlitePost();\n		if(!$content) {\n			$postArray = $gateway-&gt;findByTitle($title);\n			if ($postArray) return new self($postArray[\'title\'], $postArray[\'content\'], $postArray[\'timestamp\']);\n		}\n		return new self($title, $content, $timestamp);\n	}\n}</pre><p>The <code>load()</code> method checks the <code>$content</code> parameter for a value and creates a new <code>BlogPost</code> if a value was supplied. If not, the method tries to find a blog post with the given title. If a post is found, it is returned; if there is none, the method creates an empty <code>BlogPost</code> object.</p><p>In order for this code to work, we will also need to change how the gateway works. Our implementation needs to return an associative array with <code>title</code>, <code>content</code>, and <code>timestamp</code> elements instead of the object itself. This is a convention I&#8217;ve chosen. You may find other variants, like a plain array, more attractive. Here are the modifications in <code>SqlitePostTest</code>:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItCanRetrieveABlogPostByItsTitle() {\n		[...]\n		//we expect an array instead of an object\n		$this-&gt;assertEquals($this-&gt;blogPostAsArray, $gateway-&gt;findByTitle($this-&gt;blogPostAsArray[\'title\']));\n	}\n	private function aBlogPostWithValues() {\n		//we use static load instead of constructor call\n		return $blogPost = BlogPost::load(\n				$this-&gt;blogPostAsArray[\'title\'],\n				$this-&gt;blogPostAsArray[\'content\'],\n				$this-&gt;blogPostAsArray[\'timestamp\']);\n	}</pre><p>And the implementation changes are:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	public function findByTitle($title) {\n		$SqliteResult = $this-&gt;dbhandle-&gt;query(sprintf(\'SELECT * FROM BlogPosts WHERE title = &quot;%s&quot;\', $title));\n		//return the result directly, don\'t construct the object\n		return $SqliteResult-&gt;fetchArray(SQLITE3_ASSOC);\n	}</pre><p>We are almost done. Add a <code>persist()</code> method to the <code>BlogPost</code> and call all the newly implemented methods from the controller. Here is the <code>persist()</code> method that will just use the gateway&#8217;s <code>persist()</code> method:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	private function persist() {\n		$this-&gt;gateway-&gt;persist($this);\n	}</pre><p>And the controller:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class BlogPostController {\n	function save($data) {\n		$blogPost = BlogPost::load($data[\'title\'], $data[\'content\'], $data[\'timestamp\']);\n		$blogPost-&gt;persist();\n	}\n	function findByTitle($title) {\n		return BlogPost::load($title);\n	}\n}</pre><p>The <code>BlogPostController</code> became so simple that I removed all of its tests. It simply calls the <code>BlogPost</code> object&#8217;s <code>persist()</code> method. Naturally, you&#8217;ll want to add tests if, and when, you have more code in the controller. The code download still contains a test file for the <code>BlogPostController</code>, but its content is commented.</p><hr\n/><h2>Conclusion</h2><blockquote\nclass=\"pullquote\"><p>This is just the tip of the iceberg.</p></blockquote><p>You&#8217;ve seen two different persistence implementations: the <i>Gateway</i> and <i>Active Record</i> patterns. From this point, you can implement an <code>ActiveRecordBase</code> abstract class to extend for all your classes that need persistence. This abstract class can use different gateways in order to persist data, and each implementation can even use different logic to fit your needs.</p><p>But this is just the tip of the iceberg. There are many other patterns, such as the <i>Proxy Pattern</i>, which are closely related to persistence; each pattern works for a particular situation. I recommend that you always implement the simplest solution first, and then implement another pattern when your needs change.</p><p>I hope you enjoyed this tutorial, and I eagerly await your opinions and alternative implementations to my solution within the comments below.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(28,3,1,1358049620,NULL,' Dependency Injection: Huh? ','Chances are, at some point in your learning, you’ve come across the term, “dependency injection.” If you’re still relatively early in your learning, you likely formed a confused expression and skipped over that part. Still, this is an important aspect of writing maintainable (and testable) code. In this article, I’ll explain it in as simple a way as I’m capable of.(Continue)','Chances are, at some point in your learning, you’ve come across the term, “dependency injection.” If you’re still relatively early in your learning, you likely formed a confused expression and skipped over that part. Still, this is an important aspect of writing maintainable (and testable) code. In this article, I’ll explain it in as simple a way as I’m capable of.(Continue)',1,0,'dependency-injection-huh',399,0,'https://d2o0t5hpnwv4c1.cloudfront.net/2117_dependency_injection/dependency-injection.jpg','',1),(29,3,1,1358049621,NULL,' Automatic Testing for TDD with PHP ','Traditional test-driven development can, at times, be cumbersome. You have to stop writing code in order to run your tests. Luckily, there are solutions, which provide the ability to automatically run your tests as you code. In this tutorial, you will learn how to use a Ruby gem, called watchr, to monitor your code and automatically run the appropriate tests whenever you save your work.(Continue)','Traditional test-driven development can, at times, be cumbersome. You have to stop writing code in order to run your tests. Luckily, there are solutions, which provide the ability to automatically run your tests as you code. In this tutorial, you will learn how to use a Ruby gem, called watchr, to monitor your code and automatically run the appropriate tests whenever you save your work.(Continue)',1,0,'automatic-testing-for-tdd-with-php',309,0,'https://d2o0t5hpnwv4c1.cloudfront.net/2101_autotest/preview.png','',1),(30,3,1,1358049622,NULL,' Vagrant: What, Why, and How ','This article will help walk you through using Vagrant to manage your virtual machine instances, and explain how you can take advantage of Puppet to provision various resources, like PHP and PostgreSQL.(Continue)','This article will help walk you through using Vagrant to manage your virtual machine instances, and explain how you can take advantage of Puppet to provision various resources, like PHP and PostgreSQL.(Continue)',1,0,'vagrant-what-why-and-how',292,0,'https://d2o0t5hpnwv4c1.cloudfront.net/2115_vagrant/vagrant.jpg','',1),(31,3,1,1358049653,NULL,' Let’s TDD a Simple App in PHP ','In this tutorial, I will present an end-to-end example of a simple application – made strictly with TDD in PHP. I will walk you through each step, one at a time, while explaining the decisions I made in order to get the task done. The example closely follows the rules of TDD: write tests, write code, refactor.(Continue)','In this tutorial, I will present an end-to-end example of a simple application – made strictly with TDD in PHP. I will walk you through each step, one at a time, while explaining the decisions I made in order to get the task done. The example closely follows the rules of TDD: write tests, write code, refactor.(Continue)',1,0,'lets-tdd-a-simple-app-in-php',357,0,'https://d2o0t5hpnwv4c1.cloudfront.net/2095_simpleApp/tdd.jpg','<div\nclass=\"session-post\"><em>This entry is part 5 of 12 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/test-driven-php/\" >Test-Driven PHP</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/php/automatic-testing-for-tdd-with-php/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/php/deciphering-testing-jargon/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/articles/news/its-time-to-dig-in/\" >It\'s Time to Dig In</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/\" >The Newbie\'s Guide to TDD</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/test-driven-development-in-php-first-steps/\" >First Steps</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/automatic-testing-for-tdd-with-php/\" >Automatic Testing</a></li><li>Let\'s TDD a Simple App</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/deciphering-testing-jargon/\" >Deciphering Testing Jargon</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/all-about-mocking-with-phpunit/\" >All About Mocking in PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/hands-on-unit-testing-with-phpunit/\" >Hands-On Testing With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/how-to-use-selenium-2-with-phpunit/\" >How to Use Selenium 2 With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/articles/interviews/chatting-with-the-grumpy-php-programmer\" >Chatting With The Grumpy PHP Programmer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/evolving-toward-a-persistence-layer/\" >Evolving Toward a Persistence Layer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/mockery-a-better-way/\" >Mockery: A Better Way</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-26186\'), post_id: 26186, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this tutorial, I will present an end-to-end example of a simple application &#8211; made strictly with TDD in PHP. I will walk you through each step, one at a time, while explaining the decisions I made in order to get the task done. The example closely follows the rules of TDD: write tests, write code, refactor.</p><p><span\nid=\"more-26186\"></span></p><hr\n/><h2> <span>Step 1 -</span> Introduction to TDD &#038; PHPUnit</h2><h3>Test Driven Development (TDD)</h3><p>TDD is a &#8220;test-first&#8221; technique to develop and design software. It is almost always used in agile teams, being one of the core tools of agile software development. TDD was first defined and introduced to the professional community by Kent Beck in 2002. Since then, it has become an accepted &#8211; and recommended &#8211; technique in everyday programming.</p><p>TDD has three core rules:</p><ol><li>You are not allowed to write any production code, if there is not a failing test to warrant it.</li><li>You are not allowed to write more of a unit test than is strictly necessary to make it fail. Not compiling / running is failing.</li><li>You are not allowed to write more production code than is strictly necessary to make the failing test pass.</li></ol><h3>PHPUnit</h3><p>PHPUnit is the tool that allows PHP programmers to perform unit testing, and practice test-driven development. It is a complete unit testing framework with mocking support. Even though there are a few alternative choices, PHPUnit is the most used and most complete solution for PHP today.</p><p>To install PHPUnit, you can either <a\nhref=\"http://net.tutsplus.com/tutorials/php/test-driven-development-in-php-first-steps/\" >follow along with the previous tutorial</a> in our &#8220;TDD in PHP&#8221; session, or you can use PEAR, as explained in the <a\nhref=\"http://www.phpunit.de/manual/3.6/en/installation.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.phpunit.de\']);\">official documentation</a>:</p><ul><li>become <code>root</code> or use <code>sudo</code></li><li>make sure you have the latest PEAR: <code>pear upgrade PEAR</code></li><li>enable auto discovery: <code>pear config-set auto_discover 1</code></li><li>install PHPUnit: <code>pear install pear.phpunit.de/PHPUnit</code></li></ul><blockquote><p>More information and instructions for installing extra PHPUnit modules can be found in the <a\nhref=\"http://www.phpunit.de/manual/3.6/en/installation.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.phpunit.de\']);\">official documentation</a>.</p></blockquote><p>Some Linux distributions offer <i>phpunit</i> as a precompiled package, though I always recommend an installation, via PEAR, because it ensures that the most recent and up-to-date version is installed and used.</p><h3>NetBeans &#038; PHPUnit</h3><p>If you&#8217;re a fan of NetBeans, you can configure it to work with PHPUnit by following these steps:</p><ul><li>Go to NetBeans&#8217; configuration (Tools / Options)</li><li>Select PHP / Unit Testing</li><li>Check that the &#8220;PHPUnit Script&#8221; entry points to a valid PHPUnit executable. If it does not, NetBeans will tell you this, so if you don&#8217;t see any red notices on the page, you are good to go. If not, look for the PHPUnit executable on your system and enter its path in the input field. For Linux systems, this path is typically <i>/usr/bin/phpunit</i>.</li></ul><p>If you do not use an IDE with unit testing support, you can always run your test directly from the console:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\ncd /my/applications/test/folder\nphpunit\n</pre><hr\n/><h2> <span>Step 2 -</span> The Problem to Solve</h2><blockquote\nclass=\"pullquote\"><p>Our team is tasked with the implementation of a &#8220;word wrap&#8221; feature.</p></blockquote><p>Let&#8217;s assume that we are part of a large corporation, which has a sophisticated application to develop and maintain. Our team is tasked with the implementation of a &#8220;word wrap&#8221; feature. Our clients don&#8217;t wish to see horizontal scroll bars, and it&#8217;s out job to comply.</p><p>In that case, we need to create a class that is capable of formatting an arbitrary bit of text provided as input. The result should be word wrapped at a specified number of characters. The rules of word wrapping should follow the behavior of other every-day applications, like text editors, web page text areas, etc. Our client does not understand all the rules of word wrapping, but they know they want it, and they know it should work in the same way that they&#8217;ve experienced in other apps.</p><hr\n/><h2> <span>Step 3 -</span> Planning</h2><blockquote\nclass=\"pullquote\"><p>TDD helps you achieve a better design, but it does not eliminate the need for up-front design and thinking.</p></blockquote><p>One of the things that many programmers forget, after they start TDD, is to think and plan beforehand. TDD helps you achieve a better design most of the time, with less code and verified functionality, but it does not eliminate the need for up-front design and human thinking.</p><p>Every time you need to solve a problem, you should set aside time to think about it, to imagine a little design &#8211; nothing fancy &#8211; but enough to get you started. This part of the job also helps you to imagine and guess possible scenarios for the logic of the application.</p><p>Let&#8217;s think about the basic rules for a word wrap feature. I suppose some un-wrapped text will be given to us. We will know the number of characters per line and we will want it to be wrapped. So, the first thing that comes to my mind is that, if the text has more characters than the number on one line, we should add a new line instead of the last space character that is still on the line.</p><p>Okay, that would sum up the behavior of the system, but it is much too complicated for any test. For example, what about when a single word is longer than the number of characters allowed on a line? Hmmm&#8230; this looks like an edge case; we can&#8217;t replace a space with a new line since we have no spaces on that line. We should force wrap the word, effectively splitting it into two.</p><p>These ideas should be clear enough to the point that we can start programming. We&#8217;ll need a project and a class. Let&#8217;s call it <code>Wrapper</code>.</p><hr\n/><h2> <span>Step 4 -</span> Starting the Project and Creating the First Test</h2><p>Let&#8217;s create our project. There should be a main folder for source classes, and a <code>Tests/</code> folder, naturally, for the  tests.</p><p>The first file we will create is a test within the <code>Tests</code> folder. All our future test will be contained within this folder, so I will not specify it explicitly again in this tutorial. Name the test class something descriptive, but simple. <code>WrapperTest</code> will do for now; our first test looks something like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nrequire_once dirname(__FILE__) . \'/../Wrapper.php\';\nclass WrapperTest extends PHPUnit_Framework_TestCase {\n	function testCanCreateAWrapper() {\n		$wrapper = new Wrapper();\n	}\n}\n</pre><p>Remember! We are not allowed to write any production code before a failing test &#8211; not even a class declaration! That&#8217;s why I wrote the first simple test above, called <code>canCreateAWrapper</code>. Some consider this step useless, but I consider it to be a nice opportunity to think about the class we are going to create. Do we need a class? What should we call it? Should it be static?</p><p>When you run the test above, you will receive a Fatal Error message, like the following:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nPHP Fatal error:  require_once(): Failed opening required \'/path/to/WordWrapPHP/Tests/../Wrapper.php\' (include_path=\'.:/usr/share/php5:/usr/share/php\') in /path/to/WordWrapPHP/Tests/WrapperTest.php on line 3\n</pre><p>Yikes! We should do something about it. Create an empty <code>Wrapper</code> class in the project&#8217;s main folder.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Wrapper {}\n</pre><p>That&#8217;s it. If you run the test again, it passes. Congratulations on your first test!</p><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2095_simpleApp/Images/tp1.png\" /></div><hr\n/><h2> <span>Step 5 -</span> The First Real Test</h2><p>So we have our project set up and running; now we need to think about our first <em>real</em> test.</p><p>What would be the simplest&#8230;the dumbest&#8230;the most basic test that would make our current production code fail? Well, the first thing that comes to mind is &#8220;<em>Give it a short enough word, and expect the result to be unchanged</em>.&#8221; This sounds doable; let&#8217;s write the test.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nrequire_once dirname(__FILE__) . \'/../Wrapper.php\';\nclass WrapperTest extends PHPUnit_Framework_TestCase {\n	function testDoesNotWrapAShorterThanMaxCharsWord() {\n		$wrapper = new Wrapper();\n		assertEquals(\'word\', $wrapper-&gt;wrap(\'word\', 5));\n	}\n}\n</pre><p>That looks fairly complicated. What does &#8220;MaxChars&#8221; in the function name mean? What does <code>5</code> in the <code>wrap</code> method refer to?</p><p>I think something is not quite right here. Isn&#8217;t there a simpler test that we can run? Yes, there certainly is! What if we wrap &#8230; nothing &#8211; an empty string? That sounds good. Delete the complicated test above, and, instead, add our new, simpler one, shown below:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nrequire_once dirname(__FILE__) . \'/../Wrapper.php\';\nclass WrapperTest extends PHPUnit_Framework_TestCase {\n	function testItShouldWrapAnEmptyString() {\n		$wrapper = new Wrapper();\n		$this-&gt;assertEquals(\'\', $wrapper-&gt;wrap(\'\'));\n	}\n}\n</pre><p>This is much better. The name of the test is easy to understand, we have no magic strings or numbers, and most of all, IT FAILS!</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nFatal error: Call to undefined method Wrapper::wrap() in ...\n</pre><p>As you can observe, I deleted our very first test. It is useless to explicitly check if an object can be initialized, when other tests also need it. This is normal. With time, you will find that deleting tests is a common thing. Tests, especially unit tests, have to run fast &#8211; really fast&#8230; and frequently &#8211; very frequently. Considering this, eliminating redundancy in tests is important. Imagine that you run thousands of tests every time you save the project. It should take no more than a couple of minutes, maximum, for them to run. So, don&#8217;t be terrified to delete a test, if necessary.</p><p>Getting back to our production code, let&#8217;s make that test pass:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class Wrapper {\n	function wrap($text) {\n		return;\n	}\n}\n</pre><p>Above, we&#8217;ve added absolutely no more code than is necessary to make the test pass.</p><hr\n/><h2> <span>Step 6 -</span> Pressing On</h2><p>Now, for the next failing test:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItDoesNotWrapAShortEnoughWord() {\n		$wrapper = new Wrapper();\n		$this-&gt;assertEquals(\'word\', $wrapper-&gt;wrap(\'word\', 5));\n	}\n</pre><p>Failure message:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">Failed asserting that null matches expected \'word\'.</pre><p>And the code that makes it pass:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function wrap($text) {\n		return $text;\n	}\n</pre><p>Wow! That was easy, wasn&#8217;t it?</p><p>While we are in the green, observe that our test code can begin to rot. We need to refactor a few things. Remember: always refactor when your tests pass; this is the only way that you can be certain that you&#8217;ve refactored correctly.</p><p>First, let&#8217;s remove the duplication of the initialization of the wrapper object. We can do this only once in the <code>setUp()</code> method, and use it for both tests.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">class WrapperTest extends PHPUnit_Framework_TestCase {\n	private $wrapper;\n	function setUp() {\n		$this-&gt;wrapper = new Wrapper();\n	}\n	function testItShouldWrapAnEmptyString() {\n		$this-&gt;assertEquals(\'\', $this-&gt;wrapper-&gt;wrap(\'\'));\n	}\n	function testItDoesNotWrapAShortEnoughWord() {\n		$this-&gt;assertEquals(\'word\', $this-&gt;wrapper-&gt;wrap(\'word\', 5));\n	}\n}\n</pre><blockquote><p>The <code>setup</code> method will run before each new test.</p></blockquote><p>Next, there are some ambiguous bits in the second test. What is &#8216;word&#8217;? What is &#8217;5&#8242;? Let&#8217;s make it clear so that the next programmer who reads these tests doesn&#8217;t have to guess.</p><div\nclass=\"tip-shortcode\">Never forget that your tests are also the most update-to-date documentation for your code.</div><p>Another programmer should be able to read the tests as easily as they would read the documentation.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItDoesNotWrapAShortEnoughWord() {\n		$textToBeParsed = \'word\';\n		$maxLineLength = 5;\n		$this-&gt;assertEquals($textToBeParsed, $this-&gt;wrapper-&gt;wrap($textToBeParsed, $maxLineLength));\n	}\n</pre><p>Now, read this assertion again. Doesn&#8217;t that read better? Of course it does. Don&#8217;t be afraid of lengthy variable names for your tests; auto-completion is your friend! It&#8217;s better to be as descriptive as possible.</p><p>Now, for the next failing test:</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItWrapsAWordLongerThanLineLength() {\n		$textToBeParsed = \'alongword\';\n		$maxLineLength = 5;\n		$this-&gt;assertEquals(&quot;along\\nword&quot;, $this-&gt;wrapper-&gt;wrap($textToBeParsed, $maxLineLength));\n	}\n</pre><p>And the code that makes it pass:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function wrap($text, $lineLength) {\n		if (strlen($text) &gt; $lineLength)\n			return substr ($text, 0, $lineLength) . &quot;\\n&quot; . substr ($text, $lineLength);\n		return $text;\n	}\n</pre><p>That&#8217;s the obvious code to make our <i>last</i> test pass. But be careful &#8211; it is also the code that makes our first test to <strong>not pass</strong>!</p><div\nclass=tutorial_image><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2095_simpleApp/Images/tf1.png\" /></div><p>We have two options to fix this problem:</p><ul><li>modify the code &#8211; make the second parameter optional</li><li>modify the first test &#8211; and make it call the code with a parameter</li></ul><p>If you choose the first option, making the parameter optional, that would present a little problem with the current code. An optional parameter is also initialized with a default value. What could such a value be? Zero might sound logical, but it would imply writing code just to treat that special case. Setting a very large number, so that the first <i>if</i> statement would not result in true can be another solution. But, what is that number? Is it 10? Is it 10000? Is it 10000000? We can&#8217;t really say.</p><p>Considering all these, I will just modify the first test:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItShouldWrapAnEmptyString() {\n		$this-&gt;assertEquals(\'\', $this-&gt;wrapper-&gt;wrap(\'\', 0));\n	}\n</pre><p>Again, all green. We can now move on to the next test. Let&#8217;s make sure that, if we have a very long word, it will wrap on several lines.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItWrapsAWordSeveralTimesIfItsTooLong() {\n		$textToBeParsed = \'averyverylongword\';\n		$maxLineLength = 5;\n		$this-&gt;assertEquals(&quot;avery\\nveryl\\nongwo\\nrd&quot;, $this-&gt;wrapper-&gt;wrap($textToBeParsed, $maxLineLength));\n	}\n</pre><p>This obviously fails, because our actual production code wraps only once.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n \'avery\n-veryl\n-ongwo\n-rd\'\n+verylongword\'\n</pre><p>Can you smell the <code>while</code> loop coming? Well, think again. Is a <code>while</code> loop the simplest code that would make the test pass?</p><p>According to &#8216;Transformation Priorities&#8217; (by Robert C. Martin), it is not. Recursion is <i>always</i> simpler than a loop and it is much more testable.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function wrap($text, $lineLength) {\n		if (strlen($text) &gt; $lineLength)\n			return substr ($text, 0, $lineLength) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, $lineLength), $lineLength);\n		return $text;\n	}\n</pre><p>Can you even spot the change? It was a simple one. All we did was, instead of concatenating with the rest of the string, we concatenate with the return value of calling ourself with the rest of the string. Perfect!</p><hr\n/><h2> <span>Step 7 -</span> Just Two Words</h2><p>The next simplest test? What about two words can wrap, when there&#8217;s a space at the end of the line.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItWrapsTwoWordsWhenSpaceAtTheEndOfLine() {\n		$textToBeParsed = \'word word\';\n		$maxLineLength = 5;\n		$this-&gt;assertEquals(&quot;word\\nword&quot;, $this-&gt;wrapper-&gt;wrap($textToBeParsed, $maxLineLength));\n	}\n</pre><p>That fits nicely. However, the solution may be getting a bit trickier this time.</p><p>At first, you might refer to a <code>str_replace()</code> to get rid of the space and insert a new line. Don&#8217;t; that road leads to  a dead end.</p><p>The second most obvious choice would be an <code>if</code> statement. Something like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function wrap($text, $lineLength) {\n		if (strpos($text,\' \') == $lineLength)\n			return substr ($text, 0, strpos($text, \' \')) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, strpos($text, \' \') + 1), $lineLength);\n		if (strlen($text) &gt; $lineLength)\n			return substr ($text, 0, $lineLength) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, $lineLength), $lineLength);\n		return $text;\n	}\n</pre><p>However, that enters an endless loop, which will cause the tests to error out.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">PHP Fatal error:  Allowed memory size of 134217728 bytes exhausted</pre><p>This time, we need to think! The problem is that our first test has a text with a length of zero. Also, <code>strpos()</code> returns false when it can&#8217;t find the string. Comparing false with zero &#8230; is? It is <code>true</code>. This is bad for us because the loop will became infinite. The solution? Let&#8217;s change the first condition. Instead of searching for a space and comparing its position with the line&#8217;s length, let&#8217;s instead attempt to directly take the character at the position indicated by the line&#8217;s length. We will do a <code>substr()</code> only one character long, starting at just the right spot in the text.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function wrap($text, $lineLength) {\n		if (substr($text, $lineLength - 1, 1) == \' \')\n			return substr ($text, 0, strpos($text, \' \')) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, strpos($text, \' \') + 1), $lineLength);\n		if (strlen($text) &gt; $lineLength)\n			return substr ($text, 0, $lineLength) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, $lineLength), $lineLength);\n		return $text;\n	}\n</pre><p>But, what if the space is not right at the end of line?</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItWrapsTwoWordsWhenLineEndIsAfterFirstWord() {\n		$textToBeParsed = \'word word\';\n		$maxLineLength = 7;\n		$this-&gt;assertEquals(&quot;word\\nword&quot;, $this-&gt;wrapper-&gt;wrap($textToBeParsed, $maxLineLength));\n	}\n</pre><p>Hmm&#8230; we have to revise our conditions again. I am thinking that we will, after all, need that search for the position of the space character.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function wrap($text, $lineLength) {\n		if (strlen($text) &gt; $lineLength) {\n			if (strpos(substr($text, 0, $lineLength), \' \') != 0)\n				return substr ($text, 0, strpos($text, \' \')) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, strpos($text, \' \') + 1), $lineLength);\n			return substr ($text, 0, $lineLength) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, $lineLength), $lineLength);\n		}\n		return $text;\n	}\n</pre><p>Wow! That actually works. We moved the first condition inside the second one so that we avoid the endless loop, and we added the search for space. Still, it looks rather ugly. Nested conditions? Yuck. It&#8217;s time for some refactoring.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function wrap($text, $lineLength) {\n		if (strlen($text) &lt;= $lineLength)\n			return $text;\n		if (strpos(substr($text, 0, $lineLength), \' \') != 0)\n			return substr ($text, 0, strpos($text, \' \')) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, strpos($text, \' \') + 1), $lineLength);\n		return substr ($text, 0, $lineLength) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, $lineLength), $lineLength);\n	}\n</pre><p>That&#8217;s better better.</p><hr\n/><h2> <span>Step 8 -</span> What About Multiple Words?</h2><blockquote\nclass=\"pullquote\"><p>Nothing bad can happen as a result of writing a test.</p></blockquote><p>The next simplest test would be to have three words wrapping on three lines. But that test passes. Should you write a test when you know it will pass? Most of the time, no. But, if you have doubts, or you can imagine obvious changes to the code that would make the new test fail and the others pass, then write it! Nothing bad can happen as a result of writing a test. Also, consider that your tests are your documentation. If your test represents an essential part of your logic, then write it!</p><p>Further, the fact the tests we came up with are passing is an indication that we are getting close to a solution. Obviously, when you have a working algorithm, any test that we write will pass.</p><p>Now &#8211; three words on two lines with the line ending inside the last word; now, that fails.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItWraps3WordsOn2Lines() {\n		$textToBeParsed = \'word word word\';\n		$maxLineLength = 12;\n		$this-&gt;assertEquals(&quot;word word\\nword&quot;, $this-&gt;wrapper-&gt;wrap($textToBeParsed, $maxLineLength));\n	}\n</pre><p>I nearly expected this one to work. When we investigate the error, we get:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">Failed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-\'word word\n-word\'\n+\'word\n+word word\'\n</pre><p>Yep. We should wrap at the rightmost space in a line.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function wrap($text, $lineLength) {\n		if (strlen($text) &lt;= $lineLength)\n			return $text;\n		if (strpos(substr($text, 0, $lineLength), \' \') != 0)\n			return substr ($text, 0, strrpos($text, \' \')) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, strrpos($text, \' \') + 1), $lineLength);\n		return substr ($text, 0, $lineLength) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, $lineLength), $lineLength);\n	}\n</pre><p>Simply replace the <code>strpos()</code> with <code>strrpos()</code> inside the second <code>if</code> statement.</p><hr\n/><h2> <span>Step 9 -</span> Other Failing Tests? Edge Cases?</h2><p>Things are getting trickier. It&#8217;s fairly hard to find a failing test &#8230; or any test, for that matter, that was not yet written.</p><p>This is an indication that we are quite close to a final solution. But, hey, I just thought of a test that will fail!</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItWraps2WordsOn3Lines() {\n		$textToBeParsed = \'word word\';\n		$maxLineLength = 3;\n		$this-&gt;assertEquals(&quot;wor\\nd\\nwor\\nd&quot;, $this-&gt;wrapper-&gt;wrap($textToBeParsed, $maxLineLength));\n	}\n</pre><p>But, I was wrong. It passes. Hmm&#8230; Are we done? Wait! What about this one?</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function testItWraps2WordsAtBoundry() {\n		$textToBeParsed = \'word word\';\n		$maxLineLength = 4;\n		$this-&gt;assertEquals(&quot;word\\nword&quot;, $this-&gt;wrapper-&gt;wrap($textToBeParsed, $maxLineLength));\n	}\n</pre><p>It fails! Excellent. When the line has the same length as the word, we want the second line to not begin with a space.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">Failed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n \'word\n-word\'\n+ wor\n+d\'\n</pre><p>There are several solutions. We could introduce another <code>if</code> statement to check for the starting space. That would fit in with the rest of the conditionals that we&#8217;ve created. But, isn&#8217;t there a simpler solution? What if we just <code>trim()</code> the  text?</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">	function wrap($text, $lineLength) {\n		$text = trim($text);\n		if (strlen($text) &lt;= $lineLength)\n			return $text;\n		if (strpos(substr($text, 0, $lineLength), \' \') != 0)\n			return substr ($text, 0, strrpos($text, \' \')) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, strrpos($text, \' \') + 1), $lineLength);\n		return substr ($text, 0, $lineLength) . &quot;\\n&quot; . $this-&gt;wrap(substr($text, $lineLength), $lineLength);\n	}\n</pre><p>There we go.</p><hr\n/><h2> <span>Step 10 -</span> We Are Done</h2><p>At this point, I can&#8217;t invent any failing test to write. We must be done! We&#8217;ve now used TDD to build a simply, but useful, six-line algorithm.</p><p>A few words on stopping and &#8220;being done.&#8221; If you use TDD, you force yourself to think about all sorts of situations. You then write tests for those situations, and, in the process, begin to understand the problem much better. Usually, this process results in an intimate knowledge of the algorithm. If you can&#8217;t think of any other failing tests to write, does this mean that your algorithm is perfect? Not necessary, unless there is a predefined set of rules. TDD does not guarantee bug-less code; it merely helps you write  better code that can be better understood and modified.</p><blockquote><p>Even better, if you do discover a bug, it&#8217;s that much easier to write a test that reproduces the bug. This way, you can ensure that the bug never occurs again &#8211; because you&#8217;ve tested for it!</p></blockquote><hr\n/><h2>Final Notes</h2><p>You may argue that this process is not technically &#8220;TDD.&#8221; And you&#8217;re right! This example is closer to how many everyday programmers work. If you want a true &#8220;TDD as you mean it&#8221; example, please leave a comment below, and I&#8217;ll plan to write one in the future.</p><p>Thanks for reading!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(32,3,1,1358049654,NULL,' Build Web Apps From Scratch With Laravel: Filters, Validations, and Files ','In this Nettuts+ mini-series, we’ll build a web application from scratch, while diving into a great new PHP framework that’s rapidly picking up steam, called Laravel.In this lesson, we’ll be learning about some very useful Laravel features: filters, and both the validation and files libraries.','In this Nettuts+ mini-series, we’ll build a web application from scratch, while diving into a great new PHP framework that’s rapidly picking up steam, called Laravel.In this lesson, we’ll be learning about some very useful Laravel features: filters, and both the validation and files libraries.',1,0,'build-web-apps-from-scratch-with-laravel-filters-validations-and-files',276,0,'https://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/main_image.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"https://github.com/nikkobautista/laravel-tutorial\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-26058\'), post_id: 26058, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this Nettuts+ <a\nhref=\"http://net.tutsplus.com/tutorials/php/building-web-applications-from-scratch-with-laravel/\"  target=\"_blank\">mini-series</a>, we&#8217;ll build a web application from scratch, while diving into a great new PHP framework that&#8217;s rapidly picking up steam, called <a\nhref=\"http://laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\" target=\"_blank\">Laravel</a>.</p><p>In this lesson, we&#8217;ll be learning about some very useful Laravel features: filters, and both the validation and files libraries.</p><p><span\nid=\"more-26058\"></span></p><hr ><h2>Review</h2><p>Welcome back to our Web Applications from Scratch with Laravel series! In the <a\nhref=\"http://net.tutsplus.com/tutorials/php/build-web-apps-from-scratch-with-laravel-the-eloquent-orm/\"  target=\"_blank\">second tutorial</a> of our mini-series, we learned a lot about Laravel&#8217;s ORM implementation:</p><ul><li>Some background on &ldquo;Models&rdquo;</li><li>What the Eloquent ORM is</li><li>How to setup Laravel&#8217;s database configuration</li><li>How to create your first Laravel Model</li><li>The basic functions of the Auth and Input libraries</li><li>Making use of the Eloquent ORM in a view</li></ul><p>If you haven&#8217;t seen it yet, I urge you to check out the <a\nhref=\"http://net.tutsplus.com/tutorials/php/building-web-applications-from-scratch-with-laravel/\"  target=\"_blank\">first</a> and <a\nhref=\"http://net.tutsplus.com/tutorials/php/build-web-apps-from-scratch-with-laravel-the-eloquent-orm/\"  target=\"_blank\">second</a> part of the mini-series &mdash; it will make it significantly easier to follow along, as we build our test application, <strong>Instapics</strong>, through each part.</p><p>So let&#8217;s get started!</p><hr\n/><h2><span>1 &#8211; </span>Laravel Filters</h2><p>In a nutshell, filters are functions that we can run on routes <code>before</code> or <code>after</code> the request cycle. It&#8217;s especially useful for things like authentication and logging. To register a filter, we need to add something like the following to the <strong>application/routes.php</strong> file:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::filter(\'myfilter\', function()\n{\n    //What you want the filter to do\n});\n</pre><p>After we register the filter, we need to attach it to a route, like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::any(\'/\', array(\'before\' =&gt; \'filter\', function()\n{\n    //What you want the route to do\n}));\n</pre><p>In the example above, the <code>myfilter</code> will trigger on all request to the index page (i.e. <strong>/</strong>). Let&#8217;s say we wanted to implement an authentication filter for the <code>dashboard</code> route:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::filter(\'auth\', function()\n{\n    if(Auth::guest()) {\n        return Redirect::to(\'home\');\n    }\n});\nRoute::any(\'dashboard\', array(\'before\' =&gt; \'auth, function()\n{\n    return View::make(\'dashboard\');\n});\n</pre><p>The code above will redirect all unauthenticated requests to the <strong>dashboard</strong> route to the <strong>home</strong> route.</p><h3>Global Filters</h3><p>By default, Laravel includes two filters, <code>before</code> and <code>after</code>, which run before and after every request on an application. These are usually where you place things, like request logging, adding global assets or firing global events. For example:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::filter(\'after\', function($response)\n{\n    Log::write(\'request\', \'Request finished on \' . date(\'d M, Y - h:i:sA\') . \'.\\n\\nRequest Information:\\n \'. var_export(Input::get(), true));\n});\n</pre><p>This writes a <code>request</code> type log message to the application&#8217;s log, and lists any input from the request.</p><h3>Route Groups</h3><p>If you find yourself applying the same filter to multiple routes, you can make use of <strong>Route Groups</strong> to group them all together and lessen code repetition:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::filter(\'admin_auth\', function()\n{\n    if(Auth::guest() || !Auth::user()-&gt;isAdmin()) {\n        return Redirect::to(\'home\');\n    }\n});\nRoute::group(array(\'before\' =&gt; \'admin_auth\'), function()\n{\n    Route::get(\'admin\', function()\n    {\n        return View::make(\'admin\');\n    });\n    Route::get(\'useradmin\', function()\n    {\n        return View::make(\'useradmin\');\n    });\n});\n</pre><h3>Controller Filters</h3><p>For applications (like our very own <strong>Instapics</strong>) that make use of controllers, we can apply filters by using the <code>$this->filter()</code> function in the controller&#8217;s constructor:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function __construct()\n{\n    $this-&gt;filter(\'before\', \'auth\');\n}\n</pre><p>These filters, like routes, can also be customized to apply only to certain HTTP verbs and specific controller actions:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function __construct()\n{\n    //call \'log_download\' filter for all download/file GET requests\n    $this-&gt;filter(\'after\', \'log_download\')-&gt;only(array(\'file\'))-&gt;on(\'get\');\n    //call the \'auth_download\' filter for all download/* requests, except for the \'queue\' action\n    $this-&gt;filter(\'before\', \'auth_download\')-&gt;except(array(\'queue\'));\n}\n</pre><hr\n/><h2><span>2 &#8211; </span>Laravel Validation</h2><p>Laravel&#8217;s built-in validation makes it easy to apply validation to any array of values, more specifically, form input. To do so, you simply need to build two arrays:</p><ul><li><strong>$input</strong> &#8211; this is an associative array of the values you want to validate.</li><li><strong>$rules</strong> &#8211; this is an associative array (with keys which are the same as the $input array) that lists down the validation rules.</li></ul><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n//Getting our input from the Input library\n$input = Input::all();\n//Create our validation rules\n$rules = array(\n    \'email\' =&gt; \'required|email|unique:users\',\n    \'password\' =&gt; \'required\'\n);\n//Getting a $validation instance for our error checking\n$validation = Validator::make($input, $rules);\n//Check if the validation succeeded\nif( $validation-&gt;fails() ) {\n    //do something with the error messages from the $validation instance\n    $validation-&gt;errors;\n}\n</pre><h3>Validation Rules</h3><p>Below is a list of validation rules which can be used with the Laravel validation library. Like in the example above, you are free to mix and match these by separating them with a pipe (&#8220;<strong>|</strong>&#8220;):</p><ul><li> <code>required</code> &#8211; the value should be present in the input array</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'email\' =&gt; \'required\'\n        </pre></li><li> <code>alpha</code> &#8211; the value should only consist of alphabet characters</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'full_name\' =&gt; \'alpha\'\n        </pre></li><li> <code>alpha_num</code> &#8211; the value should only consist of alphanumeric characters</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'username\' =&gt; \'alpha_num\'\n        </pre></li><li> <code>alpha_dash</code> &#8211; the value should only consist of alphanumeric, dashes and/or underscores</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'user_name\' =&gt; \'alpha_dash\'\n        </pre></li><li> <code>size</code> &#8211; the value should only be of a given length, or should be equal to if numeric</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'api_key\' =&gt; \'size:10\'\n        </pre><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'order_count\' =&gt; \'size:10\'\n        </pre></li><li> <code>between</code> &#8211; the value is inclusively between a specified range</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'order_count\' =&gt; \'between:1,100\'\n        </pre></li><li> <code>min</code> &#8211; the value is at least the given</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'order_count\' =&gt; \'min:1\'\n        </pre></li><li> <code>max</code> &#8211; the value is equal to or less than the given</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'order_count\' =&gt; \'max:100\'\n        </pre></li><li> <code>numeric</code> &#8211; the value is numeric</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'order_count\' =&gt; \'numeric\'\n        </pre></li><li> <code>integer</code> &#8211; the value is an integer</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'order_count\' =&gt; \'integer\'\n        </pre></li><li> <code>in</code> &#8211; the value is contained in the given</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'tshirt_size\' =&gt; \'in:xsmall,small,medium,large,xlarge\'\n        </pre></li><li> <code>not_in</code> &#8211; the value is not in the given</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'tshirt_size\' =&gt; \'not_in:xsmall,xlarge\'\n        </pre></li><li> <code>confirmed</code> &#8211; will check if the <code><strong>key</strong>_confirmation</code> exists and is equal to the value</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'password\' =&gt; \'confirmed\'\n        </pre><p>This will check if the <code>password_confirmation</code> value exists and is equal to <code>password</code></li><li> <code>accepted</code> &#8211; this will check if the value is set to &#8216;yes&#8217; or 1. Useful for checkboxes</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'terms_of_service\' =&gt; \'accepted\'\n        </pre></li><li> <code>same</code> &#8211; the value is the same as the given attribute&#8217;s value</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'password\' =&gt; \'same:confirm_password\'\n        </pre></li><li> <code>different</code> &#8211; the value should be different from the given attribute&#8217;s value</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'password\' =&gt; \'different:old_password\'\n        </pre></li><li> <code>match</code> &#8211; the value should match the given regular expression</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'user_name\' =&gt; \'match:/[a-zA-Z0-9]*/\'\n        </pre></li><li> <code>unique</code> &#8211; checks for uniqueness of the value in the given table.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'user_name\' =&gt; \'unique:users\'\n        </pre><p>A given column is also accepted if the column name is not the same as the attribute name.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        //if the column in the users table is username,\n        //we can provide this in the given like so:\n        \'user_name\' =&gt; \'unique:users,username\'\n        </pre><p>There are times when we want to check for uniqueness, but ignore a certain record (usually the record associated with the current user). We can do this by adding a third given, which should be the ID of that record in the table.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        //ID 10 is the record ID of the current user\n        \'user_name\' =&gt; \'unique:users,user_name,10\'\n        </pre></li><li> <code>exists</code> &#8211; the value should exists in a table</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'category\' =&gt; \'exists:categories\'\n        </pre><p>This also accepts a second given if we want to change the column name to check.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'category\' =&gt; \'exists:categories,category_name\'\n        </pre></li><li> <code>before</code> &#8211; the value should be a date before the given date</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'publish_date\' =&gt; \'before:2012-07-14\'\n        </pre></li><li> <code>after</code> &#8211; the value should be a date after the given date</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'publish_date\' =&gt; \'after:2012-07-14\'\n        </pre></li><li> <code>email</code> &#8211; the value should be in a valid email format</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'subscriber_email\' =&gt; \'email\'\n        </pre></li><li> <code>url</code> &#8211; the value is in a valid url format</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'github_profile\' =&gt; \'url\'\n        </pre></li><li> <code>active_url</code> &#8211; the value is in a valid url format AND is active</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'github_profile\' =&gt; \'active_url\'\n        </pre></li><li> <code>mimes</code> &#8211; checks for the mime-type of an uploaded file. You can use any mime-type value from the <strong>config/mimes.php</strong> file</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'avatar\' =&gt; \'mimes:jpg,gif,png,bmp\'\n        </pre></li><li> <code>image</code> &#8211; the file should be an image</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'avatar\' =&gt; \'image\'\n        </pre><p>You can also use the <code>max</code> validator here to check for a file&#8217;s size in kilobytes</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        \'avatar\' =&gt; \'image|max:100\'\n        </pre></li></ul><hr\n/><h3>Error Handling</h3><p>Once you call the <code>Validator->fails()</code> or <code>Validator->passes()</code> method, the library collects all of the errors in a class that&#8217;s accessible via <code>Validator->errors</code>. You&#8217;ll then be able to retrieve these errors with some functions in the <code>errors</code> class. Laravel provides some cool functionality to automate error handling that fits in most POST/REDIRECT/GET scenarios:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Register_Controller extends Base_Controller\n{\n    public $restful = true;\n    public function get_index()\n    {\n        return View::make(\'register.index\');\n    }\n    public function post_index()\n    {\n        $rules = array(\n            \'email\' =&gt; \'required|email|unique:users\',\n            \'password\' =&gt; \'confirmed\'\n        );\n        $validation = Validator::make(Input::get(), $rules);\n        if( $validation-&gt;fails() ) {\n            //Send the $validation object to the redirected page\n            return Redirect::to(\'register\')-&gt;with_errors($validation);\n        }\n    }\n}\n</pre><p>Here, we use the <code>with_errors</code> method for the <code>Redirect</code> library. This automatically binds the <code>$errors</code> variable in the view for wherever we&#8217;re redirecting &#8211; in this case, the <code>register/index</code> page:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;form&gt;\n    {{-- $errors variable passed via with_errors --}}\n    @if ($errors-&gt;has(\'email\'))\n    @foreach ($errors-&gt;get(\'email\', \'&lt;p class=&quot;error-message&quot;&gt;:message&lt;/p&gt;\') as $email_error)\n    {{ $email_error }}\n    @endforeach\n    @endif\n    &lt;label for=&quot;email&quot;&gt;Email:&lt;/label&gt;\n    &lt;input type=&quot;email&quot; name=&quot;email&quot; placeholder=&quot;Enter your email address here&quot; /&gt;\n    @if ($errors-&gt;has(\'password\'))\n    @foreach ($errors-&gt;get(\'password\', \'&lt;p class=&quot;error-message&quot;&gt;:message&lt;/p&gt;\') as $password_error)\n    {{ $password_error }}\n    @endif\n    &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;\n    &lt;input type=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;Enter your password here&quot; /&gt;\n    &lt;label for=&quot;password_confirmation&quot;&gt;Confirm Password:&lt;/label&gt;\n    &lt;input type=&quot;password&quot; name=&quot;password_confirmation&quot; placeholder=&quot;Re-type your password here&quot; /&gt;\n&lt;/form&gt;\n</pre><p>On the view file, we use the <code>$errors->has()</code> method to check if an error exists for that specifc field. If it does, we then use the <code>$errors->get()</code> method to display the error messages. The second parameter in this method can be used to provide a template on how we display the error message.</p><h3>Custom Error Messages</h3><p>Since most people would want to change the error messages for Laravel to fit their application&#8217;s branding or language, the Validation library also allows for customizing the error messages that are generated by simply adding in a <code>$messages</code> array to the <code>Validate::make</code> function call:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$rules = array(\n    \'email\' =&gt; \'required|email|unique:users\',\n    \'password\' =&gt; \'confirmed\'\n);\n$messages = array(\n    \'email_required\' =&gt; \'Please provide an email address\',\n    \'email_email\' =&gt; \'Please provide a valid email address\',\n    \'email_unique\' =&gt; \'The email address you provided is already being used\',\n    \'password_confirmed\' =&gt; \'Your password confirmation did not match your password.\'\n);\n$validation = Validator::make(Input::get(), $rules, $messages);\n</pre><p>There are two ways to create a <code>$messages</code> array:</p><ul><li> <strong>Rule-based</strong> &#8211; you can provide a custom message for all the fields validated by a certain rule. For example:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        $messages = array(\n            \'required\' =&gt; \'The :attribute field is required.\',\n            \'same\'    =&gt; \'The :attribute and :other must match.\',\n            \'size\'    =&gt; \'The :attribute must be exactly :size.\',\n            \'between\' =&gt; \'The :attribute must be between :min - :max.\',\n            \'in\'      =&gt; \'The :attribute must be one of the following types: :values\',\n        );\n        </pre><p>This will change the default error messages for all fields that have the <code>required, same, size, between and in</code> rules. In here, we also see that Laravel uses placeholders to replace certain values in the error message. <code>:attribute</code> will change into the field attribute (sans underscores) it&#8217;s for. <code>:other</code> is used for the <code>same</code> rule, which refers to the other attribute it should match. <code>:size</code> refers to the defined size in the rule parameters. <code>:min</code> and <code>:max</code> is the minimum and maximum values, and <code>:values</code> is the list of values we specified that the field&#8217;s value must be in.</p></li><li> <strong>Attribute-based</strong> &#8211; on the other hand, you can also provide a custom message for a specific attribute on a specific rule. Taking our example from above:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        $messages = array(\n            \'email_required\' =&gt; \'Please provide an email address\',\n            \'email_email\' =&gt; \'Please provide a valid email address\',\n            \'email_unique\' =&gt; \'The email address you provided is already being used\',\n            \'password_confirmed\' =&gt; \'Your password confirmation did not match your password.\'\n        );\n        </pre><p><code>email_required</code> is the error message that&#8217;s used when the <code>email</code> attribute fails the <code>required</code> rule, <code>email_email</code> is the error message that&#8217;s used when the <code>email</code> fails the <code>email</code> rule, and so on.</p></li></ul><p>If you find yourself consantly recreating the same custom messages though, it would be easier to just specify the custom error messages globally. You can do that by editing the <strong>application/langauge/en/validation.php</strong> file, and editing the <code>custom</code> array found there:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n...\n...\n\'custom\' =&gt; array(\n    \'email_required\' =&gt; \'Please provide an email address\',\n    \'email_email\' =&gt; \'Please provide a valid email address\',\n    \'email_unique\' =&gt; \'The email address you provided is already being used\',\n    \'password_confirmed\' =&gt; \'Your password confirmation did not match your password.\'\n);\n...\n...\n</pre><hr\n/><h2><span>3 &#8211; </span>Laravel Files</h2><h3>Handling File Uploads</h3><p>Laravel&#8217;s <strong>Files</strong> library makes it easy to handle file uploads by using the <code>Input::upload</code> method, which is a simple wrapper to the PHP&#8217;s <code>move_uploaded_file</code> function:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nInput::upload(\'input_name\', \'directory/to/save/file\', \'filename.extension\');\n</pre><p>To validate the file uploads, you can use the <code>Validator</code> library we discussed above like so:</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$input = array(\n    \'upload\' =&gt; Input::file(\'upload\')\n);\n$rules = array(\n    \'upload\' =&gt; \'mimes:zip,rar|max:500\'\n);\n$validator = Validator::make($input, $rules);\n</pre><h3>File Manipulation</h3><p>The <strong>Files</strong> library also has some file manipulation methods, like:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n//Get a file\n$data = File::get(\'path/file.extension\');\n//Write a file\nFile::put(\'path/file.extension\', $data);\n//Appending to a file\nFile::append(\'path/file.extension\', $data);\n</pre><h3>File-related functions</h3><p>Laravel also provides some general purpose file-related functionalities that can be used throughout your code. For example, the <code>File::extension</code> method returns the extension of a string filename:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n//This will return \'zip\'\nFile::extension(\'data.zip\');\n</pre><p>The <code>File::is</code> function checks if a file is of a certain type. Take note that this does not simply check the file&#8217;s extension, but uses the <code>Fileinfo</code> PHP extension to read the actual contents of the file. This is useful for determining that a file is actually of a correct file type:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n//Returns true if the file is a zip file, false if otherwise\nFile::is(\'zip\', \'path/file.zip\');\n</pre><p>A list of compatible extensions can be seen in <strong>application/config/mimes.php</strong>.</p><p>Speaking of mime types, you can also use the <code>File::mime</code> function to get the mime types of an extension. The mime type returned is based on the same <strong>mimes.php</strong> file:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n//This will return image/png\nFile::mime(\'png\')\n</pre><p>The <code>File::cpdir</code> and the <code>File::rmdir</code> methods can copy and delete a directory, respectively.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nFile::cpdir(\'directory/to/copy\', \'destination/directory\');\n//File::rmdir is a recursive delete, so it will delete all files and folders inside the directory.\nFile::rmdir(\'directory/to/delete\');\n</pre><p>Now that we&#8217;ve learned all about <strong>Filters</strong>, the <strong>Validation</strong> library and the <strong>Files</strong> library, let&#8217;s implement them in our application, <strong>Instapics</strong>.</p><hr\n/><h2><span>Step 1</span> Create an <code>auth</code> Filter</h2><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2090_laravel3/images/instapics.png\" alt=\"Instapics\" title=\"Instapics\" /></div><h3>Add filters to <code>Base_Controller</code></h3><p>Let&#8217;s start off by making sure our users are only able to see authenticated pages by creating an <code>auth</code> filter that runs before all requests. Since we use controller-based routing, we&#8217;ll have to configure our filters in our controller. Let&#8217;s put the filters in the <code>__construct</code> method of the <code>Base_Controller</code> to make sure the <code>auth</code> filter runs on all controllers which extends it. While we&#8217;re at it, let&#8217;s add a <code>nonauth</code> filter as well to make sure people can only visited certain pages when they&#8217;re no authenticated:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Base_Controller extends Controller {\n    public function __construct()\n    {\n        //Assets\n        Asset::add(\'jquery\', \'js/jquery-1.7.2.min.js\');\n        Asset::add(\'bootstrap-js\', \'js/bootstrap.min.js\');\n        Asset::add(\'bootstrap-css\', \'css/bootstrap.min.css\');\n        Asset::add(\'bootstrap-css-responsive\', \'css/bootstrap-responsive.min.css\', \'bootstrap-css\');\n        Asset::add(\'style\', \'css/style.css\');\n        parent::__construct();\n        //Filters\n        $class = get_called_class();\n        switch($class) {\n            case \'Home_Controller\':\n                $this-&gt;filter(\'before\', \'nonauth\');\n                break;\n            case \'User_Controller\':\n                $this-&gt;filter(\'before\', \'nonauth\')-&gt;only(array(\'authenticate\'));\n                $this-&gt;filter(\'before\', \'auth\')-&gt;only(array(\'logout\'));\n                break;\n            default:\n                $this-&gt;filter(\'before\', \'auth\');\n                break;\n        }\n    }\n</pre><p>Here we define that any requests to the <code>home</code> route will require non-authenticated user, which is good since this is where the login screen lies. Any other request though will default to requiring an authenticated user. For the <code>User_Controller</code>, we actually have two separate methods that require both non-authenticated users (authenticate) and authenticated users (logout), so we make use of the <code>only</code> method to specify which controller actions the filters apply to.</p><h3>Create filter definitions in <code>routes.php</code></h3><p>Now, open <strong>application/routes.php</strong>, which is where we&#8217;ll define the <code>auth</code> and <code>nonauth</code> filters. Take note that you might already have an existing <code>auth</code> filter definition so just replace it with the one we have below:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::filter(\'auth\', function()\n{\n    if (Auth::guest()) return Redirect::to(\'home\');\n});\nRoute::filter(\'nonauth\', function()\n{\n    if (Auth::guest() == false) return Redirect::to(\'dashboard\');\n});\n</pre><p>In the <code>auth</code> filter, we check if a user is authenticated with the <code>Auth</code> library. If the user is not authenticated, we redirect them back to the <code>home</code> route where the login screen is, otherwise, they are allowed to continue. The same thing with the <code>nonauth</code> filter &#8211; check if the user is authenticated, if he is, then redirect him to the dashboard.</p><hr\n/><h2><span>Step 2</span> Implement User Uploads</h2><h3>Create photo upload form</h3><p>Now that we know a little more about how to handle file uploads in Laravel, let&#8217;s start implementing one of <strong>Instapics</strong>&#8216; main features &mdash; uploading photos. Begin by creating a folder called <strong>application/views/plugins</strong> folder, and inside this create a Blade view file named <strong>upload_modal.blade.php</strong>. Paste the following HTML:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div class=&quot;modal hide&quot; id=&quot;upload_modal&quot;&gt;\n    &lt;div class=&quot;modal-header&quot;&gt;\n        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot;&gt;&amp;times;&lt;/button&gt;\n        &lt;h3&gt;Upload a new Instapic&lt;/h3&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;modal-body&quot;&gt;\n        &lt;form method=&quot;POST&quot; action=&quot;{{ URL::to(\'photo/upload\') }}&quot; id=&quot;upload_modal_form&quot; enctype=&quot;multipart/form-data&quot;&gt;\n            &lt;label for=&quot;photo&quot;&gt;Photo&lt;/label&gt;\n            &lt;input type=&quot;file&quot; placeholder=&quot;Choose a photo to upload&quot; name=&quot;photo&quot; id=&quot;photo&quot; /&gt;\n            &lt;label for=&quot;description&quot;&gt;Description&lt;/label&gt;\n            &lt;textarea placeholder=&quot;Describe your photo in a few sentences&quot; name=&quot;description&quot; id=&quot;description&quot; class=&quot;span5&quot;&gt;&lt;/textarea&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;modal-footer&quot;&gt;\n        &lt;a href=&quot;#&quot; class=&quot;btn&quot; data-dismiss=&quot;modal&quot;&gt;Cancel&lt;/a&gt;\n        &lt;button type=&quot;button&quot; onclick=&quot;$(\'#upload_modal_form\').submit();&quot; class=&quot;btn btn-primary&quot;&gt;Upload Photo&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</pre><h3>Create the button trigger</h3><p>Let&#8217;s trigger this modal form with a button &#8211; add this into <strong>application/views/layouts/main.blade.php</strong>, after the <code>.nav-collapse</code> div:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div class=&quot;nav-collapse&quot;&gt;\n    &lt;ul class=&quot;nav&quot;&gt;\n        @section(\'navigation\')\n        &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;home&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;\n        @yield_section\n    &lt;/ul&gt;\n&lt;/div&gt;&lt;!--/.nav-collapse --&gt;\n@section(\'post_navigation\')\n@if (Auth::check())\n    @include(\'plugins.loggedin_postnav\')\n@endif\n@yield_section\n</pre><p>Here, we include a view file called <code>loggedin_postnav</code> if the user is logged in. This is where we&#8217;ll add the button for the modal upload form. In the same file, append this after the <code>.container</code> div:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div class=&quot;container&quot;&gt;\n    @yield(\'content\')\n    &lt;hr&gt;\n    &lt;footer&gt;\n    &lt;p&gt;&amp;copy; Instapics 2012&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/div&gt; &lt;!-- /container --&gt;\n@section(\'modals\')\n@if (Auth::check())\n    @include(\'plugins.upload_modal\')\n@endif\n@yield_section\n</pre><p>This is where we include the <code>upload_modal</code> HTML. We make sure though that the user isn&#8217;t logged in before including this HTML file, since like the button trigger, this wouldn&#8217;t really be needed if the user isn&#8217;t authenticated.</p><p>Now, create <strong>application/views/plugins/loggedin_postnav.blade.php</strong></p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div class=&quot;btn-group pull-right&quot;&gt;\n    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;$(\'#upload_modal\').modal({backdrop: \'static\'});&quot;&gt;&lt;i class=&quot;icon-plus-sign icon-white&quot;&gt;&lt;/i&gt; Upload Instapic&lt;/button&gt;\n&lt;/div&gt;\n</pre><p>Refresh the page and you should see the new upload button &#8211; click it to see that it works!</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2090_laravel3/images/button.png\" alt=\"Upload Instapic\" title=\"Upload Instapic\" /></div><h3>Hook up the form to the appropriate controller</h3><p>Now that we have our front-end stuff working, let&#8217;s start working on the back-end portion of the form. Create <strong>application/controllers/photo.php</strong>, and put in the following code for the controller:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Photo_Controller extends Base_Controller\n{\n    public function action_upload()\n    {\n        $input = Input::all();\n        $extension = File::extension($input[\'photo\'][\'name\']);\n        $directory = path(\'public\').\'uploads/\'.sha1(Auth::user()-&gt;id);\n        $filename = sha1(Auth::user()-&gt;id.time()).&quot;.{$extension}&quot;;\n        $upload_success = Input::upload(\'photo\', $directory, $filename);\n        if( $upload_success ) {\n            Session::flash(\'status_success\', \'Successfully uploaded new Instapic\');\n        } else {\n            Session::flash(\'status_error\', \'An error occurred while uploading new Instapic - please try again.\');\n        }\n        if( $upload_success ) {\n            $photo = new Photo(array(\n                \'location\' =&gt; URL::to(\'uploads/\'.sha1(Auth::user()-&gt;id).\'/\'.$filename),\n                \'description\' =&gt; $input[\'description\']\n            ));\n            Auth::user()-&gt;photos()-&gt;insert($photo);\n        }\n        return Redirect::to(\'dashboard\');\n    }\n}\n</pre><p>Try it out &#8211; you should be able to start uploading new Instapics.</p><h3>Add validation to the upload form</h3><p>Let&#8217;s add some validation rules to this to make sure the user only submits the correct stuff. Update the controller with the following:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Photo_Controller extends Base_Controller\n{\n    public function action_upload()\n    {\n        $input = Input::all();\n        if( isset($input[\'description\']) ) {\n            $input[\'description\'] = filter_var($input[\'description\'], FILTER_SANITIZE_STRING, FILTER_FLAG_NO_ENCODE_QUOTES);\n        }\n        $rules = array(\n            \'photo\' =&gt; \'required|image|max:500\', //photo upload must be an image and must not exceed 500kb\n            \'description\' =&gt; \'required\' //description is required\n        );\n        $validation = Validator::make($input, $rules);\n        if( $validation-&gt;fails() ) {\n            return Redirect::to(\'dashboard\')-&gt;with_errors($validation);\n        }\n        $extension = File::extension($input[\'photo\'][\'name\']);\n        $directory = path(\'public\').\'uploads/\'.sha1(Auth::user()-&gt;id);\n        $filename = sha1(Auth::user()-&gt;id.time()).&quot;.{$extension}&quot;;\n        $upload_success = Input::upload(\'photo\', $directory, $filename);\n        if( $upload_success ) {\n            $photo = new Photo(array(\n                \'location\' =&gt; URL::to(\'uploads/\'.sha1(Auth::user()-&gt;id).\'/\'.$filename),\n                \'description\' =&gt; $input[\'description\']\n            ));\n            Auth::user()-&gt;photos()-&gt;insert($photo);\n            Session::flash(\'status_success\', \'Successfully uploaded your new Instapic\');\n        } else {\n            Session::flash(\'status_error\', \'An error occurred while uploading your new Instapic - please try again.\');\n        }\n        return Redirect::to(\'dashboard\');\n    }\n}\n</pre><p>See how we validate the input? We make sure that the photo is present, an image and less than 500kb. We also make sure that the description is present after sanitation. We won&#8217;t be able to see our error messages yet though, so let&#8217;s fix that by adding some HTML to render our error messages. Open <strong>application/views/layouts/main.blade.php</strong> and add the following inside the <code>.container</code> div:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div class=&quot;container&quot;&gt;\n    @include(\'plugins.status\')\n    @yield(\'content\')\n    &lt;hr&gt;\n    &lt;footer&gt;\n    &lt;p&gt;&amp;copy; Instapics 2012&lt;/p&gt;\n    &lt;/footer&gt;\n&lt;/div&gt; &lt;!-- /container --&gt;\n</pre><p>Now, create <strong>application/views/plugins/status.blade.php</strong>. This is where we&#8217;ll render the actual error messages. We&#8217;ll also add support for session-based status messages (like the one we use inside the <code>$upload_success</code> check on the <code>Photos</code> controller code):</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n@if (isset($errors) &amp;&amp; count($errors-&gt;all()) &gt; 0)\n&lt;div class=&quot;alert alert-error&quot;&gt;\n    &lt;a class=&quot;close&quot; data-dismiss=&quot;alert&quot; href=&quot;#&quot;&gt;×&lt;/a&gt;\n    &lt;h4 class=&quot;alert-heading&quot;&gt;Oh Snap!&lt;/h4&gt;\n    &lt;ul&gt;\n    @foreach ($errors-&gt;all(\'&lt;li&gt;:message&lt;/li&gt;\') as $message)\n    {{ $message }}\n    @endforeach\n    &lt;/ul&gt;\n&lt;/div&gt;\n@elseif (!is_null(Session::get(\'status_error\')))\n&lt;div class=&quot;alert alert-error&quot;&gt;\n    &lt;a class=&quot;close&quot; data-dismiss=&quot;alert&quot; href=&quot;#&quot;&gt;×&lt;/a&gt;\n    &lt;h4 class=&quot;alert-heading&quot;&gt;Oh Snap!&lt;/h4&gt;\n    @if (is_array(Session::get(\'status_error\')))\n        &lt;ul&gt;\n        @foreach (Session::get(\'status_error\') as $error)\n            &lt;li&gt;{{ $error }}&lt;/li&gt;\n        @endforeach\n        &lt;/ul&gt;\n    @else\n        {{ Session::get(\'status_error\') }}\n    @endif\n&lt;/div&gt;\n@endif\n@if (!is_null(Session::get(\'status_success\')))\n&lt;div class=&quot;alert alert-success&quot;&gt;\n    &lt;a class=&quot;close&quot; data-dismiss=&quot;alert&quot; href=&quot;#&quot;&gt;×&lt;/a&gt;\n    &lt;h4 class=&quot;alert-heading&quot;&gt;Success!&lt;/h4&gt;\n    @if (is_array(Session::get(\'status_success\')))\n        &lt;ul&gt;\n        @foreach (Session::get(\'status_success\') as $success)\n            &lt;li&gt;{{ $success }}&lt;/li&gt;\n        @endforeach\n        &lt;/ul&gt;\n    @else\n        {{ Session::get(\'status_success\') }}\n    @endif\n&lt;/div&gt;\n@endif\n</pre><p>Try causing errors on the upload form now by submitting without any file selected or without a description (since both are required). You should see the error messages being rendered on top:</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2090_laravel3/images/error.png\" alt=\"Instapic Errors\" title=\"Instapic Errors\" /></div><hr\n/><h2><span>Step 3</span> Add Validation to the Registration and Login Form</h3><p>Now that we know how to use Laravel&#8217;s <strong>Validation</strong> library, let&#8217;s revisit our first form &#8211; the login and registration form. At the moment, we just use an <code>echo</code> to see that the login or registration failed &mdash; let&#8217;s replace that with proper validation. Open <strong>application/controllers/user.php</strong> and update it like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User_Controller extends Base_Controller\n{\n    public function action_authenticate()\n    {\n        $email = Input::get(\'email\');\n        $password = Input::get(\'password\');\n        $new_user = Input::get(\'new_user\', \'off\');\n        $input = array(\n            \'email\' =&gt; $email,\n            \'password\' =&gt; $password\n        );\n        if( $new_user == \'on\' ) {\n            $rules = array(\n                \'email\' =&gt; \'required|email|unique:users\',\n                \'password\' =&gt; \'required\'\n            );\n            $validation = Validator::make($input, $rules);\n            if( $validation-&gt;fails() ) {\n                return Redirect::to(\'home\')-&gt;with_errors($validation);\n            }\n            try {\n                $user = new User();\n                $user-&gt;email = $email;\n                $user-&gt;password = Hash::make($password);\n                $user-&gt;save();\n                Auth::login($user);\n                return Redirect::to(\'dashboard\');\n            }  catch( Exception $e ) {\n                Session::flash(\'status_error\', \'An error occurred while creating a new account - please try again.\');\n                return Redirect::to(\'home\');\n            }\n        } else {\n            $rules = array(\n                \'email\' =&gt; \'required|email|exists:users\',\n                \'password\' =&gt; \'required\'\n            );\n            $validation = Validator::make($input, $rules);\n            if( $validation-&gt;fails() ) {\n                return Redirect::to(\'home\')-&gt;with_errors($validation);\n            }\n            $credentials = array(\n                \'username\' =&gt; $email,\n                \'password\' =&gt; $password\n            );\n            if( Auth::attempt($credentials)) {\n                return Redirect::to(\'dashboard\');\n            } else {\n                Session::flash(\'status_error\', \'Your email or password is invalid - please try again.\');\n                return Redirect::to(\'home\');\n            }\n        }\n    }\n    public function action_logout()\n    {\n        Auth::logout();\n        Redirect::to(\'home/index\');\n    }\n}\n</pre><p>Since we made our status message renderings in a modular fashion, we don&#8217;t even need to write any additional HTML to see the error messages in action! Just try it out!</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2090_laravel3/images/login_error.png\" alt=\"Instapic Errors\" title=\"Instapic Errors\" /></div><hr\n/><h2>Conclusion</h2><p>In the third tutorial in our <strong>Laravel</strong> series, we learned:</p><ul><li>How, when and where to use <strong>Laravel Filters</strong></li><li>How to use Laravel&#8217;s <strong>Validation</strong> library, and how to handle the <strong>Validation</strong> library&#8217;s errors.</li><li>How to manage files in Laravel using the <strong>Files</strong> library</li></ul><p>Laravel comes with a lot of these small functions and libraries, that although implementable in other ways, is made easier and simpler (e.g. file uploads in a single line!) by adopting Laravel&#8217;s expressive nature. It&#8217;s these little time-saving libraries add up and over time, saves you a ton of wasted productivity rewriting code.</p><p>Next in our Web Applications from Scratch with Laravel series, we&#8217;ll learn more about events, migrations and some advanced usage of the Eloquent ORM!</p><p>What do you think of the Laravel libraries discussed in the tutorial? Is it something that you find useful? Let me know in the comments! And, if you&#8217;re a <a\nhref=\"http://tutsplus.com/\"  target=\"_blank\">Tuts+ Premium member</a>, stay tuned for our upcoming Laravel Essentials course!<div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(33,3,1,1358049657,NULL,' Quick Tip: 7 Super-Handy PHP Functions for Beginners ','Have you ever taken a look at the list of functions available in PHP? I just counted 5025 on the PHP quick reference page. Granted, it depends on what extensions you have enabled, but still: that’s one heap of functions! While I can’t show you every one of them, if you’re new to the language, I’ll introduce you to seven really handy ones in this quick tip!(Continue)','Have you ever taken a look at the list of functions available in PHP? I just counted 5025 on the PHP quick reference page. Granted, it depends on what extensions you have enabled, but still: that’s one heap of functions! While I can’t show you every one of them, if you’re new to the language, I’ll introduce you to seven really handy ones in this quick tip!(Continue)',1,0,'quick-tip-7-super-handy-php-functions-for-beginners',305,0,'https://d2o0t5hpnwv4c1.cloudfront.net/2083_7PHPFunctions/php-functions.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25937\'), post_id: 25937, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Have you ever taken a look at the list of functions available in PHP? I just counted 5025 on the <a\nhref=\"http://www.php.net/quickref.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.php.net\']);\">PHP quick reference page</a>. Granted, it depends on what extensions you have enabled, but still: that&#8217;s one heap of functions! While I can&#8217;t show you every one of them, if you&#8217;re new to the language, I&#8217;ll introduce you to seven really handy ones in this quick tip!</p><p><span\nid=\"more-25937\"></span></p><hr\n/><h2><span> Function 1: </span> <code>array_rand</code></h2><p>Let&#8217;s start with a simple one. Ever want to get a random item out of an array? You might use <code>rand</code> or <code>mt_rand</code> to get a random number, passing 0 and the last index of the array as the min and max parameters; this will give you a random key that you can use to pull a value from your array.</p><p>However, there&#8217;s a way that&#8217;s a little bit quicker: <code>array_rand</code>. Just pass it your array, and it will return the random key.</p><pre class=\"php\" name=\"code\">$sites = [&quot;Nettuts+&quot;, &quot;Psdtuts+&quot;, &quot;Mobiletuts+&quot;, &quot;Mactuts+&quot;];\n$k = array_rand($sites);\n$sites[$k];\n</pre><p>If you want more than one random value from the array, pass a second parameter identifying how many; you&#8217;ll get back an array of random keys.</p><hr\n/><h2><span> Function 2: </span> <code>strip_tags</code></h2><p>It&#8217;s not uncommon to accept larger chunks of text from a user: maybe as a comment or a bio. Of course, you probably don&#8217;t want just any HTML tags to be allowed in that text, though, right? You don&#8217;t want random JavaScript running, or perhaps your styling dictates they only use plain text. So, you&#8217;ll want to strip out the HTML tags they enter, using <code>strip_tags</code>:</p><pre class=\"php\" name=\"code\">$message = &quot;&lt;div&gt; This is my bio &lt;/div&gt;&quot;;\necho strip_tags($message); // &quot;This is my bio&quot;\n</pre><p>Of course, you might want to allow certain tags, like <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, or <code>&lt;code&gt;</code>, for some simple styling; pass a string listing those as the second parameter:</p><pre class=\"php\" name=\"code\">$message = &quot;&lt;div&gt; This is &lt;strong&gt;my&lt;/strong&gt; bio &lt;/div&gt;&quot;;\necho strip_tags($message, &quot;&lt;strong&gt;&lt;em&gt;&lt;code&gt;&quot;); // &quot;This is &lt;strong&gt;my&lt;/strong&gt; bio&quot;\n</pre><hr\n/><h2><span> Function 3: </span> <code>strftime</code></h2><p>Dates are a big part of any web apps, so you should be able to output them in any format you need. It&#8217;s not hard to get a timestamp&mdash;you&#8217;ll pull it from a database or use <code>time()</code>, maybe&mdash;but how about formatting it? The <code>strftime</code> function can format that timestamp in any way you&#8217;d like. You&#8217;ll pass it a format string and the timestamp and get the date back out.</p><pre class=\"php\" name=\"code\">strftime(&quot;%B %d, %Y&quot;, time()); // July 28, 2012\n</pre><p>Of course, it&#8217;s impossible to memorize all the formatting tokens, so I use the handy <a\nhref=\"http://strfti.me/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'strfti.me\']);\">strfti.me</a> to help me; give it a try, and you&#8217;ll love it, too.</p><hr\n/><h2><span> Function 4: </span> <code>basename</code></h2><p>When working with a file, you usually want to get at it via its absolute path. However, if you need to display information about this file to the user, you probably just want to show them the file name, and not its whole path. Enter <code>basename</code>: this handy function will strip that path down to just the file name; just pass it the path as the parameter; if you want to get rid of a suffix, like a file extension, pass that suffix as the second parameter.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"php\" name=\"code\">$path = &quot;/some/long/path/to/the/special_file.txt&quot;;\n$filename1 = basename($path); // special_file.txt\n$filename2 = basename($path, &quot;.txt&quot;); // special_file\n</pre><hr\n/><h2><span> Function 5: </span> <code>list</code></h2><p>This one&#8217;s pretty cool: let&#8217;s say you have an array, and you want to assign its items to variables of their own. The <code>list</code> function makes this super-simple:</p><pre class=\"php\" name=\"code\">$array = [&quot;Ellery&quot;, &quot;Queen&quot;];\nlist($first_name, $last_name) = $array;\necho $first_name; // Ellery\necho $last_name; // Queen\n</pre><p>As you can see, we just pass the new variable names as parameters to the <code>list</code> function and set that equal to the array. It&#8217;s a bit different from the normal syntax, since the function call is on the left, but, yes, it does work. Here&#8217;s a good example from the PHP docs (for <code>explode</code>):</p><pre class=\"php\" name=\"code\">$data = &quot;foo:*:1023:1000::/home/foo:/bin/sh&quot;;\nlist($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(&quot;:&quot;, $data);\n</pre><hr\n/><h2><span> Function 6: </span> <code>range</code></h2><p>If you ever need a list of numbers to iterate over, you&#8217;ll want to check out the <code>range</code> function. Just pass it a starting and ending number (or letter), and it will return an array of the numbers:</p><pre class=\"php\" name=\"code\">range(0, 10); // array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nrange(\'a\', \'f\'); // array(\'a\', \'b\', \'c\', \'d\', \'e\'. \'f\');\n</pre><p>As you can see, it&#8217;s an inclusive range, so both the numbers you define are included. You could also pass a step parameter to specify the increment between numbers:</p><pre class=\"php\" name=\"code\">range(2, 10, 2); // array(2, 4, 6, 8, 10);\n</pre><hr\n/><h2><span> Function 7: </span> <code>isset</code></h2><p>Here&#8217;s a handy way to check if a variable has been set: use the <code>isset</code> function. You just pass it a variable name, and it will return true if that variable exists, and is set to something other than <code>NULL</code>.</p><pre class=\"php\" name=\"code\">$name = &quot;Joe&quot;;\nisset($name); // true\nisset($age); // false\n</pre><p>Since this function also works with the items in array and associative arrays, this function is often used to check for the existence of specific keys on the <code>$_GET</code> and <code>$_POST</code> superglobal arrays: if a given value exists, you&#8217;ll do one thing; otherwise, you&#8217;ll do something else. For example, a search page might go something like this:</p><pre class=\"php\" name=\"code\">if(isset($_GET[\'query\'])) {\n    // get results and display them\n} else {\n    // show some default content\n}\n</pre><hr\n/><h2>New to PHP?</h2><blockquote\nclass=pullquote><p>I&#8217;ve written a new ebook, <em>Getting Good with PHP</em>, with <a\nhref=\"http://rockablepress.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'rockablepress.com\']);\">Rockable Press</a>.</p></blockquote><p>Well, there you go: seven handy PHP functions you should find pretty useful as you code. If you&#8217;re new to PHP, I want to let you in on something: I&#8217;ve written a new ebook, <em>Getting Good with PHP</em>, with <a\nhref=\"http://rockablepress.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'rockablepress.com\']);\">Rockable Press</a>. I wrote it especially for those who don&#8217;t know a thing about PHP, but want to get up to speed as quickly as possible. If that&#8217;s you, I hope you&#8217;ll check it out when it releases in the extremely near future! We&#8217;ll keep you posted.</p><p>So, now that you&#8217;ve read my choices, what do you think PHP&#8217;s most handy function are? Let us know in the comments!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(34,3,1,1358049660,NULL,' Optimize Magento in the Cloud ','In this follow-up tutorial, we’ll optimize Magento, add a Redis cache, SSL and DNS alias, then scale the application for benchmarking and production. The following assumes you’ve already used the first tutorial to launch a basic Magento cloud application on Pagoda Box. Ready to optimize?(Continue)','In this follow-up tutorial, we’ll optimize Magento, add a Redis cache, SSL and DNS alias, then scale the application for benchmarking and production. The following assumes you’ve already used the first tutorial to launch a basic Magento cloud application on Pagoda Box. Ready to optimize?(Continue)',1,0,'optimize-magento-in-the-cloud',195,0,'https://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-magento.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"https://github.com/pagodabox/magento-install-optimized/tarball/tutorial\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25837\'), post_id: 25837, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this <a\nhref=\"http://net.tutsplus.com/tutorials/php/how-to-super-scale-magento-in-the-cloud/\" >follow-up tutorial</a>, we&#8217;ll optimize Magento, add a Redis cache, SSL and DNS alias, then scale the application for benchmarking and production. The following assumes you&#8217;ve already used the first tutorial to launch a basic Magento cloud application on <a\nhref=\"https://pagodabox.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'pagodabox.com\']);\">Pagoda Box</a>. Ready to optimize?</p><p><span\nid=\"more-25837\"></span></p><hr\n/><h2>Requirements</h2><p>You can <a\ntarget=\"_blank\" href=\"https://github.com/pagodabox/magento-install-optimized/tarball/tutorial\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">download the finished code</a> for this tutorial, or <a\ntarget=\"_blank\" href=\"https://pagodabox.com/cafe/pagoda/magento-optimized\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'pagodabox.com\']);\">install Magento</a> from a Quickstart to test a working site.</p><ul><li>A Pagoda Box Account (free)</li><li>A functional local <a\ntarget=\"_blank\" href=\"http://www.magentocommerce.com/product/community-edition\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.magentocommerce.com\']);\">Magento Install</a></li><li>Local Development Software (<a\ntarget=\"_blank\" href=\"http://www.mamp.info\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.mamp.info\']);\">MAMP</a> or <a\ntarget=\"_blank\" href=\"http://www.wampserver.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.wampserver.com\']);\">WAMP</a>)</li><li><a\ntarget=\"_blank\" href=\"http://git-scm.com/download\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'git-scm.com\']);\">Git</a> Installed (Can use SFTP)</li><li>The <a\nhref=\"http://help.pagodabox.com/customer/portal/articles/175474\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'help.pagodabox.com\']);\">Pagoda Terminal Client</a> Installed</li></ul><blockquote><p>Fair Warning: Pagoda Box is not traditional hosting. This tutorial not only optimizes Magento, it lays the groundwork for a progressive continuous integration workflow.</p></blockquote><hr\n/><h2> <span>Step 1:</span> Enable eAccelerator, XCache or APC Cache</h2><p>Enabling a Bytecode Cache will optimize performance, especially with large codebases such as Magento. You could use eAccelerator or XCache bytecode caching, but Magento recommends APC. To enable APC, simply add it to the list of php extensions in the Boxfile as follows:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nweb1:\n  php_extensions:\n    - apc\n</pre><p>Your new Boxfile should look like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nweb1:\n  name: mag-app\n  shared_writable_dirs:\n    - media\n    - var\n  php_version: 5.3.8\n  php_extensions:\n    - pdo_mysql\n    - mysql\n    - simplexml\n    - mcrypt\n    - hash\n    - gd\n    - dom\n    - iconv\n    - curl\n    - soap\n    - apc\n  after_build:\n  - &quot;mv pagoda/local.xml app/etc/local.xml&quot;\ncron:\n    - &quot;*/15 * * * *&quot;: &quot;curl -s -o /dev/null http://magento.pagodabox.com/cron.php&quot;\ndb1:\n  name: mag-db\n  type: mysql\n</pre><hr\n/><h2> <span>Step 2:</span> Create a Redis Component</h2><blockquote><p>By default, Magento sessions on Pagoda Box are located in writable storage, and are accessible to all your web instances. This tutorial moves sessions to Redis, which is an &#8220;advanced key-value store&#8221;. Redis provides extremely powerful in-memory caching, coupled with persistent data for far better read, write, and session performance.</p></blockquote><h3>Create a Redis Cache from the Boxfile</h3><p>First, enable the Redis extension by adding <code>- redis</code> to the extensions list in the Boxfile, just as we did for APC. This allows your PHP components to connect with Redis. Also add a Redis cache component to your Boxfile as follows:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\ncache1:\n  name: mag-cache\n  type: redis\n</pre><p>Your updated Boxfile should look like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nweb1:\n  name: mag-app\n  shared_writable_dirs:\n    - media\n    - var\n  php_version: 5.3.8\n  php_extensions:\n    - pdo_mysql\n    - mysql\n    - simplexml\n    - mcrypt\n    - hash\n    - gd\n    - dom\n    - iconv\n    - curl\n    - soap\n    - apc\n    - redis\n  after_build:\n  - &quot;mv pagoda/local.xml app/etc/local.xml&quot;\ncron:\n    - &quot;*/15 * * * *&quot;: &quot;curl -s -o /dev/null http://magento.pagodabox.com/cron.php&quot;\ndb1:\n  name: mag-db\n  type: mysql\ncache1:\n  name: mag-cache\n  type: redis\n  </pre><p>When a Redis component is included in the Boxfile, a Redis cache is automatically added to your infrastructure when you deploy updates.</p><h3>Alternate: Create a Redis Cache from the Dashboard</h3><p>You can also create a Redis cache from the Pagoda Box Dashboard. The Dashboard is also where you scale the Redis component.</p><p>First, click &#8220;Add Cache&#8221; in the Dashboard.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-add-cache.png\" border=\"0\" /></div><p>&#8230;then choose Redis.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-choose-redis.png\" border=\"0\" /></div><p>Once your new cache component has been deployed, click it in the Dashboard, then choose your preferred amount of RAM as follows:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-scale-redis.png\" border=\"0\" /></div><p>Data is persistant with Redis, so you can resize the cache without losing sessions or caching data held in memory, unlike Memcache.</p><hr\n/><h2> <span>Step 3:</span> Configure Magento for Redis Sessions and Cache</h2><blockquote><p>This tutorial shares a single Redis component for Magento sessions and caching. If your site receives enough traffic, creating a separate Redis component for both sessions and caching can provide an added measure of performance.</p></blockquote><h3>Redis Sessions</h3><p>Configure Magento sessions to use Redis.</p><blockquote><p>If you ever need to override Magento default files (like we will here), do not modify Magento&#8217;s core files. Override files should always reside in Magento&#8217;s Local Directory to protect functionality and future upgrades.</p></blockquote><ul><li><p>Edit the session handler section of your <code>local.xml</code> file to use Redis, and set the session save path as follows:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;session_save&gt;&lt;![CDATA[redis]]&gt;&lt;/session_save&gt;\n&lt;session_save_path&gt;&lt;![CDATA[tcp://tunnel.pagodabox.com:6379]]&gt;&lt;/session_save_path&gt;\n</pre></li><li><p>Next, add Redis support to Magento by overriding a core Magento file. Copy the file:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\napp/code/core/Mage/Core/Model/Session/Abstract/Varien.php\n</pre><p>Then create your own local version at:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\napp/code/local/Mage/Core/Model/Session/Abstract/Varien.php\n</pre><p>In the new file, around line 62, add the following:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\ncase \'redis\':\n                ini_set(\'session.save_handler\', \'redis\');\n                session_save_path($this-&gt;getSessionSavePath());\n                break;\n</pre></li></ul><h3>Redis Cache</h3><p>Now, configure Magento cache to use Redis, as well.</p><ul><li><p>Add the Credis library and Cm Module to enable Redis as a Magento cache. The module consists of one file, which you can download <a\nhref=\"https://raw.github.com/colinmollenhour/Cm_Cache_Backend_Redis/master/Cm/Cache/Backend/Redis.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'raw.github.com\']);\" target=\"_blank\">here</a>. Although the Cm module author recommends installing via modman, modman doesn&#8217;t correctly register all submodules with Pagoda Box. Instead, save the file as: <code>app/code/community/Cm/Cache/Backend/Redis.php</code>.</p><p>Add the Credis library as a Git submodule to your project:</p><pre name=\"code\" class=\"php\">\n    $ cd your_site_dir\n    $ git submodule add git://github.com/colinmollenhour/credis.git lib/Credis\n    </pre></li><li><p>Once again, edit the <code>local.xml</code> file. Change the cache delcaration and it&#8217;s contents as follows:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        &lt;cache&gt;\n          &lt;backend&gt;Cm_Cache_Backend_Redis&lt;/backend&gt;\n          &lt;backend_options&gt;\n            &lt;server&gt;tunnel.pagodabox.com&lt;/server&gt;\n            &lt;port&gt;6379&lt;/port&gt;\n            &lt;database&gt;0&lt;/database&gt;\n            &lt;force_standalone&gt;0&lt;/force_standalone&gt;\n            &lt;automatic_cleaning_factor&gt;0&lt;/automatic_cleaning_factor&gt;\n            &lt;compress_data&gt;1&lt;/compress_data&gt;\n            &lt;compress_tags&gt;1&lt;/compress_tags&gt;\n            &lt;compress_threshold&gt;20480&lt;/compress_threshold&gt;\n            &lt;compression_lib&gt;gzip&lt;/compression_lib&gt;\n          &lt;/backend_options&gt;\n        &lt;/cache&gt;\n</pre></li><li><p>Set far future expires to drastically reduce the number of requests per visitor as they browse your site. Do this after finishing frontend theme work. Adding the following <code>static_expire</code> directive to the <code>web1</code> section of your Boxfile will expire static asset caches after 1 year.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nweb1:\n  static_expire: 31536000\n</pre></li><li><p>Add the updated files to git, commit and push to Pagoda Box.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n	$ git add .\n	$ git commit -m \'installed and configured redis\'\n	$ git push pagoda --all\n</pre></li><li><p>After deploying, clear the Magento system cache by logging into your Magento admin and going to System -> Cache Management, then clicking &#8216;Flush Magento Cache&#8217;.</p></li></ul><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-flush-cache.png\" border=\"0\" /></div><h3>NOTE: Avoid JS &#038; CSS in Writable Storage</h3><p>Magento has a few optimization utilities that merge javascript and css files, then place them in Pagoda Box&#8217;s shared writable storage. Most of the time, that&#8217;s a non-issue, but at high traffic volume, Pagoda Box can access files from the distributed web instances much faster than files in shared writable storage. For high traffic performance, keeping javascript and css in the repo outperforms minification.</p><p>To turn file merging off, log into your Magento admin panel, then navigate to: System > Configuration > Developer</p><p>Choose &#8220;No&#8221; under JavaScript Settings and CSS Settings as follows:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-magento-css-js.png\" border=\"0\" /></div><hr\n/><h2> <span>Step 4:</span> Verify Redis is Working</h2><p>Now that Magento is configured for Redis, verify that everything is working. Follow this <a\ntarget=\"_blank\" href=\"http://help.pagodabox.com/customer/portal/articles/415164#-tunneling-into-redis\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'help.pagodabox.com\']);\">Redis guide</a> to establish a secure tunnel, then use the terminal to access Redis on Pagoda Box. Once connected, run the following command to display a list of all  stored keys.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$ keys *\n</pre><p>Assuming you&#8217;ve browsed the udpated site, you should see a list of assorted keys. If you see session keys only, cache keys only, or if you don&#8217;t see any keys at all, review your configuration settings and ensure you&#8217;ve cleared the Magento cache.</p><p>For a full list of useful commands when using Redis, see their official <a\ntarget=\"_blank\" href=\"http://redis.io/commands\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'redis.io\']);\">documentation</a>.</p><hr\n/><h2> <span>Step 5:</span> Adding DNS / SSL</h2><p>Piggyback SSL is free and automatic for every app on Pagoda Box at their app&#8217;s subdomain (appname.pagodabox.com). While it&#8217;s possible to benchmark using Piggyback SSL, we&#8217;ll enable Third-Party SSL for purposes of the tutorial. Wildcard Certs and Self-signed SSL are detailed in this <a\ntarget=\"_blank\" href=\"http://help.pagodabox.com/customer/portal/articles/175458-adding-ssl<br /> \" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'help.pagodabox.com\']);\">DNS / SSL guide</a>.</p><h3>Add SSL</h3><p>Begin by clicking the &#8220;Add an SSL Certificate&#8221; button under the DNS / SSL Tab in the Pagoda Box dashboard.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-ssl-0.png\" border=\"0\" /></div><p>Next, choose whether you&#8217;re creating a certificate, or using an existing SSL certifcate, as we are here. Assuming you&#8217;ve got an existing certificate, click &#8220;Transfer Existing&#8221;.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-ssl-1.png\" border=\"0\" /></div><p>Finally, paste the relevant information into the appropriate field and activate. Your SSL Certificate is now saved with your application.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-ssl-2.png\" border=\"0\" /></div><h3>Add A DNS Alias</h3><p>After you&#8217;ve entered an SSL Certificate, it will appear in your list of available SSL Certificates. If you haven&#8217;t already, add your custom domain as a DNS Alias to your application. Click &#8220;Add New Alias&#8221; and enter your registered domain as the alias. Pagoda Box will assign a shared IP address by default, but this will change when you associate an SSL certificate with the DNS Alias.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-dns-0.png\" border=\"0\" /></div><p>Finally, associate your SSL certificate with your DNS alias by selecting it from the SSL dropdown list next to your DNS Alias, then click &#8220;Save&#8221;. With the SSL certificate now tied to your DNS Alias, your alias gets a unique, dedicated IP address.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-dns-1.png\" border=\"0\" /></div><blockquote><p>Once you associate an SSL Certificate with a DNS alias, that alias will get a dedicated IP address. Make sure to verify that your A-Record matches the IP provided after you add, delete or modify your SSL Certificates.</p></blockquote><hr\n/><h2> <span>Step 6:</span> Benchmark with Blitz.io</h2><blockquote><p>We&#8217;ve used Blitz.io to benchmark a few Magento applications. It tests both http response and database writes using variable lists URLs and Cookies.</p></blockquote><p>To start, create a <a\ntarget=\"_blank\" href=\"https://secure.blitz.io/login/signup\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'secure.blitz.io\']);\">free account</a> on Blitz.io. Once you&#8217;ve registered, look for the &#8220;START!&#8221; button at the bottom of your welcome page.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-blitz-0.png\" border=\"0\" /></div><p>Click &#8220;Start&#8221;, and Blitz will provide a series of simple tutorials that explain the variables you&#8217;ll use in a Query URL to test your application. For our purposes, your base Query URL should look something like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n-p 1-24:60 -r california -T 4000 -v:cookie list[d1b1530ff8694817e1f11f55e0a4a120,805d9a11f3b9f8ea35ee2db1d9aac3fc] -v:urls list[index.php,furniture.html,ottoman.html,about-magento-demo-store,checkout/cart/add?product=51] -b &quot;my-cookie=#{cookie}Ó http://magento-demo.pagodabox.com/#{urls}\n</pre><p>Specifically, that query will gradually test 1-24 concurrent visitors (can test to 250 with Free account) over 60 seconds, from California, timing out at 4 seconds. The query also sets a list of cookies and URLs as variables, plus the domain we&#8217;re testing. We&#8217;ve included a Home page, CMS page, Catalog page, Product page and Checkout page to test.</p><p>Using Cookie variables and a checkout/cart/add?product URL lets us test the DB writes. Obtain a list of valid cookies by navigating your site in Chrome > Inspect Element > Resources > Cookies > [yoursite] > frontend. Copy the key from the Value column, as indicated below:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-cookies.png\" border=\"0\" /></div><p>Replace the cookies, URLs and Domain from the URL query above with the appropriate elements from your site, then enter the new query on Blitz.io, and click &#8220;Run&#8221;.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-blitz-2.png\" border=\"0\" /></div><p>The first time you &#8220;Rush&#8221; your app, Blitz will display an Authorization Error and ask you to prove ownership by adding a specific URL to your app. Follow the onscreen Blitz instructions for creating a unique authorization file on your local computer, then push changes to Pagoda Box.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n	$ git add .\n	$ git commit -m &quot;blitz auth file&quot;\n	$ git push pagoda --all\n</pre><p>Confirm the new file is in place by visiting the URL in a browser. You should see &#8220;42&#8243;. Note that the &#8220;root of your www directory&#8221; is the root of your project unless you have configured <code>document_root</code> in your Boxfile to be another directory.</p><p>Once everything is in place, you&#8217;re free to adjust Blitz variables and test. For example, changing <code>1-24</code> to <code>60-60</code> will change concurrency from a graduated increase to 24 concurrency to 60 sustained concurrent visitors. Isolating URLs in the variable list  allows you to identify performance bottlenecks by isolating various page types. You can even test DB write capacity by using the <code>checkout/cart/add?</code> url.</p><p>Of course, benchmarking is simply an indicator to help scale the application. Make sure to scale to various levels as you benchmark, noting the change in results (see <a\ntarget=\"_blank\" href=\"https://pagodabox.com/videos/scale-php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'pagodabox.com\']);\">Scaling Magento video</a>). Blitz.io should help identify application bottlenecks and determine the appropriate scale for your expected traffic.</p><hr\n/><h2> <span>Step 7:</span> Scaling on Pagoda Box</h2><p>There has been quite a bit of initial prep work to get to this stage, but this is where it all comes together. Continuous integration, ongoing management, and scalability are now much simpler. As you benchmark, keep in mind that charges are hourly. Scaling to test briefly will cost only a few dollars.</p><h3>Scaling Web Instances</h3><p>To scale your web application for more traffic, open your Web Component from the Pagoda Box dashboard as follows:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-scale-web-0.png\" border=\"0\" /></div><p>Then, click and drag the slider to the desired number of instances, and click &#8220;Save&#8221;. Pagoda Box will deploy Magento from your repository to new instances. After all instances are built and verified, the routing layer will redirect traffic to the new instances, and decommission the old without any downtime (again, see <a\ntarget=\"_blank\" href=\"https://pagodabox.com/videos/scale-php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'pagodabox.com\']);\">Scaling Magento video</a>).</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-scale-web-1.png\" border=\"0\" /></div><blockquote><p>Note: As you&#8217;re using it, the slider appears to max out at 25 instances, but will reset for greater scaling after the upper limit has been saved.</p></blockquote><h3>Scaling a Database : Cloud (Cache Components are identical)</h3><p>To scale your cloud database, open your Databsase Component from the Pagoda Box dashboard as follows:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-scale-db-0.png\" border=\"0\" /></div><p>Notice the Red Face is unhappy because RAM usage is too high. To increase RAM, click the green &#8220;Change&#8221; arrow,  select your desired amount of RAM, and click &#8220;Save&#8221;.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-scale-redis.jpg\" border=\"0\" /></div><p>Pagoda Box will create a larger database, migrate data, sync via master-master replication, then point your application to the new database. Your site is live throughout the migration.</p><h3>Scaling a Database : Private</h3><p>To scale your Private database, open your Databsase Component from the Pagoda Box dashboard as follows:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-scale-db-0.png\" border=\"0\" /></div><p>Select the resources you&#8217;d like for your database, determine if you&#8217;d like replication, then click &#8220;Save&#8221;.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2080_pagodaMagento/pagoda-scale-db-1.png\" border=\"0\" /></div><p>Pagoda Box will create a larger database, migrate data, sync via master-master replication, then point your application to the new database. Your site is live throughout the migration.</p><p>Keep in mind that ordering a Private database may take more than 20 minutes, as a server is provisioned to your specifications.</p><blockquote><p>Note: currently, scaling from a Cloud database to a Private database requires some downtime as you manually migrate data. Scaling from Cloud to Cloud, or Private to Private is always automatic.</p></blockquote><hr\n/><h2>Summary</h2><p>That&#8217;s it! Your Magento application is now fully scalable in an instant, and updates are easily deployed with <code>$ git push pagoda --all</code>.  Enjoy!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(35,3,1,1358049661,NULL,' The Essentials of Creating Laravel Bundles ','The Laravel PHP framework offers its bundles system to allow developers to redistribute useful packages of code, or to organize applications into several “bundles” of smaller applications.In this tutorial, we will learn the ins and outs of creating and distributing bundles from scratch.','The Laravel PHP framework offers its bundles system to allow developers to redistribute useful packages of code, or to organize applications into several “bundles” of smaller applications.In this tutorial, we will learn the ins and outs of creating and distributing bundles from scratch.',1,0,'the-essentials-of-creating-laravel-bundles',301,0,'https://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/main_image.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"https://github.com/codehappy/nettuts-bundles\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25820\'), post_id: 25820, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>The <a\nhref=\"http://laravel.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\" title=\"Laravel PHP Framework\">Laravel PHP framework</a> offers its bundles system to allow developers to redistribute useful packages of code, or to organize applications into several &#8220;bundles&#8221; of smaller applications.</p><p>In this tutorial, we will learn the ins and outs of creating and distributing bundles from scratch.<br\n/> <span\nid=\"more-25820\"></span></p><p>A Laravel bundle has access to all of the features that the framework offers to its host application, including routing, migrations, tests, views and numerous other useful features.</p><blockquote><p>Here&#39;s a little secret, between us: the <code>application</code> folder of the Laravel source package is also a bundle, which Laravel refers to as the <code>DEFAULT_BUNDLE</code>.</p></blockquote><hr\n/><h2>When to Create a Bundle?</h2><p>Before writing a new piece of code, I like to ask myself a few simple questions to determine whether it is appropriate for a bundle. Let me share this technique with you.</p><h3>Could this code be useful to others?</h3><p>If the answer to this question is yes, then I would first ensure that someone has not already created a similar bundle or package. Other than for learning purposes, it&#8217;s pointless to recreate the wheel. If the other package is of a high enough standard to be used in your project, then use that instead and save yourself the time.</p><p>Secondly, I think about the code and decide whether or not it might be useful to users of other frameworks, or people not using a framework at all. If the code is not related to the Laravel framework and does not need to make use of Laravel&#39;s core classes, then I would create a <a\nhref=\"http://packagist.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'packagist.org\']);\">Composer package</a> instead. <a\nhref=\"http://getcomposer.org\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'getcomposer.org\']);\">Composer</a> packages are widely becoming the standard for sharing code that is not restricted to a single framework or project.</p><p>For more information on Composer, refer to the following links:</p><ul><li><a\nhref=\"http://getcomposer.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'getcomposer.org\']);\" title=\"Composer Dependency Manager for PHP\">Official documentation</a><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/easy-package-management-with-composer/\" >Easy Package Management with Composer</a></ul><p>If the code could be useful to others, and is dependent upon the Laravel framework, then you have a good reason to create a new bundle.</p><h3>Will I have to write this code again?</h3><blockquote\nclass=pullquote><p>DRY is the name of the game.</p></blockquote><p>If the code provides functionality that you write frequently, then it makes sense to create a bundle. DRY (Don&#39;t repeat yourself!) is the name of the game.</p><h3>Could this code be considered a stand-alone application?</h3><p>For example, you may be building a simple site that, amongst other features, has a blog component. The blog could be considered a separate application to be contained in a bundle for much greater organization of your project.</p><p>Another example would be an administrative section, or &#39;back-end&#39; for your website. This section could easily be considered a separate component from the main application, and could instead be organized into one or more bundles.</p><h3>Would this code fit into a single class?</h3><p>If this is the case, you might consider writing a &#39;Library&#39; instead. A library is a single class that contains reusable code. It can be added to a Laravel project easily by dropping the class into the <code>application/libraries/</code> directory, which is auto loaded by default.</p><hr\n/><h2>Creating a Bundle</h2><p>Let&#8217;s create a simple plug-in that interacts with the <a\nhref=\"https://en.gravatar.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'en.gravatar.com\']);\" title=\"Gravatar, Global Avatars\">Gravatar service</a> to offer a simple method for generating avatars of various sizes within our main application. We will also add the necessary functionality to enter an email address and avatar size, and preview the associated gravatar on the page.</p><p>Let&#39;s get started by creating a new directory within the <code>/bundles</code> directory of our project. We will call the directory and our bundle <code>gravvy</code>. Not gravy&#8230; gravvy.</p><p>Let&#39;s add gravvy to the bundles array within <code>application/bundles.php</code> so that we can test it as we go along. We will add an <code>&#39;auto&#39; => true</code> option to the array so that the bundle will be started automatically, and any autoloader mappings we create will be available to the whole of Laravel.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">return array(\n    \'docs\' =&gt; array(\'handles\' =&gt; \'docs\'),\n    \'gravvy\' =&gt; array(\n        \'auto\' =&gt; true\n    )\n);\n</pre><p>First, we will need to create a small library that will retrieve a user&#8217;s avatar, using an email address. Create a new file within the root of the bundle, named <code>gravvy.php</code>. Let&#39;s create a class, called <code>Gravvy</code> with a static method, <code>make()</code>, to replicate the naming scheme used by Laravel&#39;s own libraries.</p><p>The <code>make()</code> method will accept two parameters: an email address and an integer to represent the size of the avatar to retrieve.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\n/**\n * Class to create Gravatar image elements.\n *\n * @author  You &lt;you@you.com&gt;\n */\nclass Gravvy\n{\n    /**\n     * Create a new image element from an email address.\n     * @param  string  $email The email address.\n     * @param  integer $size  The avatar size.\n     * @return string The source for an image element.\n     */\n    public static function make($email, $size = 32)\n    {\n        // convert our email into an md5 hash\n        $email = md5($email);\n        // return the image element\n        return \'&lt;img src=&quot;http://www.gravatar.com/avatar/\'\n                    .$email.\'?s=\'.$size;\n    }\n}\n</pre><p>Bundle root directories aren&#39;t auto-loaded, so let&#39;s write a mapping so that Laravel knows where to find the &#39;Gravvy&#39; class when it needs it.</p><p>When starting a bundle, Laravel looks for a file, named <code>start.php</code>, and executes it. So let&#39;s create one within our new bundle&#39;s directory to hold our auto-load mappings.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\n// /bundles/gravvy/start.php\nAutoload::map(array(\n    \'Gravvy\' =&gt; path(\'bundles\').\'/gravvy/gravvy.php\'\n));\n</pre><p>Now Laravel will knows where to find the definition for our <code>Gravvy</code> class, and will load the source when it first needs it. Very efficient!</p><p>The <code>path()</code> method is a helper function, which returns the absolute path to useful folders used by Laravel. In this case, we are using it to retrieve the absolute path to the bundles directory.</p><p>Now that the we have our working Gravvy class, we could attempt to use it from within a controller to see if we get the expected output, but I think it would be more appropriate to write a unit test.</p><p>Just like the host application, unit tests are available from within the bundle. Let&#39;s create a <code>tests</code> folder within the bundle, and add a new file, called <code>general.test.php</code>.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nclass TestGeneral extends PHPUnit_Framework_TestCase {\n    /**\n     * Test that an avatars output appears as expected.\n     *\n     * @return void\n     */\n    public function testAvatarImageIsGenerated()\n    {\n        // start the gravvy bundle\n        Bundle::start(\'gravvy\');\n        // check that the output matches the expected\n        $this-&gt;assertEquals(Gravvy::make(\'thepunkfan@gmail.com\'),\n            \'&lt;img src=&quot;http://www.gravatar.com/avatar/fac3a58aaa455adbcb3f684ccff663b8?s=32&quot; /&gt;\');\n    }\n    /**\n     * Test that an avatars output appears as expected when\n     * specifying a custom avatar size.\n     *\n     * @return void\n     */\n    public function testAvatarImageIsGeneratedWithSize()\n    {\n        // start the gravvy bundle\n        Bundle::start(\'gravvy\');\n        // check that the output matches the expected\n        $this-&gt;assertEquals(Gravvy::make(\'thepunkfan@gmail.com\', 64),\n            \'&lt;img src=&quot;http://www.gravatar.com/avatar/fac3a58aaa455adbcb3f684ccff663b8?s=64&quot; /&gt;\');\n    }\n}\n</pre><p>Above, we&#8217;ve written two PHPUnit tests: one to test the output of generating an avatar using an email, and another that also specifies an avatar size in pixels. You will notice that we call <code>Bundle::start(&#39;gravvy&#39;)</code> to manually start the bundle. This is because Laravel does not auto load bundles through the command line interface at present.</p><blockquote><p>As a core team member, I&#39;d like to point out that we intend to resolve this in a future version!</p></blockquote><p>Let&#39;s use Artisan to run our PHPUnit tests by typing the <code>test</code> command and using the bundle name, <code>gravvy</code>, as a parameter.</p><pre class=\"brush: plain; title: ; notranslate\" title=\"\">php artisan test gravvy\n</pre><div\nclass=\'tutorial_image\'><img\nsrc=\'http://d2o0t5hpnwv4c1.cloudfront.net/2079_laravelBundles/images/phpunit.png\' alt=\'PHPUnit Result\' title=\'\' border=\'0\'></div><p>Great! Our tests have run successfully on the first try, and our ego hast grown &#8211; just a little!</p><p>Now that our Gravvy class has been tested, people can use it in their own applications! Let&#39;s take the bundle a step further and create a couple of simple pages to generate and preview gravatars. We can use this example to learn how the routing system handles bundles.</p><p>To begin, let&#39;s create a new &#39;preview&#39; controller for our bundle. We will need to create a <code>controllers</code> directory within the bundle, and, within it, we&#8217;ll add a new file: <code>preview.php</code>.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: php; title: ; notranslate\" title=\"\">&lt;?php\nclass Gravvy_Preview_Controller extends Controller\n{\n    /**\n     * Show the preview avatar form.\n     */\n    public function action_form()\n    {\n        // load the form view\n        return View::make(\'gravvy::form\');\n    }\n    /**\n     * Show the resulting avatar.\n     */\n    public function action_preview()\n    {\n        // load the preview view\n        return View::make(\'gravvy::preview\');\n    }\n}\n</pre><p>The controller name must be prefixed with the bundle name, and appended with <code>_Controller</code> &#8211; as with normal controllers.</p><p>We could create some routes to map our controller actions to sensible URIs, but wouldn&#39;t it be better if we could let the user of our bundle decide on the base URI to use? It would? Let&#39;s do that then!</p><p>By adding a <code>&#39;handles&#39; =&gt; &#39;gravvy&#39;</code> key-value pair to the bundles configuration array, we can allow the user to change it without altering the code of the bundle itself. Here&#39;s the resulting configuration in <code>application/bundles.php</code>.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">return array(\n    \'docs\' =&gt; array(\'handles\' =&gt; \'docs\'),\n    \'gravvy\' =&gt; array(\n        \'auto\'      =&gt; true,\n        \'handles\'   =&gt; \'gravvy\'\n    )\n);\n</pre><p>Now we can use the <code>(:bundle)</code> place-holder in our routes, which will be replaced with the value of the <code>handles</code> option. Let&#39;s create a <code>routes.php</code> file within the root of our bundles and add some routes.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">Route::get(\'(:bundle)/form\', \'gravvy::preview@form\');\nRoute::post(\'(:bundle)/preview\', \'gravvy::preview@preview\');\n</pre><p>We have the route <code>GET gravvy/form</code> which is mapped to the <code>form</code> action of the <code>Preview</code> controller, and <code>POST gravvy/preview</code> which is mapped to the <code>preview</code> action of the <code>Preview</code> controller.</p><p>Let&#39;s create the associated views for our controller actions; you can make them as complex and pretty as you like, but I am going to keep them simple. First, create a <code>views</code> folder within the bundle, just like with the application directory.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;!-- /bundles/gravvy/views/form.blade.php --&gt;\n&lt;form action=&quot;{{ URL::to_action(\'gravvy::preview@preview\') }}&quot; method=&quot;POST&quot;&gt;\n    &lt;p&gt;&lt;label for=&quot;name&quot;&gt;Email Address:&lt;/label&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;email&quot; /&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;label for=&quot;name&quot;&gt;Avatar Size:&lt;/label&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;size&quot; /&gt;&lt;/p&gt;\n    &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Preview!&quot; /&gt;&lt;/p&gt;\n&lt;/form&gt;\n</pre><p>Now that we have a form that will submit an email and size field to the <code>preview@preview</code> controller/action pair, let&#39;s create a preview page for the generated avatar; we&#8217;ll use an attribute, named <code>$element</code>, to hold its source.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;!-- /bundles/gravvy/views/preview.blade.php --&gt;\n&lt;p&gt;{{ $element }}&lt;/p&gt;\n&lt;p&gt;{{ HTML::link\\_to\\_action(\'gravvy::preview@form\', \'&lt; Go Back!\') }}&lt;/p&gt;\n</pre><p>Now we must alter the <code>preview</code> action to make use of the data submitted from the form.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">/**\n * Show the resulting avatar.\n */\npublic function action_preview()\n{\n    // get data from our form\n    $email  = Input::get(\'email\');\n    $size   = Input::get(\'size\');\n    // generate the avatar\n    $avatar = Gravvy::make($email, $size);\n    // load the preview view\n    return View::make(\'gravvy::preview\')\n        -&gt;with(\'element\', $avatar);\n}\n</pre><p>We retrieve the POST data and use it to create our avatar. We must also add a <code>with()</code> method to the <code>View::make()</code> chain to allow for the element to be used within the view.</p><p>We can finally test our avatar previewing system! Take a look at the <code>/gravvy/form</code> URI and give it a go! Everything works as expected.</p><div\nclass=\'tutorial_image\'><img\nsrc=\'http://d2o0t5hpnwv4c1.cloudfront.net/2079_laravelBundles/images/views.png\' alt=\'Gravvy Views\' title=\'\' border=\'0\'></div><p>This may not be the best way to organize your bundle, but it does highlight some of the useful things that are possible. Have fun creating your own bundles, and be sure to consider publishing them on the <a\nhref=\"http://bundles.laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bundles.laravel.com\']);\">bundles</a> website.</p><hr\n/><h2>Publishing a Bundle</h2><p>Once your bundle is in a functional state, you may want to consider listing it within the <a\nhref=\"http://bundles.laravel.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bundles.laravel.com\']);\" title=\"Laravel Bundles Directory\">Laravel Bundles Directory</a>. Let&#39;s run through the process of submitting a new bundle.</p><p>First, you will need to have a <a\nhref=\"http://github.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">GitHub</a> account, and have your bundle versioned within a public repository. GitHub offers free accounts with an unlimited number of public repositories; <a\nhref=\"https://github.com/plans\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\" title=\"github Sign Up\">you will find their sign up form here</a>.</p><p>If you are new to version control with Git, I suggest reading the <a\nhref=\"http://net.tutsplus.com/tag/git/\"  title=\"Git articles on Nettuts\">great series of Git articles right here on Nettuts+</a>.</p><p>Once you have your account and code in order, make sure that the latest version of your bundle can be found within the &#39;master&#39; branch, and that the root of your bundle (where the <code>start.php</code> would be) is the root of the repository, rather than a subdirectory.</p><p>Next visit the <a\nhref=\"http://bundles.laravel.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bundles.laravel.com\']);\" title=\"Laravel Bundles Directory\">Laravel Bundles Directory website</a>, and sign in using your GitHub credentials.</p><div\nclass=\'tutorial_image\'><img\nsrc=\'http://d2o0t5hpnwv4c1.cloudfront.net/2079_laravelBundles/images/login.png\' alt=\'github login\' title=\'\' border=\'0\'></div><p>Now click the &#39;Submit a Bundle&#39; button, select your bundle repository from the drop down menu and hit the &#39;Continue&#39; button.</p><p>The sign up form is quite straight forward, but here are some &#39;gotchas&#39; that you may not spot.</p><p><strong><em>Name</em></strong></p><p>Name is a the lowercase keyword that is used to install your application. It needs to be a short but accurate word to describe your bundle.</p><p><strong><em>Summary / Description</em></strong></p><p>These fields can contain markdown format content. So feel free to copy the content from your GitHub <code>README.md</code> file.</p><p><strong><em>Dependencies / Tags</em></strong></p><p>Use the comma button on your keyboard to separate tags and dependencies. The dependencies field should contain the short install keyword for the bundle that exists as a dependency for the bundle you are submitting.</p><p><strong><em>Active</em></strong></p><p>The <code>Active</code> field simply determines whether or not the bundle will be displayed to other users. You are still able to install inactive bundles by their install keyword for testing purposes. Set this field to &#39;Yes&#39; only when you are happy for other people to use your bundle.</p><p>Once you click the &#39;Save&#39; button, your bundle has been submitted, and, if marked as &#39;Active&#39;, will appear in the bundle listings. You can always edit your bundle listing at a later date.</p><hr\n/><h2>Finding Bundles</h2><p>Bundles that have been shared with the Laravel community are listed in the Bundles directory at <a\nhref=\"http://bundles.laravel.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bundles.laravel.com\']);\">http://bundles.laravel.com</a>.</p><p>You can browse bundles by category, or use the search feature to find the bundle you&#39;re looking for. Once you have found a bundle that meets your requirements, take a look at the &#39;Installation&#39; tab of the bundle&#39;s profile to find the install keyword.</p><hr\n/><h2>Installing a Bundle</h2><p>Once you have the install keyword for a bundle, you can install it from the base of your project using the &#39;Artisan&#39; command line interface, and it&#39;s <code>bundle:install</code> command. For example..</p><pre class=\"brush: plain; title: ; notranslate\" title=\"\">php artisan bundle:install bob\n</pre><p>Artisan will consult the bundles API to retrieve the path to the bundles GitHub repository, and the repositories of all its dependencies. It will then download source packages directly from GitHub, and extract them to the <code>/bundles</code> directory for you.</p><p>You will need to manually add the bundle name to the array within <code>application/bundles.php</code> for the bundle to become enabled.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">return array(\n    \'docs\' =&gt; array(\'handles\' =&gt; \'docs\'),\n    \'bob\'\n);\n</pre><p>In some situations, you might need to add extra information to this <code>array</code> entry to facilitate auto starting, or directing certain routes to the bundle. The author will have provided this extra information in the bundles description, if that is the case.</p><hr\n/><p>Thanks for reading and enjoy creating your own bundles with Laravel! If you&#8217;d like to learn more about Laravel, be sure to <a\nhref=\"http://leanpub.com/codehappy\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'leanpub.com\']);\">pick up my book</a>!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(36,3,1,1358049663,NULL,' Test-Driven Development in PHP: First Steps ','Let’s admit it: the PHP community has lagged a bit, when it comes to advocating test-driven development. We know we should, but, even to this day, a sizable portion of the community does not. In this new series of videos and tutorials, created by the Nettuts+ team, we’re hoping to change that.Trust me: it’s not as tough as you think.','Let’s admit it: the PHP community has lagged a bit, when it comes to advocating test-driven development. We know we should, but, even to this day, a sizable portion of the community does not. In this new series of videos and tutorials, created by the Nettuts+ team, we’re hoping to change that.Trust me: it’s not as tough as you think.',1,0,'test-driven-development-in-php-first-steps',310,0,'https://d2o0t5hpnwv4c1.cloudfront.net/2078_tdd_in_php/tdd-in-php.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2078_tdd_in_php/learning.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div><div\nclass=\"session-post\"><em>This entry is part 3 of 12 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/test-driven-php/\" >Test-Driven PHP</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/php/automatic-testing-for-tdd-with-php/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/articles/news/its-time-to-dig-in/\" >It\'s Time to Dig In</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/\" >The Newbie\'s Guide to TDD</a></li><li>First Steps</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/automatic-testing-for-tdd-with-php/\" >Automatic Testing</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/lets-tdd-a-simple-app-in-php/\" >Let\'s TDD a Simple App</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/deciphering-testing-jargon/\" >Deciphering Testing Jargon</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/all-about-mocking-with-phpunit/\" >All About Mocking in PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/hands-on-unit-testing-with-phpunit/\" >Hands-On Testing With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/how-to-use-selenium-2-with-phpunit/\" >How to Use Selenium 2 With PHPUnit</a></li><li><a\nhref=\"http://net.tutsplus.com/articles/interviews/chatting-with-the-grumpy-php-programmer\" >Chatting With The Grumpy PHP Programmer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/evolving-toward-a-persistence-layer/\" >Evolving Toward a Persistence Layer</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/php/mockery-a-better-way/\" >Mockery: A Better Way</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25796\'), post_id: 25796, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Let&#8217;s admit it: the PHP community has lagged a bit, when it comes to advocating test-driven development. We know we should, but, even to this day, a sizable portion of the community does not. In this new series of videos and tutorials, created by the Nettuts+ team, we&#8217;re hoping to change that.</p><p>Trust me: it&#8217;s not as tough as you think.<br\n/> <span\nid=\"more-25796\"></span></p><hr\n/><h2><span>Lesson 1 &#8211; </span>Setup</h2><p>In this series, we&#8217;ll be using <a\nhref=\"http://getcomposer.org\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'getcomposer.org\']);\">Composer</a>, a dependency manager, to install <a\nhref=\"http://www.phpunit.de/manual/3.6/en/automating-tests.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.phpunit.de\']);\">PHPUnit</a> (or at least, the <a\nhref=\"http://packagist.org/packages/EHER/PHPUnit\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'packagist.org\']);\">unofficial</a> version <a\nhref=\"https://github.com/sebastianbergmann/phpunit/issues/522\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">for now</a>). To ensure that we&#8217;ve installed it properly, we&#8217;ll also create a quick calculator test and class.</p><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"600\" height=\"415\" src=\"http://www.youtube.com/embed/LiyQ8bvLzIE\" frameborder=\"0\" allowfullscreen></iframe></p><div><em>Choose <strong>720p</strong> for the clearest picture.</em></div></div><h3> Show Links</h3><ul><li><a\nhref=\"http://getcomposer.org\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'getcomposer.org\']);\">Composer</a> (or our <a\nhref=\"http://net.tutsplus.com/tutorials/php/easy-package-management-with-composer/\" >Nettuts+ article</a>)<li><a\nhref=\"http://packagist.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'packagist.org\']);\">Packagist</a><li><a\nhref=\"http://www.phpunit.de/manual/current/en/index.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.phpunit.de\']);\">PHPUnit</a></ul><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(37,3,1,1358049664,NULL,' An Introduction to Views & Templating in CodeIgniter ',' Views are a key ingredient in any MVC application, and CodeIgniter applications aren’t any different. Today, we’re going to learn what a view is, and discover how they can be used to create a templating solution for your 	CodeIgniter projects.(Continue)',' Views are a key ingredient in any MVC application, and CodeIgniter applications aren’t any different. Today, we’re going to learn what a view is, and discover how they can be used to create a templating solution for your 	CodeIgniter projects.(Continue)',1,0,'an-introduction-to-views-templating-in-codeigniter',150,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2070_civiews/preview.png',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25648\'), post_id: 25648, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p> Views are a key ingredient in any MVC application, and CodeIgniter applications aren&#8217;t any different. Today, we&#8217;re going to learn what a view is, and discover how they can be used to create a templating solution for your 	CodeIgniter projects.</p><p><span\nid=\"more-25648\"></span></p><p> The first part of this tutorial will educate complete beginners to CodeIgniter on what a view is, and how to use  	them in a typical application. The second half will discuss the motivations for finding a templating solution, and guide the 	reader through the necessary steps for creating a simple, yet effective templating library. Interested? Let&#8217;s get started!</p><hr\n/><h2>What is a View?</h2><p> <a\nhref=\"http://codeigniter.com/user_guide/general/views.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'codeigniter.com\']);\" target=\"_blank\">Views</a> are special files used in 	CodeIgniter to store the markup outputted by the application, usually consisting of HTML and simple PHP tags.</p><blockquote><p> &ldquo;A view is simply a web page, or a page fragment, like a header, footer, sidebar, etc. In fact, views can flexibly be 	embedded within other views (within other views, etc., etc.) if you need this type of hierarchy.&rdquo;</p></blockquote><p> Views are loaded from within <a\nhref=\"http://codeigniter.com/user_guide/general/controllers.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'codeigniter.com\']);\" target=\"_blank\">controller</a> methods, with the 	content inside the view subsequently displayed in the browser.</p><hr\n/><h2>How to Load a view</h2><p> To load (and display) a view in CodeIgniter, we use the built in <a\nhref=\"http://codeigniter.com/user_guide/libraries/loader.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'codeigniter.com\']);\" target=\"_blank\">Loader</a> library.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$this-&gt;load-&gt;view(\'hello_world\', $data, true/false);\n</pre><p> This single line of code will tell CodeIgniter to look for <code>hello_world.php</code> in the <code>application/views</code> folder, and display the contents of the file in the browser.</p><blockquote><p> <strong>Note</strong> that CodeIgniter allows you to exclude the .php suffix, 	saving a few keystrokes when typing the view&#8217;s filename you wish to load.</p></blockquote><p> The second parameter, <code>$data</code>, is <strong>optional</strong> and takes an associative array or object. 	This array/object is used to pass data to the view file, so it can be used or referenced within the view.</p><p> The final <strong>optional</strong> parameter determines whether the view&#8217;s contents is displayed in the browser window, or 	returned as a string. This parameter defaults to false, displaying the content in the browser. We shall see later in the 	tutorial how this parameter can be used when creating a templating solution.</p><hr\n/><h2>Creating &amp; Displaying a View</h2><p> To setup our first view, create a new file called <code>hello_world.php</code> in <code>application/views</code> and write 	the following simple HTML within:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n	&lt;head&gt;\n		&lt;title&gt;Hello World!&lt;/title&gt;\n	&lt;/head&gt;\n	&lt;body&gt;\n		&lt;p&gt;\n			Hello world!\n		&lt;/p&gt;\n	&lt;/body&gt;\n&lt;/html&gt;\n</pre><p> Now to display this view in the browser it must be loaded within a Controller method, using the aforementioned method.</p><p> So let&#8217;s create a new Controller file called <code>hello_world.php</code> in <code>application/controllers</code> and place 	the following code within. From within this controller, we shall load the newly created view.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;?php if ( ! defined(\'BASEPATH\')) exit(\'No direct script access allowed\');\nclass Hello_world extends CI_Controller {\n	public function index()\n	{\n		$this-&gt;load-&gt;view(\'hello_world\');\n	}\n}\n</pre><p> Pointing your browser to <code>http://your-ci-install.com/index.php/</code> will now result in the 	HTML in <code>application/views/hello_world.php</code> being outputted in the browser. You have successfully loaded a view!</p><h3>Loading Multiple Views</h3><blockquote\nclass=\"pullquote pqRight\"><p> Splitting a view into several files makes your website easier to maintain and reduces the likely hood of	duplicate code.</p></blockquote><p> Displaying a single View is all well and good, but you might want to split the output into several, distinct files, 	such as <strong>header, content &amp; footer</strong> views.</p><p> Loading several views is achieved by merely calling the <code>$this->load->view()</code> method multiple times. 	CodeIgniter then concatenates the content of the views together before displaying in the browser.</p><p> Create a new file called <code>header.php</code> in <code>application/views</code> and cut &amp; paste the first few lines 	from our original <code>hello_world.php</code> file in.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n	&lt;head&gt;\n		&lt;title&gt;Hello World!&lt;/title&gt;\n	&lt;/head&gt;\n	&lt;body&gt;\n</pre><p> Similarly, create another file called <code>footer.php</code> in <code>application/views</code> and move the last 	two lines of <code>hello_world.php</code> in.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;/body&gt;\n&lt;/html&gt;\n</pre><p> This leaves the <code>hello_world.php</code> view file just containing our page content.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;p&gt;\n	Hello world!\n&lt;/p&gt;\n</pre><p> Now to display the page again, we have to load all three views (header.php, hello_world.php, footer.php), 	in order, within our controller.</p><p> Re-open <code>application/controllers/hello_world.php</code> and add the new <code>$this->load->view()</code> calls above and below the existing one.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;?php if ( ! defined(\'BASEPATH\')) exit(\'No direct script access allowed\');\nclass Hello_world extends CI_Controller {\n	public function index()\n	{\n		$this-&gt;load-&gt;view(\'header\');\n		$this-&gt;load-&gt;view(\'hello_world\');\n		$this-&gt;load-&gt;view(\'footer\');\n	}\n}\n</pre><p> Because the header and footer views are now separate from the <code>hello_world</code> view, it means that they can be used in conjunction 	with any other views in the website. This means the code within the header &amp; footer files don&#8217;t need to be 	copied over into any other views in the project that require this code.</p><p> Obviously this is a huge benefit as any changes to the HTML or content in the views, e.g adding a new stylesheet to the 	header, can be made to only one file, and not every file!</p><hr\n/><h2>Using Data From the Controller in the View</h2><p> Now, we&#8217;ll look at passing data from the controllers, so they can be used or outputted inside the view.</p><p> To achieve this, we shall pass an associative array, <strong><code>$data</code></strong> as the second parameter in the <code>$this->load->view()</code> call.</p><p> The <strong>values</strong> of this array will be accessible within the loaded view as variables, named 	by their respective <strong>keys</strong>.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$data = array(\n	\'title\'		=&gt;	\'Hello World!\',\n	\'content\'	=&gt;	\'This is the content\',\n	\'posts\'		=&gt;	array(\'Post 1\', \'Post 2\', \'Post 3\')\n);\n$this-&gt;load-&gt;view(\'hello_world\', $data);\n</pre><p> The above code will give the variable <strong>$title</strong> the value &#8216;Hello World!&#8217; inside the <code>hello_world</code> view.</p><h3>How to Use Variables in Views</h3><p> Once we have passed our data to the view files, the variables can be used in the usual way.</p><p> Typically, the view file will use the passed data to:</p><ul><li>Display a variable&#8217;s value</li><li>Loop through arrays or object properties</li><li>Use conditional statements to show, or hide markup</li></ul><p> I shall run through quick examples of how to do each.</p><p> To display a variable&#8217;s content use the simple and familiar, <a\nhref=\"http://php.net/manual/en/function.echo.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'php.net\']);\" target=\"_blank\">echo</a> statement:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n	&lt;h1&gt;&lt;?php echo $title; ?&gt;&lt;/h1&gt;\n</pre><p> Looping through an array, or object, is a common task in view files, and can be achieved with a <a\nhref=\"http://php.net/manual/en/control-structures.foreach.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'php.net\']);\" target=\"_blank\">foreach</a> loop:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;ul&gt;\n&lt;?php foreach($posts as $post) { ?&gt;\n	&lt;li&gt;&lt;?php echo $post; ?&gt;&lt;/li&gt;\n&lt;?php } ?&gt;\n&lt;/ul&gt;\n</pre><p> Simple conditional statements can be used in view files to slightly alter the output, depending on the data passed.</p><p> In general, you want to keep the use of conditional statements in views to a minimum, as overuse can lead to complicated 	view files, containing &ldquo;business logic&rdquo;. Splitting the view into different files, and deciding which is to be 	shown in the controller, is much more preferable.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;?php if ( $logged_in ) { ?&gt;\n	&lt;p&gt;&lt;?php echo \'Welcome \'.$user_name; ?&gt;&lt;/p&gt;\n&lt;?php } else { ?&gt;\n	&lt;p&gt;Please login&lt;/p&gt;\n&lt;?php } ?&gt;\n</pre><p> The above example will either show a &#8220;Welcome&#8221; message, or a request for the user to login, depending on the value of <code>$logged_in</code> (true/false).</p><hr\n/><h2>Templating in CodeIgniter</h2><p> We&#8217;ve seen how splitting views into separate, smaller files can help organize and reduce the number of files in your 	CodeIgniter projects, but now multiple load view calls need to be made each instance a page is displayed.</p><p> Let&#8217;s assume that you have separate header and footer views, which are used to form a template. 	Every instance in the project where you wish to load and display a page using this template, three view loads have to be 	called. Not only can this clutter your controllers, but it results in a lot of repeated code &#8211; exactly the thing we wished to rid 	ourselves of by splitting the files up.</p><p> If you want to add extra markup to this template now, for example a sidebar menu. It could go in the header view, 	but it is more suited to be in its own separate view. Adding this new view to the existing template means going through each 	instance of the view loads, and adding another in. This can get messy fast.</p><p> We need a way to be able to embed view files that display individual page content, inside a template, 	without repeating code, and one that allows for modifications to be made to the template easily, and efficiently.</p><p> The following steps will guide you through creating a simple CodeIgniter library that fulfills these needs, as well as:</p><ul><li>Enforcing a predictable and maintainable directory structure for your views</li><li>Allowing for multiple distinct templates to be used</li><li>Cutting down loading a page view to just one line of code</li></ul><p> Once the library is written and in our CodeIgniter tool belt, we shall be able to display a templated page like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$this-&gt;template-&gt;load(\'template_name\', \'body_view\');\n</pre><p> Much nicer!</p><p> Our templating solution will use view files which contain the full markup of a template, with a placeholder 	for another view file (with the page content) to be embedded within.</p><p> The placeholder will actually just be a variable named <strong><code>$body</code></strong>. When loading a templated view 	with our library, the content of the appropriate body view file will be assigned to this <code>$body</code>, embedding 	the view within the the template.</p><hr\n/><h2><span>Step 1:</span> Setting Up the Directory</h2><p> We want to enforce a sensible, and predictable directory system for our view files to be housed in, so that our views are:</p><ul><li>Easy to locate</li><li>Easy to determine which area of the application they belong to</li><li>Easy to maintain</li></ul><p> Our directory system will also allow the library to cleverly determine where to look for view files, cutting 	down on the amount of code needed to load a templated view.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p> Create a new folder inside the <code>application/views</code> directory and name it <code>templates</code>. This folder will hold 	the different template views.</p><hr\n/><h2><span>Step 2:</span> Creating the Library</h2><p> <a\nhref=\"http://codeigniter.com/user_guide/general/creating_libraries.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'codeigniter.com\']);\" target=\"_blank\">Libraries</a> in CodeIgniter are 	just PHP classes and are loaded into Controllers much like views are.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$this-&gt;load-&gt;library(\'class_name\');\n</pre><p> Custom libraries you use in your CodeIgniter projects are stored in the <code>application/libraries</code> folder. 	To start writing our templating library, create a new file in this folder called <code>Template.php</code>, and place the 	following code in:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;?php  if ( ! defined(\'BASEPATH\')) exit(\'No direct script access allowed\');\n	class Template\n	{\n		var $ci;\n		function __construct()\n		{\n			$this-&gt;ci =&amp; get_instance();\n		}\n	}\n</pre><p> The above code defines a new class, or library, named <strong>Template</strong> and the <code>__construct()</code> method within.</p><p> This method assigns the CodeIgniter super object to the <code>$ci</code> class variable , allowing all of CodeIgniter&#8217;s 	resources to be used by replacing <code>$this</code> with <code>$this->ci</code> in the usual method calls.</p><p> When the library is loaded in the 	CodeIgniter framework, the <code>__construct()</code> method is automatically called.</p><h3>Writing the Load Method</h3><p> Now we shall write the method to actually load a template view. We want to pass up to three parameters to this function:</p><ul><li>The template name</li><li>The body view name (optional)</li><li>The data to be passed to the views (optional)</li></ul><p> The result of this method being called, will be the template view being displayed in the browser, with the body view 	being embedded within, if one is supplied.</p><p> Underneath the <code>__construct()</code> method, place the following code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nfunction load($tpl_view, $body_view = null, $data = null)\n{\n	if ( ! is_null( $body_view ) )\n	{\n		if ( file_exists( APPPATH.\'views/\'.$tpl_view.\'/\'.$body_view ) )\n		{\n			$body_view_path = $tpl_view.\'/\'.$body_view;\n		}\n		else if ( file_exists( APPPATH.\'views/\'.$tpl_view.\'/\'.$body_view.\'.php\' ) )\n		{\n			$body_view_path = $tpl_view.\'/\'.$body_view.\'.php\';\n		}\n		else if ( file_exists( APPPATH.\'views/\'.$body_view ) )\n		{\n			$body_view_path = $body_view;\n		}\n		else if ( file_exists( APPPATH.\'views/\'.$body_view.\'.php\' ) )\n		{\n			$body_view_path = $body_view.\'.php\';\n		}\n		else\n		{\n			show_error(\'Unable to load the requested file: \' . $tpl_name.\'/\'.$view_name.\'.php\');\n		}\n		$body = $this-&gt;ci-&gt;load-&gt;view($body_view_path, $data, TRUE);\n		if ( is_null($data) )\n		{\n			$data = array(\'body\' =&gt; $body);\n		}\n		else if ( is_array($data) )\n		{\n			$data[\'body\'] = $body;\n		}\n		else if ( is_object($data) )\n		{\n			$data-&gt;body = $body;\n		}\n	}\n	$this-&gt;ci-&gt;load-&gt;view(\'templates/\'.$tpl_view, $data);\n}\n</pre><p> The above code begins by checking if the <code>$body_view</code> parameter was supplied to the method. This variable will 	hold the name of the view to be used as the body in the template view.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n	if ( ! is_null( $body_view ) )\n</pre><p> If the parameter is supplied, a series of <a\nhref=\"http://php.net/manual/en/function.file-exists.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'php.net\']);\" target=\"_blank\">file_exists</a> checks are made to try and locate 	the view file within our directory system.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nif ( file_exists( APPPATH.\'views/\'.$tpl_view.\'/\'.$body_view ) )\n{\n	$body_view_path = $tpl_view.\'/\'.$body_view;\n}\nelse if ( file_exists( APPPATH.\'views/\'.$tpl_view.\'/\'.$body_view.\'.php\' ) )\n{\n	$body_view_path = $tpl_view.\'/\'.$body_view.\'.php\';\n}\n</pre><p> The code first tries to locate the view file inside of a folder <strong>with the same name as the template</strong> in the <code>application/views</code> folder.</p><p> This is useful if sections of your project are drastically different from others, and use different templates. In these 	circumstances, it makes sense to group these view files together.</p><p> For example, a lot of websites display a different template for distinct sections, such as blogs. In our system, 	the blog view files can be placed inside the <code>application/views/blog</code> folder, seperating them from the main site 	views.</p><p> If the view file cannot be located in this folder, <code>.php</code> is appended to the end 	of the filename, and the check is made again. This is simply so <code>.php</code> can be excluded like the native <code>$this->load->view()</code> call.</p><p> If the file can still not be located, further checks for it&#8217;s location are made.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nelse if ( file_exists( APPPATH.\'views/\'.$body_view ) )\n{\n	$body_view_path = $body_view;\n}\nelse if ( file_exists( APPPATH.\'views/\'.$body_view.\'.php\' ) )\n{\n	$body_view_path = $body_view.\'.php\';\n}\nelse\n{\n	show_error(\'Unable to load the requested file: \' . $tpl_name.\'/\'.$view_name.\'.php\');\n}\n</pre><p> This time, the code checks if the view file is located inside the <code>application/views</code> folder, and once again, 	if it cannot be found, appends <code>.php</code> and checks once more.</p><p> If the file is located in one of these places, the path is assigned to <code>$body_view_path</code>, otherwise an error 	message is thrown using the <code>show_error()</code> function built into CodeIgniter, and the script is terminated.</p><p> If the body view file was successfully located, the contents is assigned to the <code>$body</code> variable.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n	$body = $this-&gt;ci-&gt;load-&gt;view($body_view_path, $data, TRUE);\n</pre><p> We pass the <code>$data</code> parameter (null if not supplied) to the view load call, and set the third parameter to <strong>true</strong> to return the view&#8217;s output as a string.</p><p> We now add this <code>$body</code> variable to the list of data in <code>$data</code> so that it can be embedded in the 	template view when it is loaded.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nif ( is_null($data) )\n{\n	$data = array(\'body\' =&gt; $body);\n}\nelse if ( is_array($data) )\n{\n	$data[\'body\'] = $body;\n}\nelse if ( is_object($data) )\n{\n	$data-&gt;body = $body;\n}\n</pre><p> If <code>$data</code> was not supplied to the <code>load()</code> call, <code>$data</code> is assigned to an array containing <code>$body</code> under key <strong>body</strong>. If the parameter was supplied, <code>$body</code> is added to the 	list by either assigning it to an array key, or object property, both also named <strong>body</strong>.</p><p> The <code>$body</code> variable can now be used in template view files as a <strong>placeholder for embedded views</strong>.</p><p> The last line of our method loads the template view file from the <code>application/views/templates</code> folder, and 	passes the <code>$data</code> variable in the second parameter.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n	$this-&gt;ci-&gt;load-&gt;view(\'templates/\'.$tpl_name, $data);\n</pre><p> And that&#8217;s it! The library can now be put to use.</p><hr\n/><h2>Using the Library</h2><p> To start using our library, let&#8217;s create a template view, named <code>default.php</code> in <code>application/views/templates</code>, and place the following HTML/PHP inside:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n	&lt;head&gt;\n		&lt;title&gt;&lt;?php echo $title; ?&gt;&lt;/title&gt;\n	&lt;/head&gt;\n	&lt;body&gt;\n		&lt;h1&gt;Default template&lt;/h1&gt;\n		&lt;div class=&quot;wrapper&quot;&gt;\n			&lt;?php echo $body; ?&gt;\n		&lt;/div&gt;\n	&lt;/body&gt;\n&lt;/html&gt;\n</pre><p> In this template, we reference two variables, <code>$title</code> and <code>$body</code>.</p><p> Recall that in our template files, <code>$body</code> serves as a placeholder for an embedded view.</p><p> We shall now make another view to be embedded inside this template. Create a new file named <code>content.php</code> in <code>application/views/</code> and place this simple HTML inside:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;p&gt;\n	Hello world!\n&lt;/p&gt;\n</pre><p> We are now ready to load the templated page view from within a controller.</p><p> Inside any controller method, place the 	following code to display the <code>content</code> view, within the <code>default</code> template.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$data = array(\n	\'title\' =&gt; \'Title goes here\',\n);\n$this-&gt;load-&gt;library(\'template\');\n$this-&gt;template-&gt;load(\'default\', \'content\', $data);\n</pre><p> <strong>Note:</strong> the library has to be loaded in before you can call the <code>load</code> method. 	To save yourself 	loading the library every time a template view needs to be displayed,<br\n/> <a\nhref=\"http://codeigniter.com/user_guide/general/autoloader.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'codeigniter.com\']);\" target=\"_blank\">autoload</a> the class by adding it 	to the array of libraries in <code>application/config/autoload.php</code>.</p><p> If instead of a view file, you want a string to be embedded in the template, simply assign the string to the <code>$data</code> array using the key <code>body</code>, and pass <code>null</code> as the second parameter in the 	load call.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$data = array(\n	\'title\' =&gt; \'Title goes here\',\n	\'body\'	=&gt; \'The string to be embedded here!\'\n);\n$this-&gt;template-&gt;load(\'default\', null, $data);\n</pre><hr\n/><h2>Quick Tip</h2><p> I&#8217;ve found that grouping view files in folders by the controller, and even method, they belong to, really helps keep 	my views organized &amp; easy to locate.</p><p> Organizing your views in this way results in the directory structure closely following the URL schema of <code>controller/method</code>.</p><p> For example, say your project has a controller named <code>Members</code>, containing method <code>list</code>.</p><p> An appropriate location for the <code>list</code> view file would be in <code>application/views/members</code>, or <code>application/views/members/list</code>, if this method loads multiple views.</p><p> This view could then be embedded into a template using our library with the following code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$this-&gt;template-&gt;load(\'template_name\', \'members/list\');\n</pre><hr\n/><h2>Conclusion</h2><blockquote\nclass=pullquote><p> The templating solution discussed in this tutorial is just one of a plethora of different ways to achieve templating in 	CodeIgniter.</p></blockquote><p> You should hopefully now know what views are, and how to use them effectively &#8211; and efficiently &#8211; in your CodeIgniter projects.</p><p> The templating solution discussed in this tutorial is just one of a plethora of different ways to achieve templating in 	CodeIgniter. There are a number of different approaches, and I encourage you, reader, to research the other methods and determine 	which fits best for your projects.</p><p> If you have any comments or questions about the tutorial, or any insights on different templating solutions, please leave a 	comment below!	Thanks for reading.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1);
insert  into `post`(`id`,`id_subcategory`,`id_user`,`creation_date`,`modified_date`,`title`,`meta_description`,`description`,`status`,`comment_allowed`,`slug`,`comment_count`,`featured_status`,`thumbnail`,`content`,`id_category`) values (38,3,1,1358049667,NULL,' Build Web Apps from Scratch with Laravel – The Eloquent ORM ','In this Nettuts+ mini-series, we’ll build a web application from scratch, while diving into a great new PHP framework that’s rapidly picking up steam, called Laravel.In this lesson, we’ll be working on an integral part of any web application: the Models. Along the way, we’ll learn about Laravel’s amazing ORM implementation: Eloquent.','In this Nettuts+ mini-series, we’ll build a web application from scratch, while diving into a great new PHP framework that’s rapidly picking up steam, called Laravel.In this lesson, we’ll be working on an integral part of any web application: the Models. Along the way, we’ll learn about Laravel’s amazing ORM implementation: Eloquent.',1,0,'build-web-apps-from-scratch-with-laravel-the-eloquent-orm',245,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/main_image.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"https://github.com/nikkobautista/laravel-tutorial\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25631\'), post_id: 25631, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this Nettuts+ <a\nhref=\"http://net.tutsplus.com/tutorials/php/building-web-applications-from-scratch-with-laravel/\" >mini-series</a>, we&#8217;ll build a web application from scratch, while diving into a great new PHP framework that&#8217;s rapidly picking up steam, called <a\nhref=\"http://laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\" target=\"_blank\">Laravel</a>.</p><p>In this lesson, we&#8217;ll be working on an integral part of any web application: the Models. Along the way, we&#8217;ll learn about Laravel&#8217;s amazing ORM implementation: Eloquent.</p><p><span\nid=\"more-25631\"></span></p><hr\n/><h2>Review</h2><p>Welcome back to our <strong>Web Applications from Scratch with Laravel</strong> series! In the <a\nhref=\"http://net.tutsplus.com/tutorials/php/building-web-applications-from-scratch-with-laravel/\" >first tutorial of the series</a>, we learned a lot about Laravel and its philosophy:</p><ul><li>What Laravel is</li><li>What makes Laravel different from other PHP frameworks</li><li>Where to download Laravel</li><li>How to setup Laravel</li<><li>How Laravel&#8217;s Routing system works</li><li>Some other features in Laravel&#8217;s Routing system</li><li>How to create your first Laravel Controller</li><li>Some additional features with Laravel&#8217;s Controllers</li><li>How to create your first Laravel View</li><li>How to use Laravel&#8217;s Blade Templating Engine</li></ul><p>If you haven&#8217;t read it yet, you should take a look at the <a\nhref=\"http://net.tutsplus.com/tutorials/php/building-web-applications-from-scratch-with-laravel/\"  target=\"_blank\">previous tutorial and give it a read</a> &#8211; this will make it easier to understand the philosophy behind Laravel and most of what we discuss in this tutorial.</p><p>In this second part of the Laravel series, we&#8217;ll be building a crucial part of our test web application, <strong>Instapics</strong>, which is the Model implementation. Without furhter ado, let&#8217;s get started!</p><hr\n/><h2>What are &ldquo;Models&rdquo;?</h2><p>I&#8217;ve already talked a bit about what <strong>Models</strong> are in one of my previous articles, <a\nhref=\"http://net.tutsplus.com/tutorials/php/zend-framework-from-scratch-models-and-integrating-doctrine-orm/\"  target=\"_blank\">Zend Framework from Scratch &#8211; Models and Integrating Doctrine ORM</a>, so to avoid repeating myself, I&#8217;ll write the gist of what I wrote before here. Feel free to refer to the other tutorial and read more about what Models are there.</p><p>Summary:</p><ul><li>Models are representatives of the Database, and should be where all the business logic of an application resides</li><li>Controllers communicate with Models and ask them to retrieve information they need</li><li>This information is then passed by a Controller to the View and is rendered</li><li>It&#8217;s very rare that a Model directly interacts with a View, but sometimes it may happen when necessary</li><li>Models can talk with other Models and aren&#8217;t self-contained. They have relationships that intertwine with each other</li><li>These relationships make it easier and quicker for a Controller to get information, since it doesn&#8217;t have to interact with different Models &#8211; the Models can do that themselves</li></ul><p>Models in Laravel, or in most frameworks, are developed the same way. The difference is that Laravel give us an easy way of building these models, by providing us with general-purpose methods that most models would need &#8211; the <strong>Eloquent ORM</strong>.</p><hr\n/><h2>The Eloquent ORM</h2><blockquote><p>An ORM is an object-relational mapper, and Laravel has one that you will absolutely love! It is named &#8220;Eloquent,&#8221; because it allows you to work with your database objects and relationships using an eloquent and expressive syntax.</p></blockquote><p>The Eloquent ORM is Laravel&#8217;s built-in ORM implementation. In my opinion, it&#8217;s one of the best ORM implementations I&#8217;ve seen so far &#8211; rivaling even Doctrine ORM. It&#8217;s incredibly elegant, making use of industry-standard conventions to lessen configuration.</p><h3>Conventions</h3><p>For example, using an Eloquent model assumes that the table the model is representing has an <code>id</code> field. The <code>id</code> is the primary key for any record, and is used by most of Eloquent&#8217;s methods.</p><p>Another thing that Eloquent correctly assumes is that your table name is the plural form of your model. For example, your <code>User</code> model will reference the <code>users</code> table. As this might not always be the standard for some, Laravel provides a way to override this: simply use the <code>$table</code> flag:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User extends Eloquent {\n    public static $table = \'my_users\';\n}\n</pre><p>This will instruct Laravel not to use the convention and instead use the specified table.</p><p>Lastly, Laravel can also automate the creation and updating of timestamps for us. To do so, add a <code>created_at</code> and/or <code>updated_at</code> column in the table, and set the <code>$timestamp</code> flag in the model:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User extends Eloquent {\n    public static $timestamps = true;\n}\n</pre><p>Eloquent will see the flag, and automatically set the <code>created_at</code> field on creation, and update the <code>updated_at</code> field each time that a record is updated. Pretty cool, huh?</p><h3>Quick Retrieval</h3><p>Retrieving records is a snap with Eloquent&#8217;s retrieval methods. For example, you need to find a specific user record? Just do:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$user = User::find($user_id);\n</pre><p>This returns a <code>User</code> model that you can do operations on! Need to use conditionals? Let&#8217;s imagine that you want to retrieve a user by email address. To accomplish this task, you might do something like:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$user = User::where(\'email\', \'=\', $email)-&gt;first();\n</pre><p>Alternatively, you could use Laravel&#8217;s dynamic methods:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$user = User::where_email($email)-&gt;first();\n</pre><h3>Easy Inserts &amp; Updates</h3><p>Inserting and updating models using Eloquent can be accomplished in three steps.</p><ul><li> <strong>Step 1</strong> &#8211; Get/Create the model.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        $user = new User();\n        //or get an existing user\n        $user = User::get($user_id);\n        </pre></li><li> <strong>Step 2</strong> &#8211; Set the data</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        $user-&gt;email = \'nikko@instapics.com\';\n        $user-&gt;password = \'test1234\';\n        </pre></li><li> <strong>Step 3</strong> &#8211; Save</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n        $user-&gt;save();\n        </pre></li><li><strong>Done!</strong></li></ul><h3>And finally, Defining Relationships.</h3><blockquote><p>Eloquent makes the process of defining relationships and retrieving related models simple and intuitive.</p></blockquote><p>Damn right it does! Eloquent supports three types of relationships:</p><ol><li>One-to-One</li><li>One-to-Many</li><li>Many-to-Many</li></ol><p>To define a relationship between models, you&#8217;ll need to create a method in both models that &#8220;describes&#8221; their relationships. For example, let&#8217;s say a <code>User</code> <code>has_one</code> <code>User_Profile</code>. You can do that by defining a <code>user_profile</code> method in the <code>User</code> model:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User extends Eloquent {\n    public function user_profile()\n    {\n        return $this-&gt;has_one(\'User_Profile\');\n    }\n}\n</pre><p>Because <code>User</code> is our &#8220;dominant&#8221; model here (i.e. a user has a profile, and not a profile has a user), we define that a <code>User_Profile</code> <code>belongs_to</code> a <code>User</code>:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User_Profile extends Eloquent {\n    public function user()\n    {\n        return $this-&gt;belongs_to(\'User\');\n    }\n}\n</pre><p>Once we&#8217;ve defined these relationship, we can then do:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n/*\n  Get the User_Profile object of a User\n  This executes two SQL queries:\n  SELECT * FROM `users` WHERE `id` = $user_id\n  SELECT * FROM `user_profiles` WHERE `user_id` = $user_id\n*/\n$user = User::find($user_id);\n$user_profile = $user-&gt;user_profile;\n/*\n  We can also do it the other way around\n*/\n$user_profile = User_Profile::where(\'user_id\', \'=\', $user_id)-&gt;first();\n$user = $user_profile-&gt;user;\n</pre><p>One thing worth noting here is another convention: Eloquent assumes that the foreign key used in <code>User_Profile</code> is the referenced table&#8217;s name + <code>_id</code>. Again, if you want to change this behaviour, you can override it:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User extends Eloquent {\n    public function user_profile()\n    {\n        return $this-&gt;has_one(\'User_Profile\', \'user_profile_user_id\');\n    }\n}\n</pre><p>Let&#8217;s say that we want to define the relationship between a <code>User</code> and his <code>Photo</code> uploads. This is a <strong>One-to-Many</strong> relationship, unlike the <code>User</code>-to-<code>User Profile</code> relationship which was <strong>One-to-One</strong>. We know that one <code>User</code> <code>has_many</code> <code>Photo</code> uploads, so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User extends Eloquent {\n    public function photos()\n    {\n        return $this-&gt;has_many(\'Photo\');\n    }\n}\n...\n...\n...\nclass Photo extends Eloquent {\n    public function user()\n    {\n        return $this-&gt;belongs_to(\'User\');\n    }\n}\n</pre><p>The main difference here with <code>has_one</code> is that the function we&#8217;ll use to retrieve a <code>User</code>&#8216;s photos will now return an <strong>array</strong> of <code>Photo</code> objects. So, if we wanted to fetch all of a <code>User</code>&#8216;s photos, we could do:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$photos = User::find($user_id)-&gt;photos;\nforeach($photos as $photo) {\n    ...\n    ...\n    ...\n}\n</pre><p>Nope, referring to <code>photos</code> as a property isn&#8217;t a typo. Laravel gives us this nice bit of sugar. We could also do:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$photos = User::find($user_id)-&gt;photos()-&gt;get();\n</pre><h4>Mant-to-Many Relationships</h4><p>This one is a bit tricky, but once implemented, it makes it easy to handle <strong>Many-to-Many</strong> relationships between models. Let&#8217;s imagine, for example, that you, again, have a <code>User</code> model, and each of these Users can have multiple <code>Groups</code>. A <code>Group</code> can also have multiple <code>Users</code>. We&#8217;ll use three tables to represent these particular relationships:</p><ul><li><strong>Users</strong> &#8211; table where all our users are</li><li><strong>Groups</strong> &#8211; table where all our groups are</li><li><strong>Group User</strong> &#8211; table which lists down all users in a group</li></ul><p>The table structure convention Eloquent will look for will be something like this:</p><ul><li><strong>users</strong><ul><li>id</li><li>&#8230;other columns</li></ul></li><li><strong>groups</strong><ul><li>id</li><li>&#8230;other columns</li></ul></li><li><strong>group_user</strong><ul><li>id</li><li>user_id</li><li>group_id</li><li>&#8230;other columns</li></ul></li></ul><p>One other convention to note here is that the intermediate table, <code>group_user</code>, is the singular names of the two tables that it is connecting, arranged alphabetically with an underscore. Like always, we&#8217;re free to override this.</p><p>Here&#8217;s how the code will look inside each of the models for these three tables:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User extends Eloquent {\n    public function groups()\n    {\n        //if we wanted to override the default naming convention\n        //for the intermediate table, we can do it like so:\n        //return $this-&gt;has_many_and_belongs_to(\'Group\', \'group_listings\');\n        return $this-&gt;has_many_and_belongs_to(\'Group\');\n    }\n}\n...\n...\n...\nclass Group extends Eloquent {\n    public function users()\n    {\n        //if we wanted to override the default naming convention\n        //for the intermediate table, we can do it like so:\n        //return $this-&gt;has_many_and_belongs_to(\'User\', \'group_listings\');\n        return $this-&gt;has_many_and_belongs_to(\'User\');\n    }\n}\n...\n...\n...\nclass Group_User extends Eloquent {\n    public function group()\n    {\n        return $this-&gt;has_one(\'Group\');\n    }\n    public function user()\n    {\n        return $this-&gt;has_one(\'User\');\n    }\n}\n</pre><p>With this in place, we can then take advantage of Eloquent&#8217;s relationship functions:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n//Get a user\'s groups\n$groups = User::find($user_id)-&gt;groups;\n//Get all users in a group\n$users = Group::find($group_id)-&gt;users;\n</pre><hr\n/><h2> <span>Step 1 -</span> Creating the Instapics Database</h2><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2069_laravel_2/images/instapics.png\" alt=\"Instapics\" title=\"Instapics\" /></div><p>Continuing with our web application, <strong>Instapics</strong>, let&#8217;s start off by creating the database of our application. To do so, let&#8217;s write down the desired functionalities of the application:</p><ul><li>Users can login and register for an account</li><li>Users can follow other users to see photos they have uploaded</li><li>Users can upload their own photo and apply a filter to it</li><li>Users can comment and like photos</li></ul><p>From this, we can deduce the database tables we&#8217;ll need:</p><ul><li> <strong>users</strong></p><ul><li>id (One-to-One with user_profiles.user_id, Many-to-Many with self using intermediate table relationships.follower_id and followed_id, One-to-Many with photos.user_id and photo_comments.user_id)</li><li>email</li><li>password</li><li>created_at</li><li>updated_at</li></ul></li><li> <strong>user_profiles</strong></p><ul><li>id</li><li>user_id (One-to-One with users.id)</li><li>name</li><li>profile_photo</li></ul></li><li> <strong>relationships</strong></p><ul><li>id</li><li>follower_id (One-to-One with users.id)</li><li>followed_id (One-to-One with users.id)</li><li>created_at</li><li>updated_at</li></ul></li><li> <strong>photos</strong></p><ul><li>id (One-to-Many with photo_comments.user_id)</li><li>user_id (One-to-One with users.id)</li><li>location</li><li>description</li><li>created_at</li><li>updated_at</li></ul></li><li> <strong>photo_comments</strong></p><ul><li>id</li><li>user_id (One-to-One with users.id)</li><li>photo_id (One-to-One with photos.id)</li><li>message</li><li>created_at</li><li>updated_at</li></ul></li></ul><p>Let&#8217;s go ahead and create these tables. For this project, I&#8217;ll be using <strong>MySQL</strong>; feel free to copy and paste these commands.</p><pre class=\"brush: sql; title: ; notranslate\" title=\"\">\nCREATE DATABASE `instapics`;\nUSE `instapics`;\nCREATE TABLE `instapics`.`users` (\n  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n  `email` VARCHAR(100) NOT NULL,\n  `password` VARCHAR(100) NOT NULL,\n  `created_at` DATETIME NOT NULL,\n  `updated_at` DATETIME NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE INDEX `Index_email`(`email`)\n)\nENGINE = InnoDB\nCHARACTER SET utf8 COLLATE utf8_general_ci;\nCREATE TABLE `instapics`.`user_profiles` (\n  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n  `user_id` INTEGER UNSIGNED NOT NULL,\n  `name` TEXT NOT NULL,\n  `profile_photo` TEXT NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE INDEX `Index_user_id`(`user_id`),\n  CONSTRAINT `FK_user_profiles_user_id` FOREIGN KEY `FK_user_profiles_user_id` (`user_id`)\n    REFERENCES `users` (`id`)\n    ON DELETE CASCADE\n    ON UPDATE CASCADE\n)\nENGINE = InnoDB\nCHARACTER SET utf8 COLLATE utf8_general_ci;\nCREATE TABLE `instapics`.`relationships` (\n  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n  `follower_id` INTEGER UNSIGNED NOT NULL,\n  `followed_id` INTEGER UNSIGNED NOT NULL,\n  `created_at` DATETIME NOT NULL,\n  `updated_at` DATETIME NOT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE INDEX `Index_follower_id_followed_id`(`follower_id`, `followed_id`),\n  CONSTRAINT `FK_relationships_follower_id` FOREIGN KEY `FK_relationships_follower_id` (`follower_id`)\n    REFERENCES `users` (`id`)\n    ON DELETE CASCADE\n    ON UPDATE CASCADE,\n  CONSTRAINT `FK_relationships_followed_id` FOREIGN KEY `FK_relationships_followed_id` (`followed_id`)\n    REFERENCES `users` (`id`)\n    ON DELETE CASCADE\n    ON UPDATE CASCADE\n)\nENGINE = InnoDB\nCHARACTER SET utf8 COLLATE utf8_general_ci;\nCREATE TABLE `instapics`.`photos` (\n  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n  `user_id` INTEGER UNSIGNED NOT NULL,\n  `location` TEXT NOT NULL,\n  `description` TEXT NOT NULL,\n  `created_at` DATETIME NOT NULL,\n  `updated_at` DATETIME NOT NULL,\n  PRIMARY KEY (`id`),\n  CONSTRAINT `FK_photos_user_id` FOREIGN KEY `FK_photos_user_id` (`user_id`)\n    REFERENCES `users` (`id`)\n    ON DELETE CASCADE\n    ON UPDATE CASCADE\n)\nENGINE = InnoDB\nCHARACTER SET utf8 COLLATE utf8_general_ci;\nCREATE TABLE `instapics`.`photo_comments` (\n  `id` INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,\n  `user_id` INTEGER UNSIGNED NOT NULL,\n  `photo_id` INTEGER UNSIGNED NOT NULL,\n  `message` TEXT NOT NULL,\n  `created_at` DATETIME NOT NULL,\n  `updated_at` DATETIME NOT NULL,\n  PRIMARY KEY (`id`),\n  CONSTRAINT `FK_photo_comments_user_id` FOREIGN KEY `FK_photo_comments_user_id` (`user_id`)\n    REFERENCES `users` (`id`)\n    ON DELETE CASCADE\n    ON UPDATE CASCADE,\n  CONSTRAINT `FK_photo_comments_photo_id` FOREIGN KEY `FK_photo_comments_photo_id` (`photo_id`)\n    REFERENCES `photos` (`id`)\n    ON DELETE CASCADE\n    ON UPDATE CASCADE\n)\nENGINE = InnoDB\nCHARACTER SET utf8 COLLATE utf8_general_ci;\n</pre><p>Alternatively, you could use migrations, but we&#8217;ll review those in a future lesson.</p><hr\n/><h2> <span>Step 2 &#8211; </span> Setup Laravel&#8217;s Database Configuration</h2><p>Before doing anything with Laravel models, we need to setup our Laravel installation&#8217;s database configuration. Open <strong>application/config/database.php</strong>, to find some of these settings:</p><ul><li><strong>profile</strong> &#8211; setting this to <code>true</code> will log all SQL querie times into the Laravel logs. Leave this as <code>true</code> for now.</li><li><strong>fetch</strong> &#8211; the type of returned data from PDO. Default value is <code>PDO::FETCH_CLASS</code> and should be left like so.</li><li><strong>default</strong> &#8211; this is the name of the connection settings used by the application. The name refers to the index in the <code>$connections</code> array just below</li><li> <strong>connections</strong> &#8211; an associative array of the possible connections for your application.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><ul><li><strong>driver</strong> &#8211; the database server type. This can be <code>pgsql</code>, <code>sqlite</code>, <code>mysql</code> or <code>sqlsrv</code></li><li><strong>host</strong> &#8211; the host name of your database server</li><li><strong>database</strong> &#8211; the database name</li><li><strong>username</strong> &#8211; username to use on the database server</li><li><strong>password</strong> &#8211; password to use on the database server</li><li><strong>charset</strong> &#8211; charset to use on the database server</li><li><strong>prefix</strong> &#8211; table prefix on the database, if any</li></ul></li><li><strong>redis</strong> &#8211; if you plan on using Laravel&#8217;s <code>Redis</code> library, you can set up the server information here.</li></ul><p>For the purposes of this tutorial, we&#8217;ll be using MySQL. Your <strong>database.php</strong> file should look something like this (I removed the comments, but they should be fine to keep):</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nreturn array(\n	\'profile\' =&gt; true,\n	\'fetch\' =&gt; PDO::FETCH_CLASS,\n	\'default\' =&gt; \'mysql\',\n	\'connections\' =&gt; array(\n		\'mysql\' =&gt; array(\n			\'driver\'   =&gt; \'mysql\',\n			\'host\'     =&gt; \'localhost\',\n			\'database\' =&gt; \'instapics\',\n			\'username\' =&gt; \'root\',\n			\'password\' =&gt; \'(yourpassword)\',\n			\'charset\'  =&gt; \'utf8\',\n			\'prefix\'   =&gt; \'\',\n		),\n	),\n	\'redis\' =&gt; array(\n		\'default\' =&gt; array(\n			\'host\'     =&gt; \'127.0.0.1\',\n			\'port\'     =&gt; 6379,\n			\'database\' =&gt; 0\n		),\n	)\n);\n</pre><hr\n/><h2> <span>Step 3 -</span> Creating Your First Laravel Model</h2><p>Begin by creating a Laravel model inside the <strong>application/models</strong> folder. Create <strong>user.php</strong> inside, and add the following code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User extends Eloquent {\n}\n</pre><p>Now, based on our review of what the <code>User</code>&#8216;s relationships are, we need to code the relationship methods for all of them:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User extends Eloquent {\n    //setting $timestamp to true so Eloquent\n    //will automatically set the created_at\n    //and updated_at values\n    public static $timestamps = true;\n    public function user_profile()\n    {\n        return $this-&gt;has_one(\'User_Profile\');\n    }\n    public function followers()\n    {\n        return $this-&gt;has_many_and_belongs_to(\'User\', \'relationships\', \'followed_id\', \'follower_id\');\n    }\n    public function following()\n    {\n        return $this-&gt;has_many_and_belongs_to(\'User\', \'relationships\', \'follower_id\', \'followed_id\');\n    }\n    public function photos()\n    {\n        return $this-&gt;has_many(\'Photo\');\n    }\n    public function photo_comment()\n    {\n        return $this-&gt;has_many(\'Photo_Comment\');\n    }\n}\n</pre><p>Noticeably, we make use of some advanced Many-to-Many functionality here, due to the table structure of our follower model (i.e. the <code>users</code> table references the <code>relationships</code> table which references the <code>users</code> table again). The <code>has_many_and_belongs_to</code> function has the following method signature:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n/**\n * Get the query for a many-to-many relationship.\n *\n * @param  string        $model\n * @param  string        $table\n * @param  string        $foreign\n * @param  string        $other\n * @return Relationship\n*/\npublic function has_many_and_belongs_to($model, $table = null, $foreign = null, $other = null)\n</pre><p>This actually lets us create a model that has a Many-to-Many relationship with itself (i.e. Users follow other Users). We use <code>followers</code> and <code>following</code> method names on the <code>User</code> model to enable us to get a User&#8217;s followers or get all the users that a single User is following, respectively.</p><p>Following the <code>User</code> model, create the other models. When you finish, you should have:</p><ul><li>application/models/photo.php</li><li>application/models/photo_comment.php</li><li>application/models/relationship.php</li><li>application/models/user.php</li><li>application/models/user_profile.php</li></ul><p>These files will be in the tutorial&#8217;s Git repository, so if you prefer to download them, you can find them here: <a\nhref=\"https://github.com/nikkobautista/laravel-tutorial\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\" target=\"_blank\">https://github.com/nikkobautista/laravel-tutorial</a></p><hr\n/><h2> <span>Step 4 -</span> Create the User Functions for Instapics</h2><p>Let&#8217;s begin using our models by creating some of the user functions we&#8217;ll be needing in the application. First up: user registration. From the previous tutorial, we&#8217;ve already created a <strong>Registration/Login Form</strong> on the home page. Right now, it&#8217;s not doing anything, but let&#8217;s hook it up to a <code>User</code> controller, <code>authenticate</code> action. Create <strong>application/controllers/user.php</strong> with the following code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User_Controller extends Base_Controller\n{\n    public function action_authenticate()\n    {\n    }\n}\n</pre><p>Open <strong>application/views/home/index.blade.php</strong> and look for the login form. Update the form on <strong>Line 18</strong> to submit to the <code>action_authenticate()</code> method:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;form class=&quot;well&quot; method=&quot;POST&quot; action=&quot;user/authenticate&quot;&gt;\n</pre><p>Going back to the <code>User_Controller</code>, let&#8217;s place some code in <code>action_authenticate()</code>:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User_Controller extends Base_Controller\n{\n    public function action_authenticate()\n    {\n        $email = Input::get(\'email\');\n        $password = Input::get(\'password\');\n        $new_user = Input::get(\'new_user\', \'off\');\n        if( $new_user == \'on\' ) {\n            try {\n                $user = new User();\n                $user-&gt;email = $email;\n                $user-&gt;password = Hash::make($password);\n                $user-&gt;save();\n                Auth::login($user);\n                return Redirect::to(\'dashboard/index\');\n            }  catch( Exception $e ) {\n                echo &quot;Faield to create new user!&quot;;\n            }\n        } else {\n            $credentials = array(\n                \'username\' =&gt; $email,\n                \'password\' =&gt; $password\n            );\n            if( Auth::attempt($credentials)) {\n                return Redirect::to(\'dashboard/index\');\n            } else {\n                echo &quot;Failed to login!&quot;;\n            }\n        }\n    }\n}\n</pre><p>Let&#8217;s break-down what we&#8217;ve done here so far:</p><ul><li>We use the <code>Input</code> library to get the inputs from the submitted form</li><li>If the <code>$new_user</code> flag was checked, we create a new <code>User</code>, using the <code>Hash</code> library to generate an encrypted password.</li><li>Log in the new <code>User</code> with the <code>Auth</code> library</li><li>If the <code>$new_user</code> flag was unchecked, we create a <code>$credentials</code> array, and use it with the <code>Auth</code> library.</li><li>If <code>Auth::attempt</code> is true, it means the credentials were correct and we&#8217;re logged in</li><li>Else, it means the credentials were wrong.</li><li>In both scenarios, redirect to the <code>Dashboard</code> controller, <code>index</code> action when successful, and echo a failure message if not.</li></ul><h3>The Input library</h3><p>The basic function of the <code>Input</code> library is to enable retrieval of form data. For example, in the <code>User</code> controller, we used <code>Input::get(\'email\');</code> to get the email value from the form. It&#8217;s important to note that the <code>get</code> method is used for all types of requests and not just the <strong>$_GET</strong> array.</p><p>You can read more about the Input library here: <a\nhref=\"http://laravel.com/docs/input#input\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\" target=\"_blank\">http://laravel.com/docs/input#input</a></p><h3>The Auth library</h3><p>Laravel comes with its own authentication mechanism, the <code>Auth</code> library. It can do the following features with regards to user authentication.</p><h4>Creating a hashed password</h4><p>We can make use of the <code>Hash</code> library like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$password = Hash::make($plaintext_password);\n</pre><p>This method creates a salted and hashed password for a user, using the encryption key we set in the configuration file. To check if a hash is correct, you can use:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nif( Hash::check($plaintext_password, $hashed_password) == true ) {\n    echo \'Password is correct.\';\n}\n</pre><h4>Logging in a user</h4><p>For this, we use the <code>Auth</code> library&#8217;s <code>attempt</code> method. Before that, though, we build a <code>$credentials</code> array, which is an associative array with a <code>username</code> and <code>password</code> indexes:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$credentials = array(\n    \'username\' =&gt; \'yourname@youremail.com\',\n    \'password\' =&gt; \'yourpassword\'\n);\nif( Auth::attempt($credentials) == true ) {\n    echo \'User is logged in\';\n} else {\n    echo \'Credentials failed\';\n}\n</pre><p>It&#8217;s important to keep in mind that once an attempt is &#8220;successful&#8221;, the user is automatically logged in.</p><h4>Loggin a user in/out</h4><p>Sometimes, we&#8217;ll need to login a user without using the <code>attempt</code> method (such as when logging in a user from a link inside an email, or post-registration). We can do that with the <code>Auth::login</code> method:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nAuth::login($user); //where $user is a User object\nAuth::login(42); //where 42 is the User\'s ID\n</pre><p>On the other hand, we also have an <code>Auth::logout</code> method for logging users out:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nAuth::logout();\n</pre><p>This will terminate the user&#8217;s session.</p><h4>Retrieving the logged in user&#8217;s data</h4><p>The <code>Auth::user</code> method allows us to retrieve the logged in user object, as well as any information attached to it:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$email = Auth::user()-&gt;email;\n$created_at = Auth::user()-&gt;created_at;\n</pre><h4>Configuring the <code>Auth</code> library</h4><p>The <code>Auth</code> library has to be configured before using it (though the defaults will work with most projects, like this one). The configuration variables are:</p><ul><li><strong>driver</strong> &#8211; this can be either <strong>eloquent</strong> or <strong>fluent</strong>. Developers can write their own drivers by extending the <code>Driver</code> class in <strong>laravel/auth/drivers</strong>.</li><li><strong>username</strong> &#8211; this is the column name of whatever represents your user&#8217;s &#8220;username&#8221; in the database table.</li><li><strong>model</strong> &#8211; when using Eloquent, this is the model class that the <code>Auth</code> library uses</li><li><strong>table</strong> &#8211; when using the Fluent authentication driver, this determines the database table for the users in the application</li></ul><p>Our project, Instapics, uses the default values in the <strong>auth.php</strong> configuration file, so we don&#8217;t need to change anything in it.</p><p>Going back to the project, try testing out the login/registration features of Instapics! Pretty nifty, huh? You&#8217;ll notice though that we don&#8217;t have anything in the <code>Dashboard</code> controller yet, so let&#8217;s work on that next.</p><hr\n/><h2> <span>Step 5 -</span> Create the Instapics Dashboard</h2><p>The first thing we need to do is create the <code>Dashboard</code> controller, with the <code>index</code> action. Create the file <strong>application/controllers/dashboard.php</strong> and put in the following code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Dashboard_Controller extends Base_Controller\n{\n    public function action_index()\n    {\n        $photos = Auth::user()-&gt;photos()-&gt;order_by(\'created_at\', \'desc\')-&gt;order_by(\'id\', \'desc\')-&gt;get();\n        return View::make(\'dashboard.index\', array(\'photos\' =&gt; $photos));\n    }\n}\n</pre><p>Now we need to create the Dashboard&#8217;s index page. Create <strong>application/views/dashboard/index.blade.php</strong> and append the following:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n@layout(\'layouts/main\')\n@section(\'navigation\')\n@parent\n&lt;li&gt;&lt;a href=&quot;user/logout&quot;&gt;Logout&lt;/a&gt;&lt;/li&gt;\n@endsection\n@section(\'content\')\n&lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;span3&quot;&gt;\n        &lt;div class=&quot;well sidebar-nav&quot;&gt;\n            &lt;ul class=&quot;nav nav-list&quot;&gt;\n                &lt;li class=&quot;nav-header&quot;&gt;Followers&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;div style=&quot;margin-left: 10px&quot;&gt;\n                @forelse (Auth::user()-&gt;followers as $follower)\n                    &lt;div style=&quot;float: left; width: 30px; margin: 0px 3px 3px 5px;&quot;&gt;\n                        &lt;img src=&quot;http://d2o0t5hpnwv4c1.cloudfront.net/2069_laravel_2/http://gravatar.com/avatar/{{ md5(strtolower(trim($follower-&gt;email))) }}?s=25&amp;d=retro&quot; alt=&quot;Follower&quot; title=&quot;{{ $follower-&gt;email }}&quot; /&gt;\n                    &lt;/div&gt;\n                @empty\n                    &lt;div&gt;You have no followers.&lt;/div&gt;\n                @endforelse\n                &lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;ul class=&quot;nav nav-list&quot;&gt;\n                &lt;li class=&quot;nav-header&quot;&gt;Following&lt;/li&gt;\n            &lt;/ul&gt;\n            &lt;div style=&quot;margin-left: 10px&quot;&gt;\n                @forelse (Auth::user()-&gt;following as $following)\n                    &lt;div style=&quot;float: left; width: 30px; margin: 0px 3px 3px 5px;&quot;&gt;\n                        &lt;img src=&quot;http://d2o0t5hpnwv4c1.cloudfront.net/2069_laravel_2/http://gravatar.com/avatar/{{ md5(strtolower(trim($following-&gt;email))) }}?s=25&amp;d=retro&quot; alt=&quot;Following&quot; title=&quot;{{ $following-&gt;email }}&quot; /&gt;\n                    &lt;/div&gt;\n                @empty\n                    &lt;div&gt;You are not following anybody.&lt;/div&gt;\n                @endforelse\n                &lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;span9&quot;&gt;\n        &lt;h1&gt;Your Photos&lt;/h1&gt;\n        @forelse ($photos as $photo)\n        &lt;div class=&quot;well&quot; style=&quot;text-align: center&quot;&gt;\n            &lt;img src=&quot;http://d2o0t5hpnwv4c1.cloudfront.net/2069_laravel_2/{{ $photo-&gt;location }}&quot; alt=&quot;{{ $photo-&gt;description }}&quot; title=&quot;{{ $photo-&gt;description }}&quot; /&gt;\n            &lt;p&gt;{{ $photo-&gt;description }}&lt;/p&gt;\n        &lt;/div&gt;\n        @empty\n        &lt;div class=&quot;alert alert-info&quot;&gt;\n            &lt;h4 class=&quot;alert-heading&quot;&gt;Awww!&lt;/h4&gt;\n            &lt;p&gt;Seems like you don\'t have any photos yet. &lt;a href=&quot;#&quot;&gt;Upload a new one?&lt;/a&gt;&lt;/p&gt;\n        &lt;/div&gt;\n        @endforelse\n    &lt;/div&gt;\n&lt;/div&gt;\n@endsection\n</pre><p>Refresh the dashboard page, you should see this:</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2069_laravel_2/images/instapics_dashboard.png\" alt=\"Instapics Dashboard\" title=\"Instapics Dashboard\" /></div><p>Looking a bit bare? Add this to the <code>Dashboard</code> controller, and run it by accessing <code>dashboard/insert_test_data</code> on your browser:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function action_insert_test_data()\n{\n    $logged_in_user = Auth::user();\n    for( $x = 0; $x &lt; 10; $x++ ) {\n        $email = rand().\'@gmail.com\';\n        $user = new User();\n        $user-&gt;email = $email;\n        $user-&gt;password = Hash::make($email);\n        $user-&gt;save();\n        $logged_in_user-&gt;followers()-&gt;attach($user-&gt;id);\n        if( $x &gt; 5 ) {\n            $logged_in_user-&gt;following()-&gt;attach($user-&gt;id);\n        }\n    }\n    $photos = array(\n        array(\n            \'user_id\' =&gt; $logged_in_user-&gt;id,\n            \'location\' =&gt; \'http://farm6.staticflickr.com/5044/5319042359_68fb1f91b4.jpg\',\n            \'description\' =&gt; \'Dusty Memories, The Girl in the Black Beret (http://www.flickr.com/photos/cloudy-day/)\'\n        ),\n        array(\n            \'user_id\' =&gt; $logged_in_user-&gt;id,\n            \'location\' =&gt; \'http://farm3.staticflickr.com/2354/2180198946_a7889e3d5c.jpg\',\n            \'description\' =&gt; \'Rascals, Tannenberg (http://www.flickr.com/photos/tannenberg/)\'\n        ),\n        array(\n            \'user_id\' =&gt; $logged_in_user-&gt;id,\n            \'location\' =&gt; \'http://farm7.staticflickr.com/6139/5922361568_85628771cd.jpg\',\n            \'description\' =&gt; \'Sunset, Funset, Nikko Bautista (http://www.flickr.com/photos/nikkobautista/)\'\n        )\n    );\n    $logged_in_user-&gt;photos()-&gt;save($photos);\n}\n</pre><p>When you refresh the page, you&#8217;ll see what it looks like with the sample data inserted:</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2069_laravel_2/images/instapics_dashboard_with_data.png\" alt=\"Instapics Dashboard w/ Sample Data\" title=\"Instapics Dashboard w/ Sample Data\" /></div><hr\n/><h2>Conclusion</h2><p>In the second part of our <strong>Laravel</strong> series, we learned:</p><ul><li>Some background on what &#8220;Models&#8221; are</li><li>What the Eloquent ORM is</li><li>How to set up Laravel&#8217;s database configuration</li><li>How to create your first Laravel Model</li><li>The basic functions of the Auth and Input libraries</li><li>Making use of the Eloquent ORM in a view</li></ul><p>Eloquent really is an awesome ORM implementation &#8211; it&#8217;s fast and has tons of features that make database interactions in any application as simple as possible.</p><p>Next in our <strong>Web Applications from Scratch with Laravel</strong> series, we&#8217;ll learn more about using Laravel&#8217;s filters, Laravel&#8217;s <strong>Validation</strong> library, and how to work with files in Laravel!</p><p>What do you think about Laravel&#8217;s Eloquent ORM? Is it something that you find useful? Let me know in the comments! And, if you&#8217;re a <a\nhref=\"http://tutsplus.com/\"  target=\"_blank\">Tuts+ Premium member</a>, stay tuned for our upcoming Laravel Essentials course!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(39,3,1,1358049668,NULL,' Understanding Hash Functions and Keeping Passwords Safe ','From time to time, servers and databases are stolen or compromised. With this in mind, it is important to ensure that some crucial user data, such as passwords, can not be recovered. Today, we are going to learn the basics behind hashing and what it takes to protect passwords in your web applications.(Continue)','From time to time, servers and databases are stolen or compromised. With this in mind, it is important to ensure that some crucial user data, such as passwords, can not be recovered. Today, we are going to learn the basics behind hashing and what it takes to protect passwords in your web applications.(Continue)',1,0,'understanding-hash-functions-and-keeping-passwords-safe',253,0,'http://d2o0t5hpnwv4c1.cloudfront.net/895_hashing/preview.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-17577\'), post_id: 17577, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>From time to time, servers and databases are stolen or compromised. With this in mind, it is important to ensure that some crucial user data, such as passwords, can not be recovered. Today, we are going to learn the basics behind hashing and what it takes to protect passwords in your web applications.</p><p><span\nid=\"more-17577\"></span></p><div\nclass=\"republished-shortcode\"><strong>Republished Tutorial</strong><p>Every few weeks, we revisit some of our reader\'s favorite posts from throughout the history of the site. This tutorial was first published in January of 2011.</p></div><hr\n/><h2> <span>1.</span> Disclaimer</h2><p>Cryptology is a sufficiently complicated subject, and I am by no means an expert. There is constant research happening in this area, in many universities and security agencies.</p><p>In this article, I will try to keep things as simple as possible, while presenting to you a reasonably secure method of storing passwords in a web application.</p><hr\n/><h2> <span>2. </span>What Does &#8220;Hashing&#8221; Do?</h2><blockquote><p>Hashing converts a piece of data (either small or large), into a relatively short piece of data such as a string or an integer.</p></blockquote><p> This is accomplished by using a one-way hash function. &#8220;One-way&#8221; means that it is very difficult (or practically impossible) to reverse it.</p><p>A common example of a hash function is <a\nhref=\"http://php.net/manual/en/function.md5.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'php.net\']);\">md5()</a>, which is quite popular in many different languages and systems.</p><pre name=\"code\" class=\"php\">\n$data = \"Hello World\";\n$hash = md5($data);\necho $hash; // b10a8db164e0754105b7a99be72e3fe5\n</pre><p>With <code>md5()</code>, the result will always be a 32 character long string. But, it contains only hexadecimal characters; technically it can also be represented as a 128-bit (16 byte) integer. You may <code>md5()</code> much longer strings and data, and you will still end up with a hash of this length. This fact alone might give you a hint as to why this is considered a &#8220;one-way&#8221; function.</p><hr\n/><h2> <span>3.</span> Using a Hash Function for Storing Passwords</h2><p>The usual process during a user registration:</p><ul><li>User fills out registration form, including the password field.</li><li>The web script stores all of the information into a database.</li><li>However, the password is run through a hash function, before being stored.</li><li>The original version of the password has not been stored anywhere, so it is technically discarded.</li></ul><p>And the login process:</p><ul><li>User enters username (or e-mail) and password.</li><li>The script runs the password through the same hashing function.</li><li>The script finds the user record from the database, and reads the stored hashed password.</li><li>Both of these values are compared, and the access is granted if they match.</li></ul><p>Once we decide on a decent method for hashing the password, we are going to implement this process later in this article.</p><p>Note that the original password has never been stored anywhere. If the database is stolen, the user logins can not be compromised, right? Well, the answer is &#8220;it depends.&#8221; Let&#8217;s look at some potential problems.</p><hr\n/><h2> <span>4.</span> Problem #1: Hash Collision</h2><p>A hash &#8220;collision&#8221; occurs when two different data inputs generate the same resulting hash. The likelihood of this happening depends on which function you use.</p><h3>How can this be exploited?</h3><p>As an example, I have seen some older scripts which used <a\nhref=\"http://php.net/manual/en/function.crc32.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'php.net\']);\">crc32()</a> to hash passwords. This function generates a 32-bit integer as the result. This means there are only 2^32 (i.e. 4,294,967,296) possible outcomes.</p><p>Let&#8217;s hash a password:</p><pre name=\"code\" class=\"php\">\necho crc32(\'supersecretpassword\');\n// outputs: 323322056\n</pre><p>Now, let&#8217;s assume the role of a person who has stolen a database, and has the hash value. We may not be able to convert 323322056 into &#8216;supersecretpassword&#8217;, however, we can figure out another password that will convert to the same hash value, with a simple script:</p><pre name=\"code\" class=\"php\">\nset_time_limit(0);\n$i = 0;\nwhile (true) {\n	if (crc32(base64_encode($i)) == 323322056) {\n		echo base64_encode($i);\n		exit;\n	}\n	$i++;\n}\n</pre><p>This may run for a while, though, eventually, it should return a string. We can use this returned string &#8212; instead of &#8216;supersecretpassword&#8217; &#8212; and it will allow us to successfully login into that person&#8217;s account.</p><p>For example, after running this exact script for a few moments on my computer, I was given &#8216;<code>MTIxMjY5MTAwNg==</code>&#8216;. Let&#8217;s test it out:</p><pre name=\"code\" class=\"php\">\necho crc32(\'supersecretpassword\');\n// outputs: 323322056\necho crc32(\'MTIxMjY5MTAwNg==\');\n// outputs: 323322056\n</pre><h3>How can this be prevented?</h3><p>Nowadays, a powerful home PC can be used to run a hash function almost a billion times per second. So we need a hash function that has a <em>very</em> big range.</p><p>For example, <code>md5()</code> might be suitable, as it generates 128-bit hashes. This translates into 340,282,366,920,938,463,463,374,607,431,768,211,456 possible outcomes. It is impossible to run through so many iterations to find collisions. However some people have still found ways to do this (see <a\nhref=\"http://www.mscs.dal.ca/~selinger/md5collision/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.mscs.dal.ca\']);\">here</a>).</p><h3> Sha1</h3><p><a\nhref=\"http://us3.php.net/manual/en/function.sha1.php\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'us3.php.net\']);\">Sha1()</a> is a better alternative, and it generates an even longer 160-bit hash value.</p><hr\n/><h2> <span>5.</span> Problem #2: Rainbow Tables</h2><p>Even if we fix the collision issue, we&#8217;re still not safe yet.</p><blockquote><p>A rainbow table is built by calculating the hash values of commonly used words and their combinations.</p></blockquote><p> These tables can have as many as millions or even billions of rows.</p><p>For example, you can go through a dictionary, and generate hash values for every word. You can also start combining words together, and generate hashes for those too. That is not all; you can even start adding digits before/after/between words, and store them in the table as well.</p><p>Considering how cheap storage is nowadays, gigantic Rainbow Tables can be produced and used.</p><h3>How can this be exploited?</h3><p>Let&#8217;s imagine that a large database is stolen, along with 10 million password hashes. It is fairly easy to search the rainbow table for each of them. Not all of them will be found, certainly, but, nonetheless&#8230;some of them will!</p><h3>How can this be prevented?</h3><p>We can try adding a &#8220;salt&#8221;. Here is an example:</p><pre name=\"code\" class=\"php\">\n$password = \"easypassword\";\n// this may be found in a rainbow table\n// because the password contains 2 common words\necho sha1($password); // 6c94d3b42518febd4ad747801d50a8972022f956\n// use bunch of random characters, and it can be longer than this\n$salt = \"f#@V)Hu^%Hgfds\";\n// this will NOT be found in any pre-built rainbow table\necho sha1($salt . $password); // cd56a16759623378628c0d9336af69b74d9d71a5\n</pre><p>What we basically do is concatenate the &#8220;salt&#8221; string with the passwords before hashing them. The resulting string obviously will not be on any pre-built rainbow table. But, we&#8217;re still not safe just yet!</p><hr\n/><h2> <span>6.</span> Problem #3: Rainbow Tables (again)</h2><p>Remember that a Rainbow Table may be created from scratch, after the database has been stolen.</p><h3>How can this be exploited?</h3><p>Even if a salt was used, this may have been stolen along with the database. All they have to do is generate a new Rainbow Table from scratch, but this time they concatenate the salt to every word that they are putting in the table.</p><p>For example, in a generic Rainbow Table, &#8220;<code>easypassword</code>&#8221; may exist. But in this new Rainbow Table, they have &#8220;<code>f#@V)Hu^%Hgfdseasypassword</code>&#8221; as well. When they run all of the 10 million stolen salted hashes against this table, they will again be able to find some matches.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><h3>How can this be prevented?</h3><p>We can use a &#8220;unique salt&#8221; instead, which changes for each user.</p><p>A candidate for this kind of salt is the user&#8217;s id value from the database:</p><pre name=\"code\" class=\"php\">\n$hash = sha1($user_id . $password);\n</pre><p>This is assuming that a user&#8217;s id number never changes, which is typically the case.</p><p>We may also generate a random string for each user and use that as the unique salt. But we would need to ensure that we store that in the user record somewhere.</p><pre name=\"code\" class=\"php\">\n// generates a 22 character long random string\nfunction unique_salt() {\n	return substr(sha1(mt_rand()),0,22);\n}\n$unique_salt = unique_salt();\n$hash = sha1($unique_salt . $password);\n// and save the $unique_salt with the user record\n// ...\n</pre><p>This method protects us against Rainbow Tables, because now every single password has been salted with a different value. The attacker would have to generate 10 million separate Rainbow Tables, which would be completely impractical.</p><hr\n/><h2> <span>7.</span> Problem #4: Hash Speed</h2><p>Most hashing functions have been designed with speed in mind, because they are often used to calculate checksum values for large data sets and files, to check for data integrity.</p><h3>How can this be exploited?</h3><p>As I mentioned before, a modern PC with powerful GPU&#8217;s (yes, video cards) can be programmed to calculate roughly a billion hashes per second. This way, they can use a brute force attack to try every single possible password.</p><p>You may think that requiring a minimum 8 character long password might keep it safe from a brute force attack, but let&#8217;s determine if that is, indeed, the case:</p><ul><li>If the password can contain lowercase, uppercase letters and number, that is 62 (26+26+10) possible characters.</li><li>An 8 character long string has 62^8 possible versions. That is a little over 218 trillion.</li><li>At a rate of 1 billion hashes per second, that can be solved in about 60 hours.</li></ul><p>And for 6 character long passwords, which is also quite common, it would take under 1 minute.</p><p>Feel free to require 9 or 10 character long passwords, however you might start annoying some of your users.</p><h3>How can this be prevented?</h3><p>Use a slower hash function.</p><blockquote><p>Imagine that you use a hash function that can only run 1 million times per second on the same hardware, instead of 1 billion times per second. It would then take the attacker 1000 times longer to brute force a hash. 60 hours would turn into nearly 7 years!</p></blockquote><p>One way to do that would be to implement it yourself:</p><pre name=\"code\" class=\"php\">\nfunction myhash($password, $unique_salt) {\n	$salt = \"f#@V)Hu^%Hgfds\";\n	$hash = sha1($unique_salt . $password);\n	// make it take 1000 times longer\n	for ($i = 0; $i < 1000; $i++) {\n		$hash = sha1($hash);\n	}\n	return $hash;\n}\n</pre><p>Or you may use an algorithm that supports a \"cost parameter,\" such as BLOWFISH. In PHP, this can be done using the <code>crypt()</code> function.</p><pre name=\"code\" class=\"php\">\nfunction myhash($password, $unique_salt) {\n	// the salt for blowfish should be 22 characters long\n	return crypt($password, \'$2a$10$\'.$unique_salt);\n}\n</pre><p>The second parameter to the <code>crypt()</code> function contains some values separated by the dollar sign ($).</p><p>The first value is \'$2a\', which indicates that we will be using the BLOWFISH algorithm.</p><p>The second value, \'$10\' in this case, is the \"cost parameter\". This is the base-2 logarithm of how many iterations it will run (10 => 2^10 = 1024 iterations.) This number can range between 04 and 31.</p><p>Let\'s run an example:</p><pre name=\"code\" class=\"php\">\nfunction myhash($password, $unique_salt) {\n	return crypt($password, \'$2a$10$\'.$unique_salt);\n}\nfunction unique_salt() {\n	return substr(sha1(mt_rand()),0,22);\n}\n$password = \"verysecret\";\necho myhash($password, unique_salt());\n// result: $2a$10$dfda807d832b094184faeu1elwhtR2Xhtuvs3R9J1nfRGBCudCCzC\n</pre><p>The resulting hash contains the algorithm ($2a), the cost parameter ($10), and the 22 character salt that was used. The rest of it is the calculated hash. Let\'s run a test:</p><pre name=\"code\" class=\"php\">\n// assume this was pulled from the database\n$hash = \'$2a$10$dfda807d832b094184faeu1elwhtR2Xhtuvs3R9J1nfRGBCudCCzC\';\n// assume this is the password the user entered to log back in\n$password = \"verysecret\";\nif (check_password($hash, $password)) {\n	echo \"Access Granted!\";\n} else {\n	echo \"Access Denied!\";\n}\nfunction check_password($hash, $password) {\n	// first 29 characters include algorithm, cost and salt\n	// let\'s call it $full_salt\n	$full_salt = substr($hash, 0, 29);\n	// run the hash function on $password\n	$new_hash = crypt($password, $full_salt);\n	// returns true or false\n	return ($hash == $new_hash);\n}\n</pre><p>When we run this, we see \"Access Granted!\"</p><hr\n/><h2> <span>8.</span> Putting it Together</h2><p>With all of the above in mind, let\'s write a utility class based on what we learned so far:</p><pre name=\"code\" class=\"php\">\nclass PassHash {\n	// blowfish\n	private static $algo = \'$2a\';\n	// cost parameter\n	private static $cost = \'$10\';\n	// mainly for internal use\n	public static function unique_salt() {\n		return substr(sha1(mt_rand()),0,22);\n	}\n	// this will be used to generate a hash\n	public static function hash($password) {\n		return crypt($password,\n					self::$algo .\n					self::$cost .\n					\'$\' . self::unique_salt());\n	}\n	// this will be used to compare a password against a hash\n	public static function check_password($hash, $password) {\n		$full_salt = substr($hash, 0, 29);\n		$new_hash = crypt($password, $full_salt);\n		return ($hash == $new_hash);\n	}\n}\n</pre><p>Here is the usage during user registration:</p><pre name=\"code\" class=\"php\">\n// include the class\nrequire (\"PassHash.php\");\n// read all form input from $_POST\n// ...\n// do your regular form validation stuff\n// ...\n// hash the password\n$pass_hash = PassHash::hash($_POST[\'password\']);\n// store all user info in the DB, excluding $_POST[\'password\']\n// store $pass_hash instead\n// ...\n</pre><p>And here is the usage during a user login process:</p><pre name=\"code\" class=\"php\">\n// include the class\nrequire (\"PassHash.php\");\n// read all form input from $_POST\n// ...\n// fetch the user record based on $_POST[\'username\']  or similar\n// ...\n// check the password the user tried to login with\nif (PassHash::check_password($user[\'pass_hash\'], $_POST[\'password\']) {\n	// grant access\n	// ...\n} else {\n	// deny access\n	// ...\n}\n</pre><hr\n/><h2> <span>9.</span> A Note on Blowfish Availability</h2><p>The Blowfish algorithm may not be implemented in all systems, even though it is quite popular by now. You may check your system with this code:</p><pre name=\"code\" class=\"php\">\nif (CRYPT_BLOWFISH == 1) {\n	echo \"Yes\";\n} else {\n	echo \"No\";\n}\n</pre><p>However, as of PHP 5.3, you do not need to worry; PHP ships with this implementation built in.</p><hr\n/><h2> Conclusion</h2><p>This method of hashing passwords should be solid enough for most web applications. That said, don\'t forget: you can also require that your members use stronger passwords, by enforcing minimum lengths, mixed characters, digits &#038; special characters.</p><p>A question to you, reader: how do you hash your passwords? Can you recommend any improvements over this implementation?</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(40,3,1,1358049668,NULL,' Easy Package Management With Composer ','Let’s face it: PHP has had a rocky history with package management, and as a result, it is pretty rare to find a developer who actively uses systems like PEAR. Instead, most developers have chosen their favorite framework, which has code specifically written for it to handle various things, like DB interaction, ORM\'s, OAuth, Amazon S3 integration, etc.The downside here, though, is that switching frameworks (or returning to not using a framework at all) can be a nightmare, as it involves relearning everything to use brand new tools – and that is no easy task. Well, Composer can fix that!','Let’s face it: PHP has had a rocky history with package management, and as a result, it is pretty rare to find a developer who actively uses systems like PEAR. Instead, most developers have chosen their favorite framework, which has code specifically written for it to handle various things, like DB interaction, ORM\'s, OAuth, Amazon S3 integration, etc.The downside here, though, is that switching frameworks (or returning to not using a framework at all) can be a nightmare, as it involves relearning everything to use brand new tools – and that is no easy task. Well, Composer can fix that!',1,0,'easy-package-management-with-composer',101,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2066_composer/php-composer.jpg','',1),(41,3,1,1358049678,NULL,' Building Web Applications from Scratch with Laravel ','In this Nettuts+ mini-series, we’ll build a web application from scratch, while diving into a great new PHP framework that’s rapidly picking up steam, called Laravel — a simple and elegant PHP 5.3 framework.First up, we’ll learn more about Laravel, and why it’s such a great choice for your next PHP-based web application.','In this Nettuts+ mini-series, we’ll build a web application from scratch, while diving into a great new PHP framework that’s rapidly picking up steam, called Laravel — a simple and elegant PHP 5.3 framework.First up, we’ll learn more about Laravel, and why it’s such a great choice for your next PHP-based web application.',1,0,'building-web-applications-from-scratch-with-laravel',371,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/main_image.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\"> <a\nhref=\"https://github.com/nikkobautista/laravel-tutorial\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div><div\nclass=\"big_btn\"> <a\nhref=\"https://github.com/nikkobautista/laravel-tutorial\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25517\'), post_id: 25517, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this Nettuts+ mini-series, we&#8217;ll build a web application from scratch, while diving into a great new PHP framework that&#8217;s rapidly picking up steam, called <a\nhref=\"http://laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\">Laravel</a> &mdash; a simple and elegant PHP 5.3 framework.</p><p>First up, we&#8217;ll learn more about Laravel, and why it&#8217;s such a great choice for your next PHP-based web application.</p><p><span\nid=\"more-25517\"></span></p><hr\n/><h2> <span>Introduction:</span> What is Laravel</h2><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/website.jpg\" alt=\"Laravel Website\"></div><blockquote><p>Laravel is a clean and classy framework for PHP web development. Freeing you from spaghetti code, it helps you create wonderful applications, using simple, expressive syntax. Development should be a creative experience that you enjoy, not something that is painful. Enjoy the fresh air!</p></blockquote><p>Laravel is a PHP 5.3 framework that describes itself as a &ldquo;A Framework For Web Artisans&rdquo;. According to its author, Taylor Otwell, Laravel strives to bring back the joy to programming by making Laravel simple, elegant, and, most importantly, well-documented.</p><p>From my experience with the framework, I would definitely agree that Laravel hits these three points dead-on:</p><ul><li><strong>Simple</strong> &#8211; Laravel&#8217;s functionalities are easy to understand and implement. If you enjoy how simple and easy CodeIgniter is, then you&#8217;ll love Laravel</li><li><strong>Elegant</strong> &#8211; most of Laravel&#8217;s functions work seamlessly with very little configuration, relying on industry-standard conventions to lessen code-bloat</li><li><strong>Well-documented</strong> &#8211; Laravel&#8217;s documentation is complete and <strong>always</strong> up-to-date. The framework creator makes it a point to update the documentation before releasing a new version, ensuring that people who are learning the framework always have the latest documentation.</p></ul><hr\n/><h2>What Makes Laravel Different?</h2><p>As with any PHP framework, Laravel boasts a multitude of functions that differentiates it from the rest of the pack. Here are some, which I feel are the most important (Based on <a\nhref=\"http://laravel.com/docs\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\" target=\"_blank\">http://laravel.com/docs</a>).</p><h3>Bundles</h3><blockquote\nclass=\"pullquote pqRight\"><p> Bundles are to Laravel as PEAR is to PHP.</p></blockquote><p>Bundles are to Laravel as PEAR is to PHP; they are add-on packages that you can download and plug into your Laravel installation. At the moment, there are quite a few bundles in the <a\nhref=\"http://bundles.laravel.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bundles.laravel.com\']);\" target=\"_blank\">Laravel Bundle Repository</a>, with more being added all the time. Laravel comes with a command-line tool called <strong>Artisan</strong>, which makes it incredibly easy to install bundles.</p><div\nclass=\"tutorial_image\" style=\"clear:both;\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/boblogo.png\" alt=\"Bob the Builder\" title=\"Bob the Builder\" /></div><p>One of my favorite Laravel Bundles, called <a\nhref=\"http://bundles.laravel.com/bundle/bob\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bundles.laravel.com\']);\" target=\"_blank\">Bob the Builder</a> adds a useful scaffolding tool to Laravel, and lets you generate different kinds of files and classes suited for Laravel, such as controllers, models, migrations and tests. This functionality is quite similar to what you might expect from Rails generators. To install Bob, simply use the <strong>Artisan</strong> command-line utility, like so:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">php artisan bundle:install bob</pre><h3>Eloquent ORM</h3><blockquote><p>The Eloquent ORM is the most advanced PHP ActiveRecord implementation available.</p></blockquote><p>The Eloquent ORM is, by far, one of the best ORM implementations I&#8217;ve used. Similar to how <a\nhref=\"http://doctrine-project.org\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'doctrine-project.org\']);\" target=\"_blank\">Doctrine ORM</a> functions, it makes any work on database records simple and easy. It abstracts most functions that you&#8217;ll have on models (i.e. CRUD operations) and provides a flexible way to add more. Additionally, the Eloquent ORM gives you the ability to define model relationships to retrieve records, based on their relationship to another record. For example, you can retrieve all related <strong>file</strong> records associated with a <strong>user</strong> by doing:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nforeach( $user-&gt;Files as $file ) {\n    echo $file-&gt;name;\n}\n</pre><h3>Migrations</h3><p>Database migrations are a great utility in any project&#8217;s arsenal &#8211; especially for projects where multiple developers are involved &#8211; by making it easy to keep your database schema up-to-date with other team member&#8217;s changes. In Laravel, migrations are built into the framework; they can be executed, via the <strong>Artisan</strong> command-line utility. Laravel&#8217;s own <a\nhref=\"http://laravel.com/docs/database/schema\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\" target=\"_blank\">Schema Builder</a> functions are simple enough that anybody should be able to quickly write up a database schema change.</p><p>Here&#8217;s an example, taken from the Laravel documentation:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nSchema::table(\'users\', function($table)\n{\n    $table-&gt;create();\n    $table-&gt;increments(\'id\');\n    $table-&gt;string(\'username\');\n    $table-&gt;string(\'email\');\n    $table-&gt;string(\'phone\')-&gt;nullable();\n    $table-&gt;text(\'about\');\n    $table-&gt;timestamps();\n});\n</pre><h3>Unit-Testing</h3><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/saneprogrammer.jpg\" title=\"Sane Programmer from the TDD tutorial\" alt=\"Sane Programmer from the TDD tutorial\" width=\"350\" /><br\n/> <br\n/> <small>Remember this guy? Sane programmer FTW</small><br\n/> <small><a\nhref=\"http://www.youthedesigner.com/2009/09/29/18-ways-to-create-a-relaxing-home-office-experience\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.youthedesigner.com\']);\" target=\"_blank\">Image courtesy of http://www.youthedesigner.com</a></small></div><p>As a believer in Test-Driven Development (Read for more info: <a\nhref=\"http://net.tutsplus.com/tutorials/php/the-newbies-guide-to-test-driven-development/\"  target=\"_blank\">The Newbie&#8217;s Guide to Test-Driven Development</a>), I love it when a framework has some sort of unit-testing utility baked in. Laravel&#8217;s own beautifully integrates with PHPUnit, relying on its status as one of the industry&#8217;s best PHP unit testing frameworks. To build a test, simply extend the <code>PHPUnit_Framework_TestCase</code> class, like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass MyUnitTest extends PHPUnit_Framework_TestCase\n{\n    public function somethingShouldBeTrue()\n    {\n        $this-&gt;assertTrue(true);\n    }\n}\n</pre><p>To run your Laravel application&#8217;s tests, let&#8217;s, again, use the <strong>Artisan</strong> command-line utility:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">php artisan test</pre><p>That command will run all tests, which are found within the <strong>application/tests</strong> directory of your Laravel application.</p><h3>Redis</h3><p>Redis is a key-value database, similar to CouchDB and MongoDB. It&#8217;s used by many web applications to store non-relational data, as opposed to conventional databases (like MySQL), which store records that usually relate to one another. Redis support in Laravel is executed so elegantly to the point that I can&#8217;t even begin to describe how easy it is to get up and running.</p><p> Once you have your Redis server set up, simply open the <strong>database.php</strong> file and add your Redis configuration, like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n\'redis\' =&gt; array(\n    \'default\' =&gt; array(\'host\' =&gt; \'127.0.0.1\', \'port\' =&gt; 6379),\n    \'staging\' =&gt; array(\'host\' =&gt; \'redis-db-staging.host\', \'port\' =&gt; 6379),\n    \'production\' =&gt; array(\'host\' =&gt; \'redis-db-production.host\', \'port\' =&gt; 6379),\n)\n</pre><p>Right off the bat, we can see that Laravel supports multiple Redis configurations, based on your application&#8217;s environment. Once you have your Redis configuration in, you can start making calls to Redis, like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$redis = Redis::db(); //this gets a Redis object connected to the \'default\' configuration\n$redis = Redis::db(\'staging\'); //this gets a Redis object connected to the \'staging\' configuration\n$redis = Redis::db(\'production\'); //this gets a Redis object connected to the \'production\' configuration\n$redis-&gt;set(\'site\', \'Nettuts+\');\n$site = $redis-&gt;get(\'site\');\n$sites = $redis-&gt;lrange(\'sites\', 0, -1);\n</pre><p>Laravel provides a thin client for us, so all Redis commands can be called on the Redis class &#8211; Laravel takes care of converting it into the proper Redis query.</p><hr\n/><h2>Building a Web Application from Scratch with Laravel</h2><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/instapics.png\" alt=\"Instapics\" title=\"Instapics\" /><br\n/> <br\n/> <small><a\nhref=\"http://instagr.am/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'instagr.am\']);\" target=\"_blank\">Image courtesy of Instagram, thanks guys!</a></small></div><p>Now that we know more about Laravel, it&#8217;s time to start building our web application with it! Throughout this mini-series, we&#8217;ll be creating our very own Instagram copy, called <strong>Instapics</strong>. This little app lets you post, like, and comment on photos, as well as follow other users. With that in mind, let&#8217;s dive in!</p><hr\n/><h2> <span>Step 1:</span> Download Laravel and Other Project Files</h2><p>Before we begin, let&#8217;s first ensure that we have a system that can support Laravel. According to the documentation, Laravel requires the following:</p><ul><li><strong>PHP 5.3.x</strong> &#8211; Laravel makes use of a lot of PHP 5.3-specific features, like closures, late-static binding and namespaces.</li><li><strong>The FileInfo library</strong> &#8211; this is enabled by default in PHP 5.3, but on Windows systems, you might need to add the extension in your <code>PHP.ini</code> configuration file.</li><li><strong>Mcrypt library</strong> &#8211; this is used by Laravel for encryption and hash generation, and typically comes pre-installed with PHP.</li></ul><p>Once we&#8217;re done setting up the environment, let&#8217;s download Laravel and all the libraries we&#8217;ll be using for Instapics. Download the following files and place them within a web-accessible folder:</p><ul><li><strong>Laravel</strong> &#8211; <a\nhref=\"http://laravel.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\" target=\"_blank\">http://laravel.com</a> (Currently v3.2.1)</li><li><strong>Twitter Bootstrap</strong> &#8211; <a\nhref=\"http://twitter.github.com/bootstrap/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'twitter.github.com\']);\" target=\"_blank\">http://twitter.github.com/bootstrap/</a> (Currently v2.0.4)</li><li><strong>jQuery</strong> &#8211; <a\nhref=\"http://jquery.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jquery.com\']);\" target=\"_blank\">http://jquery.com</a> (Currently v1.7.2)</li></ul><p>Inside Laravel&#8217;s root folder, you&#8217;ll find a <strong>public</strong> folder &#8211; this is where all publicly accessible files should be stored. Laravel v3.2.1 has some premade folders inside the <strong>public</strong> folder for our assets, <strong>css</strong>, <strong>img</strong>, and <strong>js</strong> folders. Place the Twitter Bootstrap and jQuery files in their corresponding folders. At this point, your folder structure should look similar to the following:</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/folderstructure.png\" alt=\"Folder Structure\" /></div><p>Twitter Bootstrap will have some files inside the <code>css, img, and js</code> folders, and jQuery will be inside the <strong>js</strong> folder.</p><h2> <span>Step 2:</span> Setup Laravel&#8217;s Encryption Key, Pretty URLs and Virtual Host</h2><p>Before we write any code, we need to set an encyption key for Laravel to use for our application. Laravel uses this to encrypt any data we might need encryption for, such as cookies. Open the <code>application/config/application.php</code> file and find the <code>key</code> setting. Inside, the default value will be <em>YourSecretKeyGoesHere!</em>. Set this to <code>blank</code>; it should look like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n/*\n|--------------------------------------------------------------------------\n| Application Key\n|--------------------------------------------------------------------------\n|\n| This key is used by the encryption and cookie classes to generate secure\n| encrypted strings and hashes. It is extremely important that this key\n| remain secret and should not be shared with anyone. Make it about 32\n| characters of random gibberish.\n|\n*/\n\'key\' =&gt; \'\',\n</pre><p>Next, open up a Terminal/Command Prompt, browse to Laravel&#8217;s root directory, and use Artisan to generate a key:</p><p><code>php artisan key:generate</code></p><p>This should automatically generate a random 32 character encryption key for Laravel. If you did this correctly, it should now look like the following:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n/*\n|--------------------------------------------------------------------------\n| Application Key\n|--------------------------------------------------------------------------\n|\n| This key is used by the encryption and cookie classes to generate secure\n| encrypted strings and hashes. It is extremely important that this key\n| remain secret and should not be shared with anyone. Make it about 32\n| characters of random gibberish.\n|\n*/\n\'key\' =&gt; \'e9Vo0SQDe5HjsvXWcTogqKluVfEqnfEu\',\n</pre><p>If you want to regenerate your key, just repeat the steps!</p><hr\n/><p>Next, we need to change the configuration so that it can accept pretty-urls and work even without pointing our requests to <code>index.php</code>. In the <code>application/config/application.php</code> file, look for the following:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n/*\n|--------------------------------------------------------------------------\n| Application Index\n|--------------------------------------------------------------------------\n|\n| If you are including the &quot;index.php&quot; in your URLs, you can ignore this.\n| However, if you are using mod_rewrite to get cleaner URLs, just set\n| this option to an empty string and we\'ll take care of the rest.\n|\n*/\n\'index\' =&gt; \'index.php\',\n</pre><p>If we want to enable pretty-urls, just make sure that the <strong>index</strong> setting is blank, like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n/*\n|--------------------------------------------------------------------------\n| Application Index\n|--------------------------------------------------------------------------\n|\n| If you are including the &quot;index.php&quot; in your URLs, you can ignore this.\n| However, if you are using mod_rewrite to get cleaner URLs, just set\n| this option to an empty string and we\'ll take care of the rest.\n|\n*/\n\'index\' =&gt; \'\',\n</pre><p>If you&#8217;re using this, you need to ensure that you have <strong>mod_rewrite</strong> enabled on your web server (if you&#8217;re on Apache).</p><p>Lastly, we&#8217;ll need to setup a virtual host for Laravel. This isn&#8217;t really necessary in a development environment, but, for production, it&#8217;s important that we don&#8217;t allow access to the Laravel library and application files. As mentioned above, in the Laravel files you should see a folder, called <strong>public</strong>, which is where all publicly accessible files should go. In addition to that, we need to make sure that our domain, <strong>http://instapics.com</strong> only points to the <strong>public</strong> folder and nowhere else.</p><p>Configuring a virtual host depends on which web server you&#8217;re using. Here&#8217;s an example for the Apache Web Server:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;VirtualHost *:80&gt;\n    ServerName instapics.com\n	DocumentRoot &quot;D:/Development/htdocs/instapics/public&quot;\n	&lt;Directory &quot;D:/Development/htdocs/instapics/public&quot;&gt;\n	&lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n</pre><p>We should also add the domain, instapics.com, to our hosts files (since this domain doesn&#8217;t really exist). In Windows, edit the file <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>; in Linux/OSX, you usually edit <code>/etc/hosts</code>. Add this line to the file:</p><p><code>127.0.0.1 instapics.com</code></p><p>This will inform our machine that the domain <strong>instapics.com</strong> will resolve to <strong>127.0.0.1</strong>, which is the local computer.</p><h2> <span>Step 3:</span> Setup Routing</h2><p>In Laravel, all requests to the application are mapped to specific functions or controller by <code>Routes</code>. They are responsible for instructing the application where URLs go. For example, if we wanted <code>http://instapics.com/home</code> to render the home view file, we can create the following route within <code>routes.php</code>, found inside the <code>application</code> folder:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::any(\'home\', function()\n{\n    return View::make(\'home.index\');\n})\n</pre><p>Alternatively, if we instead need to route <code>http://instapics.com/home</code> to a <code>Controller</code>, say, the <code>home.php</code> controller, we might do something like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::controller(\'home\');\n</pre><p>This would route to the <strong>home.php</strong> contoller file. Any action method there will be made available as well.</p><p>An important thing to note here is that by default, Laravel does <strong>NOT</strong> route to the controllers like other PHP-frameworks do. This is <strong>by design</strong>. By doing so, we can actually create simple pages without the need to create a controller for it. For example, if we wanted to create a static <strong>Contact Us</strong> page that just lists down contact information, we can simply do something like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::any(\'contact-us\', function()\n{\n    return View::make(\'home.contact-us\');\n})\n</pre><p>This will route <code>http://instapics.com/contact-us</code> and render the <code>application/views/home/contact-us.php</code> file. Since we don&#8217;t really have any dynamic processing on this page, we can just automatically render the view file, saving us the time to create and configure a controller to do so.</p><p>There is <strong><a\nhref=\"http://laravel.com/docs/routing\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\" target=\"_blank\">so much more</a></strong> that we can do with Routes in Laravel that it can stand on its own as its own tutorial. Stuff like:</p><ul><li><strong>HTTP Verbs</strong> &#8211; Laravel gives us the ability to create routes, based on the HTTP verb that was used in the request. For example, we can have a GET request to the <strong>/home</strong> route go somewhere different from where the POST request would go.</li><li><strong>Wildcards</strong> &#8211; this lets us route a URL with a wildcard value attached to it (e.g. /user/(:num) where (:num) is the user&#8217;s ID)</li><li><strong>Filters</strong> &#8211; these let us run some functionality before or after a route is executed, depending on the route that was called. For example, we can create an <strong>auth</strong> filter that will be called before all routes, except the home and about routes. In CodeIgniter, these are similar to <strong>Hooks</strong>, but much easier to implement, due to the fact that the filters are based on the routes &#8211; so we can implement them for all requests or just some.</li></ul><p>For the purposes of this web application, though, we only need a couple of routes. First, a route that maps all requests to controllers by default. Open up the <strong>routes.php</strong> file, and comment out the default route to the <code>Home</code> controller:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n/*\nRoute::get(\'/\', function()\n{\n	return View::make(\'home.index\');\n});\n*/\n</pre><p>Below this bit of code, add the following line:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::controller(Controller::detect());\n</pre><p>This line will map all our requests to all the controllers. If the controller or actions don&#8217;t exist, the system will return a 404 response.</p><p>Now, we create a route for <code>http://instapics.com/about</code>. Technically, we can just create a <code>about</code> controller, but that would be a waste, since we can just put that within the <code>Home</code> controller. Add the following line after the route we just created:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nRoute::controller(Controller::detect());\nRoute::get(\'about\', \'home@about\');\n</pre><p>This route will direct all requests to <code>http://instapics.com/about</code> to the <code>Home</code> controller, and the <code>About</code> action.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><hr\n/><h2> <span>Step 3.</span> Create your First Laravel Controller</h2><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/images/xbox.png\" alt=\"Controllers\" /><br\n/> <br\n/> <small>Controllers anyone?</small></div><p>Controllers in Laravel are found inside the <code>application/controllers</code> folder. By default, the <code>Home</code> controller will accept requests sent to the root of the Laravel application. For example, going to <code>http://instapics.com/</code> will go to the <code>Home->action_index()</code> method.</p><p>To create a controller, simply create a file inside the <code>application/controllers</code> folder. By convention, we&#8217;ll want to name the file something descriptive that will also be the name of the controller class. For now, let&#8217;s create a new controller for our login mechanism, called &#8220;Login&#8221;:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Login_Controller extends Base_Controller\n{\n    public function action_index()\n    {\n        //do our login mechanisms here\n        echo \'test\'; //echo test so we can test this controller out\n    }\n}\n</pre><p>Next, open your browser and visit <code>http://instapics.com/login</code>. From here, you should see the &#8220;test&#8221; debug message that we placed. Since, in the <code>routes.php</code> file, we set it to enable routes to all the controller, this should work without any additional configuration. Once you&#8217;ve confirmed that it&#8217;s working, just remove the debug message. We&#8217;ll return to this controller in a future article.</p><p>For now, congratulate yourself; you&#8217;ve just created your first Laravel controller!</p><h3>More Controller Fun</h3><h4>Filters</h4><p>There&#8217;s a lot more that we can do with controllers, rather than them just being gateways to the view files. For example, remember the <strong>Filters</strong> feature that I mentioned earlier in the routes section? Aside from being attached to specific Routes, we can also attach them to specific controllers! Simply create a <code>__constructor</code> method for the controller, and setup the filter there. For example, if we need to ensure that a user is authenticated for all the methods in a controller, we can make use of our example <code>auth</code> filter:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function __construct() {\n    $this-&gt;filter(\'before\', \'auth\');\n}\n</pre><p>This will call the <strong>auth</strong> filter on all actions in this controller. If we wanted to target some specific actions, we can refer to the <strong>only</strong> method, like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function __construct() {\n    $this-&gt;filter(\'before\', \'filter_name\')-&gt;only(array(\'action\', \'actionagain\'));\n}\n</pre><p>We can alternatively use the <code>except</code> method to implement the filter on all actions, except a few:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function __construct() {\n    $this-&gt;filter(\'before\', \'filter_name\')-&gt;except(array(\'action\', \'actionagain\'));\n}\n</pre><p>Notice how expressive this code is?</p><p>We can even target a specific HTTP verb:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function __construct() {\n    $this-&gt;filter(\'before\', \'filter_name\')-&gt;except(array(\'action\', \'actionagain\'))-&gt;on(\'post\');\n}\n</pre><h4>The Base_Controller</h4><p>Most, if not all, controllers extend the <code>Base_Controller</code>. This gives us a way to define methods that will be the same for all our controllers. For example, if we need to create a logging method to log any controller request:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Base_Controller extends Controller {\n    /**\n     * Catch-all method for requests that can\'t be matched.\n     *\n     * @param  string    $method\n     * @param  array     $parameters\n     * @return Response\n     */\n    public function __call($method, $parameters)\n    {\n        return Response::error(\'404\');\n    }\n    public function logRequest()\n    {\n        $route = Request::route();\n        Log::log(\'request\', &quot;Controller: {$route-&gt;controller} / Action: {$route-&gt;controller_action} called at &quot;. date(\'Y-m-d H:i:s\'));\n    }\n}\n</pre><p>Any time we want to log a request, we can just call <code>$this->logRequest();</code> in any controller.</p><h4>RESTful Controllers</h4><p>Laravel&#8217;s RESTful controllers makes it easy to add RESTful responses to any Laravel controller. This makes it easy to create, for instance, a RESTful API. To do so, simply add the <code>$restful</code> flag to your controller:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Api_Controller extends Base_Controller\n{\n    public $restful = true;\n    public function post_authenticate()\n    {\n        //all POST requests to /api/authenticate will go here\n        //any other requests that are NOT POST will NOT go here.\n    }\n    public function get_user()\n    {\n        $user_id = Input::get(\'id\');\n        //get the USER based on $user_id and return it for whoever requested it\n    }\n    public function post_user()\n    {\n        $email = Input::get(\'email\');\n        $password = Input::get(\'password\');\n        //Create a new User\n        $user = User::create($email, $password);\n    }\n}\n</pre><p>We&#8217;ll dive into all of these cool features in future tutorials, but, for now, let&#8217;s update the <code>Home</code> controller. We&#8217;ll need to add an an <code>action_about</code> method, since we created the <code>http://instapics.com/about</code> route to direct to this method. Open <code>application/controllers/home.php</code>, and update it, like so:</p><blockquote><p>We append <code>action_</code> to all action methods in our controllers (e.g. <strong>action_about</strong>). This signals to Laravel that these actions are viewable on the website. Any other methods, which don&#8217;t have the <code>action_</code> prefix, will not be publicly accessible.</p></blockquote><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass Home_Controller extends Base_Controller {\n    public function action_index()\n    {\n        return View::make(\'home.index\');\n    }\n    public function action_about()\n    {\n        return View::make(\'home.about\');\n    }\n}\n</pre><hr\n/><h2> <span>Step 4.</span> Create your first Laravel View with the Blade Templating Engine</h2><p>Laravel supports two ways to generate views for an application:</p><ul><li><strong>PHP-based Views</strong> &#8211; these are views that make use of PHP as a templating language.</li><li><strong>Blade-based Views</strong> &#8211; these are views that make use of Laravel&#8217;s built-in templating engine, called <strong>Blade</strong>.</li></ul><p>The <strong>Blade Templating Engine</strong> is a templating framework that, similar to how the <a\nhref=\"http://www.smarty.net/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.smarty.net\']);\" target=\"_blank\">Smarty Templating Engine</a> works, makes use of customized tags and functions to allow for better separation of presentation logic and application code.</p><p>For the sake of simplicity, we&#8217;ll be utilizing the Blade Templating Engine, as opposed to the PHP-based views.</p><blockquote><p>All view files that will make use of the Blade Templating Engine needs to have a <code>.blade.php</code> extension. This tells Laravel to use the engine on the view file.</p></blockquote><p>First, let&#8217;s create a general purpose layout that we&#8217;ll use for all our views. Create the <strcodeng>application/views/layouts</code> folder, and inside, create a file, named <code>main.blade.php</code>:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;utf-8&quot;&gt;\n        &lt;title&gt;Instapics&lt;/title&gt;\n        {{ Asset::styles() }}\n        {{ Asset::scripts() }}\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=&quot;navbar navbar-fixed-top&quot;&gt;\n            &lt;div class=&quot;navbar-inner&quot;&gt;\n                &lt;div class=&quot;container&quot;&gt;\n                    &lt;a class=&quot;brand&quot; href=&quot;home&quot;&gt;Instapics&lt;/a&gt;\n                    &lt;div class=&quot;nav-collapse&quot;&gt;\n                        &lt;ul class=&quot;nav&quot;&gt;\n                            @section(\'navigation\')\n                            &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;home&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;\n                            @yield_section\n                        &lt;/ul&gt;\n                    &lt;/div&gt;&lt;!--/.nav-collapse --&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;container&quot;&gt;\n            @yield(\'content\')\n            &lt;hr&gt;\n            &lt;footer&gt;\n            &lt;p&gt;&amp;copy; Instapics 2012&lt;/p&gt;\n            &lt;/footer&gt;\n        &lt;/div&gt; &lt;!-- /container --&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</pre><p>Now that we have our main layout, let\'s update the index file. Open <code>application/views/home/index.blade.php</code> and update it:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n@layout(\'layouts/main\')\n@section(\'navigation\')\n@parent\n&lt;li&gt;&lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;\n@endsection\n@section(\'content\')\n&lt;div class=&quot;hero-unit&quot;&gt;\n    &lt;div class=&quot;row&quot;&gt;\n        &lt;div class=&quot;span6&quot;&gt;\n            &lt;h1&gt;Welcome to Instapics!&lt;/h1&gt;\n            &lt;p&gt;Instapics is a fun way to share photos with family and friends.&lt;/p&gt;\n            &lt;p&gt;Wow them with your photo-filtering abilities!&lt;/p&gt;\n            &lt;p&gt;Let them see what a great photographer you are!&lt;/p&gt;\n            &lt;p&gt;&lt;a href=&quot;about&quot; class=&quot;btn btn-primary btn-large&quot;&gt;Learn more &amp;raquo;&lt;/a&gt;&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;span4&quot;&gt;\n            &lt;img src=&quot;http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/img/phones.png&quot; alt=&quot;Instapics!&quot; /&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;!-- Example row of columns --&gt;\n&lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;span3&quot;&gt;\n        &amp;nbsp;\n    &lt;/div&gt;\n    &lt;div class=&quot;span4&quot;&gt;\n        &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/img/badge_ios.png&quot; alt=&quot;Get it on iOS&quot; /&gt;&lt;/a&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;span4&quot;&gt;\n        &lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;http://d2o0t5hpnwv4c1.cloudfront.net/2064_laravel/img/badge_android.png&quot; alt=&quot;Get it on Android&quot; /&gt;&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n@endsection\n</pre><p>Let\'s review our view files. In the main layout template, we make use of three functions:</p><ul><li>The <strong>Assets</strong> manager (<code>Assets::styles(), Assets::scripts()</code>)</li><li>The @section Blade function (with @yield_section)</li><li>And the @yield Blade function</li></ul><h3>Managing Assets</h3><p>Laravel provides a robust way to load CSS and JS files, via its <strong>Assets</strong> management functionality. The syntax for adding an asset is <code>Assets::add(\'[asset name]\', \'[relative url from the public folder\'], \'[name of dependency, array of dependencies if multiple]\')</code>. The <strong>Assets</strong> manager also provides support for asset dependencies, which are used to tell Laravel to load the dependency first, before loading the asset.</p><p>We\'ll need to register our assets so that the view files will be able to use them. Open <code>application/controllers/base.php</code>, and add the following code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function __construct()\n{\n    //Assets\n    Asset::add(\'jquery\', \'js/jquery-1.7.2.min.js\');\n    Asset::add(\'bootstrap-js\', \'js/bootstrap.min.js\');\n    Asset::add(\'bootstrap-css\', \'css/bootstrap.min.css\');\n    Asset::add(\'bootstrap-css-responsive\', \'css/bootstrap-responsive.min.css\', \'bootstrap-css\');\n    Asset::add(\'style\', \'css/style.css\');\n    parent::__construct();\n}\n</pre><p>By doing this, we make it easier to add, remove or update any assets that we need. We put it inside the Base controller\'s <code>__construct()</code> method to add the assets to all our controllers. To take advantage of this within a view, we simply call <code>Assets::styles()</code> for CSS files, and <code>Assets::scripts()</code> for the JS files in any view file. Laravel automatically determines what the asset type is, based on the file extension, and loads it with the appropriate asset group.</p><h3><code>@section</code> (and <code>@yield_section</code>)</h3><p>Sections let us inject content into the main layout from within a view. To define which part of our main layout is a section, we surround it with <code>@section</code> and <code>@yield_section</code> Blade tags.</p><p>In our main view file, we\'ve marked the navigation items as a <code>@section</code> (called <strong>navigation</strong>). Looking now at the index view file, we append the <</strong>>About</</strong>> navigation link to the navigation bar with the following code:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n@section(\'navigation\')\n@parent\n&lt;li&gt;&lt;a href=&quot;about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;\n@endsection\n</pre><p>By calling the <code>@parent</code> function, we instruct the view file to inherit the contents of the original section from the main layout. If we were to remove the <code>@parent</code> function, like so:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n@section(\'navigation\')\n&lt;li&gt;&lt;a href=&quot;/about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;\n@endsection\n</pre><p>Now, the index view file\'s navigation section will replace the main layout\'s navigation entirely. This makes the process of changing the main layout\'s HTML even more flexible.</p><h3><code>@yield</code></h3><p>The <code>@yield</code> function is similar to the <code>@section</code>/<code>@yield_section</code> function, but, instead, lets the nested view fill the content entirely. In our index file, we have a <code>@section(\'content\')</code> function that replaces <code>@yield(\'content\')</code>.</p><p>Now, let\'s try passing in some variables to our views. First, create a new view file in the <code>application/views/home</code> folder for the <em>About</em> page. Let\'s call it <code>about.blade.php</code>:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n@layout(\'layouts/main\')\n@section(\'navigation\')\n@parent\n&lt;li&gt;&lt;a href=&quot;about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;\n@endsection\n@section(\'content\')\n&lt;div class=&quot;row&quot;&gt;\n    &lt;div class=&quot;span3&quot;&gt;\n        &lt;div class=&quot;well sidebar-nav&quot;&gt;\n            &lt;ul class=&quot;nav nav-list&quot;&gt;\n                &lt;li class=&quot;nav-header&quot;&gt;Navigation&lt;/li&gt;\n                @foreach ($sidenav as $sn)\n                &lt;li @if ($sn[\'active\']) class=&quot;active&quot; @endif&gt;\n                    &lt;a href=&quot;{{ $sn[\'url\'] }}&quot;&gt;{{ $sn[\'name\'] }}&lt;/a&gt;\n                &lt;/li&gt;\n                @endforeach\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;span9&quot;&gt;\n        &lt;h1&gt;About Instapics&lt;/h1&gt;\n        &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ullamcorper lectus et sapien volutpat iaculis. Phasellus arcu justo, commodo ac ornare at, pellentesque vitae nulla. Sed id justo mauris, et semper est. Mauris id dui vitae felis hendrerit sollicitudin ut vel nisi. Phasellus a dolor quis tellus sagittis commodo. Suspendisse potenti. Donec sagittis rhoncus sem in venenatis. Nam sit amet leo metus. Mauris eget nisi eu felis interdum venenatis nec sed ipsum. Integer lobortis, risus non pellentesque pharetra, massa augue vulputate sem, quis sagittis arcu tortor sit amet nisi. Ut quis nibh sem. Morbi malesuada, lorem ac tincidunt venenatis, quam erat rhoncus sapien, et tempus quam mauris sit amet metus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nam varius dictum lectus non placerat.&lt;/p&gt;\n        &lt;p&gt;Cras tincidunt, libero eu dignissim egestas, erat purus mattis urna, vitae pellentesque nisi turpis at velit. Vivamus vitae euismod nisi. Duis luctus ante nec neque fermentum vulputate. Phasellus in dolor quis mauris rhoncus consectetur ut quis lacus. Nulla facilisi. Nullam magna velit, accumsan vehicula consectetur a, vestibulum eget neque. Sed feugiat dui quis ligula convallis sed placerat dui dignissim. Aliquam interdum tempus leo, a hendrerit orci ultrices ut. Aliquam sem dolor, auctor eu mattis id, varius a massa. Fusce facilisis, massa id ultricies lacinia, urna nunc sollicitudin massa, sit amet posuere metus justo vitae metus. Vivamus in dolor quam, ut elementum libero. Proin vehicula diam eu diam consectetur ut imperdiet ipsum pulvinar. Cras eu est quis urna semper adipiscing ut et leo. Curabitur tristique consectetur aliquet. Phasellus quam neque, dapibus non eleifend quis, feugiat vel elit.&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n@endsection\n</pre><p>Back in the <code>Home</code> controller, update the <code>action_about()</code> method:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function action_about()\n{\n    return View::make(\'home.about\', array(\n        \'sidenav\' =&gt; array(\n            array(\n                \'url\' =&gt; \'home\',\n                \'name\' =&gt; \'Home\',\n                \'active\' =&gt; false\n            ),\n            array(\n                \'url\' =&gt; \'about\',\n                \'name\' =&gt; \'About\',\n                \'active\' =&gt; true\n            )\n        )\n    ));\n}\n</pre><p>Reviewing our code, we see that, in the <code>Home</code> controller, we pass in an <code>array</code> of parameters. Right now, these are hardcoded values, but they can come from anywhere - for example, from a model or  database. These are passed to the view file, where we make use of some Blade tags to render the parameters.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n@foreach ($sidenav as $sn)\n...\n@endforeach\n</pre><p>This lets us loop through the array in our parameters.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;li @if ($sn[\'active\']) class=&quot;active&quot; @endif&gt;\n</pre><p>This is an if-statement. If we wanted to use an else, it would look like this:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n@if ($sn[\'active\'])\n    class=&quot;active&quot;\n@else\n    class=&quot;notactive&quot;\n@endif\n</pre><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;a href=&quot;{{ $sn[\'url\'] }}&quot;&gt;{{ $sn[\'name\'] }}&lt;/a&gt;\n</pre><p>This is the most basic Blade tag - it just echoes the variable we set.</p><p>Take note that, within most of the Blade tags, we use good \'ol PHP. This makes it easier to write the Blade tags, since we\'ll be able to use native PHP functions, like <code>isset()</code> or <code>count()</code>. There are also other Blade tags that I wasn\'t able to use here; you can learn more about them in the <a\nhref=\"http://laravel.com/docs/views/templating\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'laravel.com\']);\" target=\"_blank\">Blade documentation</a>. Trust me, it\'s pretty easy!</p><hr\n/><h2>Conclusion</h2><p>After reading this tutorial, we\'ve learned:</p><ul><li>What Laravel is</li><li>What makes Laravel different from other PHP frameworks</li><li>Where to download Laravel</li><li>How to setup Laravel</li><li>How Laravel\'s Routing system works</li><li>Some other features in Laravel\'s Routing system</li><li>How to create your first Laravel Controller</li><li>Some additional features with Laravel\'s Controllers</li><li>How to create your first Laravel View</li><li>How to use Laravel\'s Blade Templating Engine</li></ul><p>Laravel is truly an amazing framework. It\'s fast, simple, elegant and so easy to use. It absolutely merits being considered as the framework to be used for your next project.</p><p>Next in our <strong>Building Web Application from Scratch with Laravel</strong> series, we\'ll learn about one of Laravel\'s best features: the <strong>Eloquent ORM</strong> and <strong>Fluent Query Builder</strong>.</p><p>What do you think about Laravel? Are you considering to use it for your next project? Let me know in the comments! And, if you\'re a <a\nhref=\"http://tutsplus.com\" >Tuts+ Premium member</a>, stay tuned for our upcoming Laravel Essentials course!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(42,3,1,1358049680,NULL,' Creating a Flat-File Blog Engine Using Slim ',' In this article, we will learn how to create a flat file blog engine in PHP using the Slim framework. If you don’t understand the jargon, don’t worry. We’re simply going to create a spartan blogging application, which utilizes text files instead of a database to store data. If you’re a beginner, fret not! We will start with the basics of using Slim. Let’s get started after the jump!',' In this article, we will learn how to create a flat file blog engine in PHP using the Slim framework. If you don’t understand the jargon, don’t worry. We’re simply going to create a spartan blogging application, which utilizes text files instead of a database to store data. If you’re a beginner, fret not! We will start with the basics of using Slim. Let’s get started after the jump!',1,0,'creating-a-flat-file-blog-engine-using-slim',174,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1041_phprapidprototyping/200.png','',1),(43,3,1,1358049681,NULL,' Advanced CodeIgniter Techniques and Tricks ','CodeIgniter is a widely used PHP framework that aims to help developers write better structured code and remove boilerplate tasks from the workflow.In this article, I’m going to explain some incredibly useful techniques to use when developing applications using CodeIgniter.','CodeIgniter is a widely used PHP framework that aims to help developers write better structured code and remove boilerplate tasks from the workflow.In this article, I’m going to explain some incredibly useful techniques to use when developing applications using CodeIgniter.',1,0,'advanced-codeigniter-techniques-and-tricks',334,0,'http://d2o0t5hpnwv4c1.cloudfront.net/183_codeIgniter/200x200.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/2057_citips/ci_tips.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25408\'), post_id: 25408, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p><a\nhref=\"http://codeigniter.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'codeigniter.com\']);\" target=\"_blank\">CodeIgniter</a> is a widely used PHP framework that aims to help developers write better structured code and remove boilerplate tasks from the workflow.</p><p>In this article, I&#8217;m going to explain some incredibly useful techniques to use when developing applications using CodeIgniter.</p><p><span\nid=\"more-25408\"></span></p><hr\n/><h2> <span>1.</span> Easier Configuration Parameters</h2><p>When creating libraries (or anything that requires configuration values) for our applications, we often need to use configuration parameters in order for it to be able to perform its tasks. When doing so, we can use the snippet shown below to obtain the configuration values.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$value	= $this-&gt;config-&gt;item( \'some_item\' );\n</pre><p>This is fine, if we have just a couple of configuration parameters, but when we need to extract a dozen configuration parameters or so, loading values this way can be very annoying. Wouldn&#8217;t it be great to load every parameter like the array we use in the configuration file? In order to do just that you need to load it in the following way.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$this-&gt;load-&gt;config( \'config_file\', true );\n$options	= $this-&gt;config-&gt;item( \'config_file\' );\n// $options[\'some_item\'];\n</pre><p>And with that single line, our entire configuration file will be placed in the <code>$options</code> array. And to further sweeten the deal, using this technique  also makes sure you avoid the name collision problem in configuration files. This way, your parameters can be named anything you&#8217;d like without worrying about other configuration files.</p><hr\n/><h2> <span>2.</span> Allowing Optional Configuration Options</h2><p>Building up on our earlier point, imagine a scenario where we&#8217;d like to pass parameters to our library from either a configuration file or an options array when loading it. Maybe we&#8217;re using the same library in different parts of our application and the config options cannot be the same for each use case.</p><p>To be able to do this, place a private <code>_options</code> member in you library and use a constructor like the following.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nprivate $_options	= array();\npublic function __construct( $options = array() ) {\n	if ( is_empty( $options ) ) {\n		$this-&gt;load-&gt;config( \'config_file\', true );\n		$options	= $this-&gt;config-&gt;item( \'config_file\' );\n	}\n	$this-&gt;_options	= $options;\n}\n</pre><p>After this, you can access your parameters through the private <code>_options</code> array within your library, and, just like the previous example, you&#8217;ve avoided name collision problems with the keys in your configuration files.</p><hr\n/><h2> <span>3.</span> Leveraging HTML Emails</h2><p>The need to send HTML emails through your app is omnipresent, be it a newsletter or some automatic welcome message. Usually, you&#8217;d do this by hand coding the corresponding HTML  in the <code>message</code> parameter of our email object (been there, done that).</p><p>Well, it&#8217;s no secret that the above method is pretty ugly. The following tip is not quite a trick but  merely  a way to take advantage of some CodeIgniter functionality where it makes sense.</p><p>Personally, I prefer this approach as I manage a few sites where I need to send newsletters, and several other HTML emails, and using templates will significantly ease up the process.</p><p>In your application&#8217;s <code>views</code> folder, create a folder called <code>emails</code> and place any HTML email you&#8217;d like to send inside it, with the corresponding structure to be rendered by email clients. And now, in the method where you shoot off the emails, you can use the following code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function send_mail() {\n	$this-&gt;load-&gt;library( \'email\' );\n	$this-&gt;email-&gt;from( \'jdoe@gmail.com\', \'John Doe\' );\n	$this-&gt;email-&gt;to( \'jane_doe@gmail.com\' );\n	$this-&gt;email-&gt;subject( \'Some subject\' );\n	$this-&gt;email-&gt;message( $this-&gt;load-&gt;view( \'emails/message\', $data, true ) );\n	$this-&gt;email-&gt;send();\n}\n</pre><p>A couple of important things to keep in mind when using this technique:</p><ul><li>The email library must be set up to be able to send HTML emails</li><li> The <code>data</code> object used when loading the view should contain the options used in the view</li><li> With this approach, we&#8217;re using the built-in functionality of retrieving the content of a view file instead of sending it to the output class by setting  the third parameter to true when loading the view.</li></ul><hr\n/><h2> <span>4.</span> Managing Application Versions</h2><p>Let&#8217;s face it: almost every recent PHP application  is  a backend service or an API. If you have used the Google Maps API, you&#8217;ve probably noticed that Google allows us to pass a version parameter for us to tell it which version we&#8217;re going to make use of.</p><p>Wouldn&#8217;t it be nice if we can do this in our CodeIgniter applications? This way, we can create new versions of our software while supporting legacy versions to ensure backwards compatibility.</p><p>With this technique, we&#8217;ll be able to use a single CodeIgniter installation to handle multiple versions of our application using the same index file. We&#8217;ll be able to choose the version by passing a <code>v</code> parameter in the request.</p><p>There are a couple of things in order for this to work. First off, I&#8217;m going to rename my <code>application</code> folder. Since this is the first version of my API, I&#8217;ll simply name it <code>1.0.0.</code> After this, I&#8217;m going to rename my <code>index.php</code> file, call it <code>1.0.0.php</code> and change the <code>application_folder</code> line in it. Replace line 75 with:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$application_folder	= \'1.0.0\';\n</pre><p>Cool, now our application version is 1.0.0. Are we going to call that <code>1.0.0.php</code> file instead of index? Absolutely not! Let&#8217;s create a new <code>index.php</code> file and add the following code to it.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\ndefine( \'API_VER\', \'v\' );\narray_key_exists( API_VER, $_REQUEST ) ? $v	= $_REQUEST[ API_VER ] : $v = \'1.0.0\';\nif ( file_exists( &quot;{$v}.php&quot; ) ) {\n	if ( is_dir( dirname( __FILE__ ) . &quot;/{$v}&quot; ) ) {\n		require dirname( __FILE__ ) . &quot;/{$v}.php&quot;;\n	} else {\n		$error	= new stdClass();\n		$error-&gt;error		= true;\n		$error-&gt;description	= \'INVALID_API_VERSION\';\n		echo json_encode( $error );\n		exit;\n	}\n} else {\n	$error	= new stdClass();\n	$error-&gt;error		= true;\n	$error-&gt;description	= \'INVALID_API_VERSION\';\n	echo json_encode( $error );\n	exit;\n}\n</pre><p>Here, we&#8217;re defining the parameter that we&#8217;ll use to choose the version. If no version is passed, we use the 1.0.0 version. If a version is passed, we make sure there&#8217;s a corresponding file and folder for that version. Otherwise, we throw an error.</p><p>To add more versions, we&#8217;d simply have to copy our <code>1.0.0</code> folder and the <code>1.0.0.php</code> file, rename them according to the version we&#8217;re going to create,  change the <code>application_folder</code> variable in the file and start working on the next version of our API. When we feel comfortable enough with it, we can make it the version by modifying the <code>index.php</code> file.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><hr\n/><h2> <span>5.</span> Serving Separate Response Formats</h2><p>Dot notation? No, I&#8217;m not talking about Objective-C messages. If you have used the Twitter API or something similar, you&#8217;ll remember that at the end of the method call, you can specify the format you want the response in. As I really like to create RESTful services using CodeIgniter, I like to add this functionality to them even though I&#8217;ve always use JSON.</p><p>In order to do this, we need to take advantage of CodeIgniter hooks to preprocess our URI. We&#8217;ll use two hooks for this process, and we&#8217;ll set a config item to set the response format accordingly.</p><p>First off, what are hooks? According to the <a\nhref=\"http://codeigniter.com/user_guide/general/hooks.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'codeigniter.com\']);\" target=\"_blank\">CodeIgniter user guide</a>,</p><blockquote><p>CodeIgniter Hooks feature provides a means to tap into and modify the inner workings of the framework without hacking the core files</p></blockquote><p>In plain English, they&#8217;re a way to change the normal execution flow of an application. Although we don&#8217;t want to do precisely that here, we do want to preprocess our URI before the CodeIgniter Router class has a chance to inspect it. With that in mind, we&#8217;re going to make use of the  &#8220;pre_system&#8221; hook.</p><p>In order for us to use hooks we have to enable them. To do that, open the <code>config.php</code> file under the <code>config</code> and set the <code>enable_hooks</code> item to true.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$config[\'enable_hooks\']	= TRUE;\n</pre><p>We now need to add the hook that will take care of the pre-routing process. Inside the <code>config</code> folder in your application folder, open the <code>hooks.php</code> file and add the following code:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$hook[\'pre_system\']	= array(\n	\'class\'		=&gt; \'Router\',\n	\'function\'	=&gt; \'route\',\n	\'filename\'	=&gt; \'router.php\',\n	\'filepath\'	=&gt; \'hooks\'\n);\n</pre><p>What this code does is that it tells our application to run the <code>route</code> method of our <code>Router</code> class inside our <code>hooks</code> folder. A quick note here: the <code>filepath</code> parameter is the path to the file that has the method you want to call, and it <strong>MUST</strong> be relative to your application folder <strong>WITHOUT</strong> a trailing slash.</p><p>Now we need to create the class and method that this hook is going to call. In your <code>hooks</code> folder (if it&#8217;s not there, create it) inside your <code>application</code> folder, create a new file, name it <code>router.php</code> and place the following code in it.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nif ( !defined( \'BASEPATH\' ) ) exit( \'No direct script access allowed\' );\nclass Router {\n	private static $_format	= \'\';\n	public function route() {\n		$request				= strstr( $_SERVER[\'REQUEST_URI\'], \'?\', true );\n		if ( !$request ) {\n			$request			= $_SERVER[\'REQUEST_URI\'];\n		}\n		$parts					= explode( \'.\', $request );\n		self::$_format			= $parts[ sizeof($parts) - 1 ];\n		if ( self::$_format == \'json\' || self::$_format == \'xml\' || self::$_format == \'rss\' || self::$_format == \'atom\' ) {\n			$_SERVER[\'REQUEST_URI\']	= substr( $request, 0, ( strlen( $request ) - strlen( self::$_format ) - 1 ) );\n		} else {\n			self::$_format	= \'\';\n		}\n	}\n}\n</pre><blockquote\nclass=\"pullquote pqRight\"><p>CodeIgniter Hooks feature provides a means to tap into and modify the inner workings of the framework without hacking the core files</p></blockquote><p>A couple of things to note here. First off, you&#8217;ll notice that I&#8217;m using an static class member to store the type of the request. That&#8217;s because we&#8217;re getting the response format correctly, but we cannot tell the rest of the application about it. At this early point of the application execution, the config class is not yet loaded so we need to use another hook. With that in mind, we&#8217;ll need to make it static so it&#8217;s not overridden when we call the next hook.</p><p>Right at the beginning, I&#8217;m checking for an <code>?</code> symbol, so the rerouting here won&#8217;t conflict with any parameters passed through the URL. The <code>strstr</code> method will return the string <strong>BEFORE</strong> that character as the third parameter is set to true. Do keep in mind that this behavior was added in PHP 5.3.0, so if you&#8217;re using a previous version, you&#8217;ll need another way to obtain the part of the string before the <code>?</code> symbol.</p><p>Because of the way we&#8217;re retrieving the requested response format from the URI and then setting the <code>REQUEST_URI</code> key manually for the CodeIgniter Router, we need to check that the output requested is valid. If not, we let the application handle the request without interfering.</p><p>Now we have identified the requested response format but our controllers doesn&#8217;t know about it. I think that a clean way to inform this is with a <code>config</code> parameter. In order to set it we need to use another hook. The first two hooks are <code>pre_system</code> and <code>pre_controller</code>.</p><p>However, at this point we cannot use the <code>get_instance</code> method, meaning we can&#8217;t set a config item, so we&#8217;ll use the <code>post_controller_constructor</code> hook. As long as you don&#8217;t intend to use the response format config item in the controllers constructors this technique will work.</p><p>After the <code>pre_system</code> hook in the <code>hooks.php</code> file add the following code.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$hook[\'post_controller_constructor\'] = array(\n	\'class\'		=&gt; \'Router\',\n	\'function\'	=&gt; \'config\',\n	\'filename\'	=&gt; \'router.php\',\n	\'filepath\'	=&gt; \'hooks\'\n);\n</pre><p>As you can tell, this hook is calling another method in the same class that we use to retrieve the requested response format. In the <code>Router</code> class after (or before) the <code>route</code> method, add the following code.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\npublic function config() {\n	$CI		=&amp; get_instance();\n	$CI-&gt;config-&gt;set_item( \'response_format\', self::$_format );\n}\n</pre><p>In this method, we&#8217;re setting a configuration option called <code>response_format</code> with the format retrieved on the <code>route</code> method.</p><p>Finally, to use this response format in your controllers (or anywhere in your application) use the following code.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$format	= $this-&gt;config-&gt;item( \'response_format\' );\n</pre><p>And with that, you can retrieve the requested format and parse the result accordingly. As to parsing the response, I leave it as an exercise to the reader.</p><hr\n/><h2> Conclusion</h2><p>I hope you&#8217;ve found some of these tips useful. As you may have noticed, I&#8217;ve  focused on RESTful services since, in my opinion, they are what we as PHP developers should be focusing on.</p><p>I look forward to your comments and thank you so much for reading.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(44,3,1,1358049683,NULL,' How to Process Credit Cards with PayPal Payments Pro Using PHP ','PayPal is one of the most popular payment processing platforms available today for many reasons. Its ease of use and its connection to the eBay platform are just the tip of the iceberg. While one of its most popular features is the ability to simply sign in to your PayPal account to submit payments, merchants using PayPal can also accept credit cards directly just like a traditional merchant account solution would provide. (Continue)','PayPal is one of the most popular payment processing platforms available today for many reasons. Its ease of use and its connection to the eBay platform are just the tip of the iceberg. While one of its most popular features is the ability to simply sign in to your PayPal account to submit payments, merchants using PayPal can also accept credit cards directly just like a traditional merchant account solution would provide. (Continue)',1,0,'how-to-process-credit-cards-with-paypal-payments-pro-using-php',372,0,'http://d2o0t5hpnwv4c1.cloudfront.net/226_paypal/200x200.jpg','',1),(45,3,1,1358049684,NULL,' PHP Database Access: Are You Doing It Correctly? ','We\'ve covered PHP\'s PDO API a couple of times here on Nettuts+, but, generally, those articles focused more on the theory, and less on the application. This article will fix that!To put it plainly, if you\'re still using PHP\'s old mysql API to connect to your databases, read on!','We\'ve covered PHP\'s PDO API a couple of times here on Nettuts+, but, generally, those articles focused more on the theory, and less on the application. This article will fix that!To put it plainly, if you\'re still using PHP\'s old mysql API to connect to your databases, read on!',1,0,'php-database-access-are-you-doing-it-correctly',248,0,'http://tutsplus.s3.amazonaws.com/tutspremium/courses_$folder$/PHPFundamentals/images/php-pdo.jpeg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25338\'), post_id: 25338, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>We&#39;ve covered PHP&#39;s PDO API a <a\nhref=\"http://net.tutsplus.com/tutorials/php/why-you-should-be-using-phps-pdo-for-database-access/\" >couple</a> of <a\nhref=\"http://net.tutsplus.com/tutorials/php/pdo-vs-mysqli-which-should-you-use/\" >times</a> here on Nettuts+, but, generally, those articles focused more on the theory, and less on the application. This article will fix that!</p><p>To put it plainly, if you&#39;re still using PHP&#39;s old <code>mysql</code> API to connect to your databases, read on!</p><p><span\nid=\"more-25338\"></span></p><hr\n/><h2>What?</h2><p>It&#39;s possible that, at this point, the only thought in your mind is, &quot;What the heck is PDO?&quot; Well, it&#39;s one of PHP&#39;s three available APIs for connecting to a MySQL database. &quot;Three,&quot; you say? Yes; many folks don&#39;t know it, but there are three different APIs for connecting:</p><ul><li><code>mysql</code></li><li><code>mysqli</code> &#8211; MySQL Improved</li><li><code>pdo</code> &#8211; PHP Data Objects</li></ul><p>The traditional <code>mysql</code> API certainly gets the job done, and has become so popular largely due to the fact that it makes the process of retrieving some records from a database as easy as possible. For example:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n/*\n * Anti-Pattern\n */\n# Connect\nmysql_connect(\'localhost\', \'username\', \'password\') or die(\'Could not connect: \' . mysql_error());\n# Choose a database\nmysql_select_db(\'someDatabase\') or die(\'Could not select database\');\n# Perform database query\n$query = &quot;SELECT * from someTable&quot;;\n$result = mysql_query($query) or die(\'Query failed: \' . mysql_error());\n# Filter through rows and echo desired information\nwhile ($row = mysql_fetch_object($result)) {\n    echo $row-&gt;name;\n}\n</pre><p>Yes, the code above is fairly simple, but it does come with its significant share of downsides.</p><ul><li><strong>Deprecated: </strong>Though it hasn&#39;t been officially deprecated &#8211; due to widespread use &#8211; in terms of best practice and education, it might as well be.</li><li><strong>Escaping: </strong>The process of escaping user input is left to the developer &#8211; many of which don&#39;t understand or know how to sanitize the data.</li><li><strong>Flexibility: </strong>The API isn&#39;t flexible; the code above is tailor-made for working with a MySQL database. What if you switch?</li></ul><p>PDO, or PHP Data Objects, provides a more powerful API that doesn&#39;t care about the driver you use; it&#39;s database agnostic. Further, it offers the ability to use prepared statements, virtually eliminating any worry of SQL injection.</p><hr\n/><h2>How?</h2><p>When I was first learning about the PDO API, I must admit that it was slightly intimidating. This wasn&#39;t because the API was overly complicated (it&#39;s not) &#8211; it&#39;s just that the old <code>myqsl</code> API was so dang easy to use!</p><p>Don&#39;t worry, though; follow these simple steps, and you&#39;ll be up and running in no time.</p><h3>Connect</h3><p>So you already know the legacy way of connecting to a MySQL database:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\"># Connect\nmysql_connect(\'localhost\', \'username\', \'password\') or die(\'Could not connect: \' . mysql_error());\n</pre><p>With PDO, we create a new instance of the class, and specify the driver, database name, username, and password &#8211; like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">$conn = new PDO(\'mysql:host=localhost;dbname=myDatabase\', $username, $password);\n</pre><p>Don&#39;t let that long string confuse you; it&#39;s really very simple: we specify the name of the driver (mysql, in this case), followed by the required details (connection string) for connecting to it.</p><p>What&#39;s nice about this approach is that, if we instead wish to use a sqlite database, we simply update the DSN, or &quot;Data Source Name,&quot; accordingly; we&#39;re not dependent upon MySQL in the way that we are when use functions, like <code>mysql_connect</code>.</p><h4>Errors</h4><p>But, what if there&#39;s an error, and we can&#39;t connect to the database? Well, let&#39;s wrap everything within a <code>try/catch</code> block:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">try {\n    $conn = new PDO(\'mysql:host=localhost;dbname=myDatabase\', $username, $password);\n    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch(PDOException $e) {\n    echo \'ERROR: \' . $e-&gt;getMessage();\n}\n</pre><p>That&#39;s better! Please note that, by default, the default error mode for PDO is <code>PDO::ERRMODE_SILENT</code>. With this setting left unchanged, you&#39;ll need to manually fetch errors, after performing a query.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\necho $conn-&gt;errorCode();\necho $conn-&gt;errorInfo();\n</pre><p> Instead, a better choice, during development, is to update this setting to <code>PDO::ERRMODE_EXCEPTION</code>, which will fire exceptions as they occur. This way, any uncaught exceptions will halt the script.</p><p>For reference, the available options are:</p><ul><li><code>PDO::ERRMODE_SILENT</code></li><li><code>PDO::ERRMODE_WARNING</code></li><li><code>PDO::ERRMODE_EXCEPTION</code></li></ul><h3>Fetch</h3><p>At this point, we&#39;ve created a connection to the database; let&#39;s fetch some information from it. There&#39;s two core ways to accomplish this task: <code>query</code> and <code>execute</code>. We&#39;ll review both.</p><h4>Query</h4><pre class=\"brush: php; title: ; notranslate\" title=\"\">/*\n * The Query Method\n * Anti-Pattern\n */\n$name = \'Joe\'; # user-supplied data\ntry {\n    $conn = new PDO(\'mysql:host=localhost;dbname=myDatabase\', $username, $password);\n    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $data = $conn-&gt;query(\'SELECT * FROM myTable WHERE name = \' . $conn-&gt;quote($name));\n    foreach($data as $row) {\n        print_r($row);\n    }\n} catch(PDOException $e) {\n    echo \'ERROR: \' . $e-&gt;getMessage();\n}\n</pre><p>Though this works, notice that we&#39;re still manually escaping the user&#39;s data with the <code>PDO::quote</code> method. Think of this method as, more or less, the PDO equivalent to use <code>mysql_real_escape_string</code>; it will both escape and quote the string that you pass to it. In situations, when you&#39;re binding user-supplied data to a SQL query, it&#39;s strongly advised that you instead use prepared statements. That said, if your SQL queries are not dependent upon form data, the <code>query</code> method is a helpful choice, and makes the process of looping through the results as easy as a <code>foreach</code> statement.</p><h4>Prepared Statements</h4><pre class=\"brush: php; title: ; notranslate\" title=\"\">/*\n * The Prepared Statements Method\n * Best Practice\n */\n$id = 5;\ntry {\n    $conn = new PDO(\'mysql:host=localhost;dbname=myDatabase\', $username, $password);\n    $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n    $stmt = $conn-&gt;prepare(\'SELECT * FROM myTable WHERE id = :id\');\n    $stmt-&gt;execute(array(\'id\' =&gt; $id));\n    while($row = $stmt-&gt;fetch()) {\n        print_r($row);\n    }\n} catch(PDOException $e) {\n    echo \'ERROR: \' . $e-&gt;getMessage();\n}\n</pre><p>In this example, we&#39;re using the <code>prepare</code> method to, literally, prepare the query, before the user&#39;s data has been attached. With this technique, SQL injection is virtually impossible, because the data doesn&#39;t ever get inserted into the SQL query, itself. Notice that, instead, we use named parameters (<code>:id</code>) to specify placeholders.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><blockquote><p>Alternatively, you could use <code>?</code> parameters, however, it makes for a less-readable experience. Stick with named parameters.</p></blockquote><p>Next, we execute the query, while passing an array, which contains the data that should be bound to those placeholders.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">$stmt-&gt;execute(array(\'id\' =&gt; $id));\n</pre><p>An alternate, but perfectly acceptable, approach would be to use the <code>bindParam</code> method, like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">$stmt-&gt;bindParam(\':id\', $id, PDO::PARAM_INT);\n$stmt-&gt;execute();\n</pre><h4>Specifying the Ouput</h4><p>After calling the <code>execute</code> method, there are a variety of different ways to receive the data: an array (the default), an object, etc. In the example above, the default response is used: <code>PDO::FETCH_ASSOC</code>; this can easily be overridden, though, if necessary:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">while($row = $stmt-&gt;fetch(PDO::FETCH_OBJ)) {\n    print_r($row);\n}\n</pre><p>Now, we&#39;ve specified that we want to interact with the result set in a more object-oriented fashion. Available choices include, but not limited to:</p><ul><li><strong>PDO::FETCH_ASSOC: </strong>Returns an array.</li><li><strong>PDO::FETCH_BOTH: </strong> Returns an array, indexed by both column-name, and 0-indexed.</li><li><strong>PDO::FETCH_BOUND: </strong> Returns TRUE and assigns the values of the columns in your result set to the PHP variables to which they were bound.</li><li><strong>PDO::FETCH_CLASS: </strong> Returns a new instance of the specified class.</li><li><strong>PDO::FETCH_OBJ: </strong> Returns an anonymous object, with property names that correspond to the columns.</li></ul><p>One problem with the code above is that we aren&#39;t providing any feedback, if no results are returned. Let&#39;s fix that:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">$stmt-&gt;execute(array(\'id\' =&gt; $id));\n# Get array containing all of the result rows\n$result = $stmt-&gt;fetchAll();\n# If one or more rows were returned...\nif ( count($result) ) {\n    foreach($result as $row) {\n        print_r($row);\n    }\n} else {\n    echo &quot;No rows returned.&quot;;\n}\n</pre><p>At this point, our full code should look like so:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n  $id = 5;\n  try {\n    $conn = new PDO(\'mysql:host=localhost;dbname=someDatabase\', $username, $password);\n    $stmt = $conn-&gt;prepare(\'SELECT * FROM myTable WHERE id = :id\');\n    $stmt-&gt;execute(array(\'id\' =&gt; $id));\n    $result = $stmt-&gt;fetchAll();\n    if ( count($result) ) {\n      foreach($result as $row) {\n        print_r($row);\n      }\n    } else {\n      echo &quot;No rows returned.&quot;;\n    }\n  } catch(PDOException $e) {\n      echo \'ERROR: \' . $e-&gt;getMessage();\n  }\n</pre><h3>Multiple Executions</h3><p>The PDO extension becomes particularly powerful when executing the same SQL query multiple times, but with different parameters.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\ntry {\n  $conn = new PDO(\'mysql:host=localhost;dbname=someDatabase\', $username, $password);\n  $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  # Prepare the query ONCE\n  $stmt = $conn-&gt;prepare(\'INSERT INTO someTable VALUES(:name)\');\n  $stmt-&gt;bindParam(\':name\', $name);\n  # First insertion\n  $name = \'Keith\';\n  $stmt-&gt;execute();\n  # Second insertion\n  $name = \'Steven\';\n  $stmt-&gt;execute();\n} catch(PDOException $e) {\n  echo $e-&gt;getMessage();\n}\n</pre><p>Once the query has been prepared, it can be executed multiple times, with different parameters. The code above will insert two rows into the database: one with a name of &#8220;Kevin,&#8221; and the other, &#8220;Steven.&#8221;</p><hr\n/><h2>CRUD</h2><p>Now that you have the basic process in place, let&#8217;s quickly review the various CRUD tasks. As you&#8217;ll find, the required code for each is virtually identical.</p><h3>Create (Insert)</h3><pre class=\"brush: php; title: ; notranslate\" title=\"\">\ntry {\n  $pdo = new PDO(\'mysql:host=localhost;dbname=someDatabase\', $username, $password);\n  $pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  $stmt = $pdo-&gt;prepare(\'INSERT INTO someTable VALUES(:name)\');\n  $stmt-&gt;execute(array(\n    \':name\' =&gt; \'Justin Bieber\'\n  ));\n  # Affected Rows?\n  echo $stmt-&gt;rowCount(); // 1\n} catch(PDOException $e) {\n  echo \'Error: \' . $e-&gt;getMessage();\n</pre><h3>Update</h3><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$id = 5;\n$name = &quot;Joe the Plumber&quot;;\ntry {\n  $pdo = new PDO(\'mysql:host=localhost;dbname=someDatabase\', $username, $password);\n  $pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  $stmt = $pdo-&gt;prepare(\'UPDATE someTable SET name = :name WHERE id = :id\');\n  $stmt-&gt;execute(array(\n    \':id\'   =&gt; $id,\n    \':name\' =&gt; $name\n  ));\n  echo $stmt-&gt;rowCount(); // 1\n} catch(PDOException $e) {\n  echo \'Error: \' . $e-&gt;getMessage();\n}\n</pre><h3>Delete</h3><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n$id = 5; // From a form or something similar\ntry {\n  $pdo = new PDO(\'mysql:host=localhost;dbname=someDatabase\', $username, $password);\n  $pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  $stmt = $pdo-&gt;prepare(\'DELETE FROM someTable WHERE id = :id\');\n  $stmt-&gt;bindParam(\':id\', $id); // this time, we\'ll use the bindParam method\n  $stmt-&gt;execute();\n  echo $stmt-&gt;rowCount(); // 1\n} catch(PDOException $e) {\n  echo \'Error: \' . $e-&gt;getMessage();\n}\n</pre><h3>Object Mapping</h3><p>One of the neatest aspects of PDO (mysqli, as well) is that it gives us the ability to map the query results to a class instance, or object. Here&#8217;s an example:</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\nclass User {\n  public $first_name;\n  public $last_name;\n  public function full_name()\n  {\n    return $this-&gt;first_name . \' \' . $this-&gt;last_name;\n  }\n}\ntry {\n  $pdo = new PDO(\'mysql:host=localhost;dbname=someDatabase\', $username, $password);\n  $pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n  $result = $pdo-&gt;query(\'SELECT * FROM someTable\');\n  # Map results to object\n  $result-&gt;setFetchMode(PDO::FETCH_CLASS, \'User\');\n  while($user = $result-&gt;fetch()) {\n    # Call our custom full_name method\n    echo $user-&gt;full_name();\n  }\n} catch(PDOException $e) {\n  echo \'Error: \' . $e-&gt;getMessage();\n}\n</pre><hr\n/><h2>Closing Thoughts</h2><p>Bottom line: if you&#8217;re still using that old <code>mysql</code> API for connecting to your databases, stop. Though it hasn&#8217;t yet been deprecated, in terms of education and <a\nhref=\"http://news.php.net/php.internals/53799\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'news.php.net\']);\">documentation</a>, it might as well be. Your code will be significantly more secure and streamlined if you adopt the PDO extension.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(46,3,1,1358049686,NULL,' PHP Fundamentals: New Premium Course ','So you’ve learned the basics – HTML and CSS – and are now ready to dig into building your own dynamic websites. Congratulations for getting this far; now it’s time for the fun part! In my new Tuts+ Premium course, I’ll teach you, from scratch, how to use PHP; we’ll also, naturally, have to learn a bit of MySQL in the process!(Continue)','So you’ve learned the basics – HTML and CSS – and are now ready to dig into building your own dynamic websites. Congratulations for getting this far; now it’s time for the fun part! In my new Tuts+ Premium course, I’ll teach you, from scratch, how to use PHP; we’ll also, naturally, have to learn a bit of MySQL in the process!(Continue)',1,0,'php-fundamentals-new-premium-course',190,0,'http://tutsplus.s3.amazonaws.com/tutspremium/courses_$folder$/PHPFundamentals/200x200.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25263\'), post_id: 25263, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>So you’ve learned the basics – <a\nhref=\"http://tutsplus.com/course/30-days-to-learn-html-and-css/\" >HTML</a> and <a\nhref=\"http://tutsplus.com/course/css3-essentials/\" >CSS</a> – and are now ready to dig into building your own dynamic websites. Congratulations for getting this far; now it’s time for the fun part! In my new <a\nhref=\"tutsplus.com/course/php-fundamentals/\">Tuts+ Premium course</a>, I’ll teach you, from scratch, how to use PHP; we’ll also, naturally, have to learn a bit of MySQL in the process!</p><p><span\nid=\"more-25263\"></span></p><hr\n/><h2>A Live Course</h2><p>Please note that this is <a\nhref=\"http://tutsplus.com/course/php-fundamentals/\" >a live course</a>. This means that, each day during the work week, return to the site to view a new episode! This way, if you&#8217;ve been meaning to dig into PHP, you can learn one day at a time. While the first week will be free to all, the remainder of the course will be exclusive to our <a\nhref=\"http://tutsplus.com/take-the-tour/\" >Premium members</a>.</p><blockquote><p>If you have any questions, you can always jump over to the <a\nhref=\"http://tutsplus.com/forums/\" >forums</a>, and I&#8217;ll be glad to help!</p></blockquote><hr\n/><h2>Tuts+ Premium</h2><p><a\nstyle=\"float: right; margin-left: 20px;\" href=\"http://tutsplus.com/take-the-tour/\" ><img\nsrc=\"http://tutsplus.s3.amazonaws.com/banners/250x250.jpg\"   style=\"width: 200px;\"></a>The recently re-launched <a\nhref=\"http://tutsplus.com\" >Tuts+ Premium</a> is a service that provides top-tier training in a variety of creative fields. Whether you prefer <a\nhref=\"http://tutsplus.com/ebook/getting-good-with-javascript-2/\" >books</a>, <a\nhref=\"http://tutsplus.com/course/wordpress-plugin-development-essentials/\" >visual training</a>, or <a\nhref=\"http://tutsplus.com/tutorial/a-guide-to-custom-theming-jquery-ui-widgets/\" >in depth tutorials</a>, we have you covered.</p><p>While we unfortunately can&#8217;t afford to provide the service for free, it&#8217;s only $19 a month &#8211; less than you&#8217;d spend on dinner.</p><h3>On the Near Horizon</h3><ul><li>Cleaner Code With CoffeeScript<li>Understanding Backbone in .NET<li>Programming Fundamentals<li>What&#8217;s New in PHP<li>JavaScript Fundamentals 201<li>Test-Driven Development in Ruby<li>Laravel Essentials</ul><p>I hope you&#8217;ll consider <a\nhref=\"http://tutsplus.com\" >checking it out</a>! In addition to learning a huge variety of new skills, it&#8217;s also a fantastic way to say thank you to Nettuts+, if we&#8217;ve been lucky enough to help you at some point in your career.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(47,3,1,1358049687,NULL,' How to Super-Scale Magento in the Cloud ','This tutorial will help you prepare a Magento install for high traffic, better load times, and simpler ongoing site management. Ready?(Continue)','This tutorial will help you prepare a Magento install for high traffic, better load times, and simpler ongoing site management. Ready?(Continue)',1,0,'how-to-super-scale-magento-in-the-cloud',127,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-magento.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"https://github.com/pagodabox/magento-install-basic/tarball/tutorial\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-25037\'), post_id: 25037, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>This tutorial will help you prepare a <a\nhref=\"http://www.magentocommerce.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.magentocommerce.com\']);\">Magento</a> install for high traffic, better load times, and simpler ongoing site management. Ready?</p><p><span\nid=\"more-25037\"></span></p><hr\n/><h2>Requirements</h2><p>You can <a\ntarget=\"_blank\" href=\"https://github.com/pagodabox/magento-install-basic/tarball/tutorial\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">download the finished code</a> for this tutorial, or launch the &#8220;magento-basic&#8221; Quickstart from your Pagoda Box account to test a working site.</p><ul><li>A Pagoda Box Account (free)</li><li>A functional local <a\ntarget=\"_blank\" href=\"http://www.magentocommerce.com/product/community-edition\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.magentocommerce.com\']);\">Magento Install</a></li><li>Local Development Software (<a\ntarget=\"_blank\" href=\"http://www.mamp.info\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.mamp.info\']);\">MAMP</a> or <a\ntarget=\"_blank\" href=\"http://www.wampserver.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.wampserver.com\']);\">WAMP</a>)</li><li><a\ntarget=\"_blank\" href=\"http://git-scm.com/download\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'git-scm.com\']);\">Git</a> Installed (Can use SFTP)</li><li>The Pagoda Terminal Client Installed</li></ul><blockquote><p>Fair Warning: This tutorial may change your life. <a\nhref=\"http://pagodabox.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'pagodabox.com\']);\">Pagoda Box</a> is not traditional hosting. The teachings in this article will not only help scale Magento, but it also lays the groundwork for a progressive development-to-production workflow.</p></blockquote><hr\n/><h2> <span>Step 1:</span> Set Up Git Locally (SFTP will work as an alternate)</h2><blockquote><p>Note: If you already use Git, you can skip this section. If not, the guide <a\ntarget=\"_blank\" href=\"http://help.pagodabox.com/customer/portal/articles/202225-setting-up-git\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'help.pagodabox.com\']);\"> Setting Up Git</a> provides specific instructions for creating an SSH Key, as well as links for downloading and installing Git (also below).</p></blockquote><p>While it is possible to use just <a\ntarget=\"_blank\" href=\"http://help.pagodabox.com/customer/portal/articles/401507\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'help.pagodabox.com\']);\">SFTP</a> on Pagoda Box, the officially recommended (and most efficient) workflow integrates Git into your daily development. Git enables features like collaboration, uniform code distribution, deploys, deploy history and rolling back code. While most of these features are available to FTP users, using Git makes integration seamless.</p><p>If you want to fully take advantage of Pagoda Box, <a\ntarget=\"_blank\" href=\"http://git-scm.com/download\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'git-scm.com\']);\">download Git</a>, and <a\ntarget=\"_blank\" href=\"http://git-scm.com/book/ch1-3.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'git-scm.com\']);\">Learn the Basics</a>. Depending on your operating system, set up may vary slightly. Regardless of your OS, the commands are identical once Git is installed.</p><p>Using Git to manage collaboration and version control may involve a brief learning curve. However, there are generally only three commands we&#8217;ll use on an ongoing basis to commit changes locally, then deploy to Pagoda Box:</p><ul><li><code>git add . </code> &#8211; Adds local files to your repository</li><li><code>git commit -m \"some message about what you\'ve done\"</code> &#8211; Commits your changes</li><li><code>git push pagoda --all</code> &#8211; Pushes changes to Pagoda Box Repository (auto-deployed by default)</li></ul><p>We&#8217;ll use these later.</p><hr\n/><h2> <span>Step 2:</span> Install the Pagoda Box Terminal Client</h2><pre name=\"code\" class=\"php\">\n                             *\n                           /   \\\n                         /       \\\n                     +_/ / / | \\ \\ \\_+\n                         ||*|||*||\n                         |+||*||+|\n                         /       \\\n                     +_/ / / | \\ \\ \\_+\n                         ||*|||*||\n                         |+||*||+|\n     ____   _    ____  ___  ____    _    ____   _____  __\n    |  _ \\ / \\  / ___|/ _ \\|  _ \\  / \\  | __ ) / _ \\ \\/ /\n    | |_) / _ \\| |  _| | | | | | |/ _ \\ |  _ \\| | | \\  /\n    |  __/ ___ \\ |_| | |_| | |_| / ___ \\| |_) | |_| /  \\\n    |_| /_/   \\_\\____|\\___/|____/_/   \\_\\____/ \\___/_/\\_\\\n       Welcome To Your Pagoda Box Terminal Client.\n      -----------------------------------------------\n          -----------------------------------------\n             ---------------------------------\n                          Enjoy.</pre><p>Pagoda Box provides a Terminal Client that lets you clone, create, deploy, destroy, rename and rollback an application from the command line. Later in this tutorial, we&#8217;ll use the client to create a secure tunnel to the live Magento database with Sequel Pro (the process is similar for other database managment tools like HeidiSQL).</p><p>The Pagoda Box Terminal Client is a rubygem, so installation is pretty simple. First off, Ruby needs to be installed. Installation is different for each operating system.</p><ul><li>Mac &#8211; Ruby and RubyGems come pre-installed on Mac OSX. As long as you are running v10.5 or later, you should be good to go.</li><li>Windows &#8211; There are a couple of different ways to install Ruby in Windows. We recommend this <a\ntarget=\"_blank\" href=\"http://rubyinstaller.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'rubyinstaller.org\']);\">auto-installer</a>. If it doesn&#8217;t work for your set-up, a Google search will give you a pretty good list of installation walk-throughs.</li><li>Linux &#8211; Use your preferred package manager to download the Ruby package. For Ubuntu users, the gem is available through <a\ntarget=\"_blank\" href=\"http://www.getdeb.net/software/Pagoda%20Terminal%20Client\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.getdeb.net\']);\">getdeb.net.</a></li></ul><h3>Install and Verify Terminal Client</h3><p>Once Ruby is installed, simply run the following command to install the Pagoda RubyGem:</p><p> On Mac or Linux:</p><pre name=\"code\" class=\"php\">\n$ sudo gem install pagoda\n</pre><p> On Windows:</p><pre name=\"code\" class=\"php\">\n$ gem install pagoda\n</pre><p>Then, to verify you have the Pagoda Gem installed properly, run:</p><pre name=\"code\" class=\"php\">\n$ pagoda list\n</pre><p>If this is the first time you&#8217;ve used the Gem, it will ask for your Pagoda Box Username and Password. After you&#8217;ve entered those, expect to see a list of your Pagoda Box applications. If you haven&#8217;t created any applications, the list will be blank.</p><p>If you get an error, it&#8217;s most likely invalid credentials. You can verify or change which credentials the gem uses by editing the file located on your local computer at <code>~/.pagodarc</code>. Make sure to exactly match the credentials you use in your Pagoda Box account. (Note: this is a hidden file, so you&#8217;ll need to enable hidden files or open via the terminal. Also note that the file stores your credentials twice, so edit both if needed.)</p><hr\n/><h2> <span>Step 3:</span> Install Magento Locally</h2><blockquote><p>Note: Skip this step if you already have a working local Magento install.</p></blockquote><p>If you don&#8217;t have it already, ensure you are using local webserver and database management software. There are several options available, depending on your operating system. A common option for Mac is <a\ntarget=\"_blank\" href=\"http://www.mamp.info\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.mamp.info\']);\">MAMP</a>, or <a\ntarget=\"_blank\" href=\"http://www.wampserver.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.wampserver.com\']);\">WAMP</a> for Windows. Both are free and easily set up.</p><p>Once your local development environment is set up, go ahead and <a\ntarget=\"_blank\" href=\"http://www.magentocommerce.com/download\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.magentocommerce.com\']);\">download Magento,</a> then follow the <a\ntarget=\"_blank\" href=\"http://www.magentocommerce.com/wiki/1_-_installation_and_configuration/magento_installation_guide\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.magentocommerce.com\']);\">official guide</a> to install Magento locally.</p><p>Feel free to use Magento&#8217;s auto install script to set up the application in your local environment. However, due to Pagoda Box&#8217;s distributed cloud architecture, the script will not install Magento directly in your production environment. The Pagoda Box workflow and architecture requires you to make code modifications locally, commit, then deploy to production. This workflow accommodates collaboration and development > staging > production best practices.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-magento-installation.jpg\" border=\"0\" /></div><hr\n/><h2> <span>Step 4:</span> Configure PHP Using a Boxfile</h2><blockquote><p>Note: On Pagoda Box, a YAML <a\ntarget=\"_blank\" href=\"http://help.pagodabox.com/customer/portal/articles/175475-understanding-the-boxfile\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'help.pagodabox.com\']);\">Boxfile</a> can be included in the root of your code repository. While the Boxfile is optional, it does provide advanced features, like manipulating your hosted environment on each deploy. We&#8217;ll use the Boxfile extensively in this Tutorial to simplify tasks, and to make the respository reusable on Pagoda Box.</p></blockquote><p>Create a file named &#8220;Boxfile&#8221; in the root of your local Magento installation, then copy the following into your Boxfile (explanation below):</p><pre name=\"code\" class=\"php\">\nweb1:\n  name: mag-app\n  shared_writable_dirs:\n    - media\n    - var\n  php_version: 5.3.8\n  php_extensions:\n    - pdo_mysql\n    - mysql\n    - simplexml\n    - mcrypt\n    - hash\n    - gd\n    - dom\n    - iconv\n    - curl\n    - soap\n</pre><h3>Create / Name the Web Cluster</h3><p>This Boxfile serves several purposes. First, it creates a <code>web1</code> component, then names it <code>mag-app</code>.</p><h3>Shared Writable Directories</h3><p>Second, the Boxfile identifies <code>media</code> and <code>var</code> as shared writable directories. This allows users to upload images, video, and other media to a distributed Magento cloud site without instances writing themselves out of sync.</p><p>When a directory is marked as writable, the contents are no longer deployed to Pagoda Box from your local repository. Any time local files need to be deployed to these directories, they must be manually copied via SSH or SFTP. You may also <a\ntarget=\"_blank\" href=\"http://help.pagodabox.com/customer/portal/articles/175418-shared-writable-storage-management\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'help.pagodabox.com\']);\">use SSH/SFTP to transfer files</a> from Pagoda Box to your local machine as needed.</p><h3>PHP Version and Extensions</h3><p>The Boxfile also declares which PHP version and extensions will be included in your web instances as they deploy. This way, both the environment and the application are versioned together, so rolling back to a previous deploy includes the correct PHP version and extensions. The list of PHP extensions in this Boxfile was taken from Magento&#8217;s official system requirements.</p><blockquote><p>Tip: Once Git is installed in your local environment, use the <code>.gitignore</code> file to ignore the writable directories specified in your Boxfile. Identifying these directories inside the <code>.gitignore</code> file helps reduce the size of your repo, and your deploy time. In addition to the writable directories, you can also add the <code>downloader</code> directory to the <code>.gitignore</code> file, since it&#8217;s used locally, and not on Pagoda Box.</p></blockquote><p>Once you&#8217;ve installed Git and the Terminal Client, configured the Boxfile and finalized your local source code, you&#8217;re ready to launch on Pagoda Box.</p><hr\n/><h2> <span>Step 5:</span> Create a Free Pagoda Box Account</h2><p>If you don&#8217;t already have one, create a free <a\ntarget=\"_blank\" href=\"http://www.pagodabox.com/account/register\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.pagodabox.com\']);\">Pagoda Box account.</a> You will not need to enter a credit card to install Magento for testing.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-box-register.jpg\" border=\"0\" /></div><p>If you have not already done so, follow this guide to <a\ntarget=\"_blank\" href=\"http://help.pagodabox.com/customer/portal/articles/200927#add-ssh-pagoda\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'help.pagodabox.com\']);\">Add an SSH Key</a> in your Pagoda Box Admin panel. The guide will provide specific instructions for setting up an SSH Key on either Mac or Windows.</p><hr\n/><h2> <span>Step 6:</span> Upload Magento to Pagoda Box</h2><p>Once you&#8217;ve created a Pagoda Box account and set up an SSH Key, go to the Home Page in your new account and click the &#8220;New Application&#8221; button to create a new application.</p><blockquote><p>Note: This tutorial names our sample application &#8220;magento&#8221;. The app name is also used for the Pagoda Box repository, the subdomain for the freshly deployed application (magento.pagodabox.com), and the username in SFTP mode. Replace &#8220;magento&#8221; with &#8220;your-app-name-here&#8221; where appropriate throughout the remainder of this tutorial.</p></blockquote><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-new-app-button.jpg\" border=\"0\" /></div><h3>Upload to an Empty Repo (recommended for this tutorial)</h3><p>Next, choose from the 3 options to launch your Magento site. Since you already have a customized version of Magento locally, select &#8216;Empty Repo&#8217; to deploy using SFTP or Git, name your application, and click &#8220;Launch Application&#8221;.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-empty-repo.jpg\" border=\"0\" /></div><p>You&#8217;ll be asked to select your preferred deployment method (Git or SFTP). Click on your preference, and follow the instrutions on-screen.</p><h3>Git Option</h3><p>You can copy and paste the on-screen instructions from the Pagoda Box dashboard to your terminal after using Terminal to change directory (cd) to the root of your project.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-choice.png\" border=\"0\" /></div><p>The pasted commands do the following:</p><ul><li><code>git init </code> &#8211; Initialize your Magento project as a Git Repository</li><li><code>git add . </code> &#8211; Add all files from the project to the repo</li><li><code>git commit -m \'your commit message\' </code> &#8211; Commit files with a message that allows you to quickly scan deploy history in the future, in case you need to revert or modify changes</li><li><code>git remote add pagoda git@git.pagodabox.com:magento.git </code> &#8211; Add Pagoda Box as a remote (the specific git url for your application appears on both this screen, and in your app dashboard</li><li><code>git push pagoda --all </code> &#8211; Push your local code to the Pagoda Box remote repository. As long as you&#8217;re on the &#8220;master&#8221; branch (which is the default), Pagoda Box will automatically deploy your code, and carry out the instructions we set in the Boxfile. Auto-deploy can be turned off in the Admin dashboard, or configured to deploy automatically from a Git branch other than Master.</li></ul><h3>SFTP Option</h3><p>If you opted for SFTP, Pagoda Box will guide you through establishing credentials and a password. Connect via SFTP to Pagoda Box, and upload your Magento source code in the <code>code</code> directory.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-sftp.jpg\" border=\"0\" /></div><hr\n/><h2> <span>Step 7:</span> Create a Database</h2><p>There are two ways to create a database on Pagoda Box. Each has benefits, explained below:</p><h3>Create a DB in the Boxfile</h3><p>The Boxfile will automatically create a database component on deploy, as long as that component (<code>db1</code>, <code>db2</code>, etc.) doesn&#8217;t already exist. Declaring the database in the Boxfile saves a bit of time now, and makes deploying multiple Magento sites from a standardized code base much simpler in the future. (Note: Only cloud DBs can be deployed from the Boxfile. If you need a larger, dedicated or redundant database, see the Dashboard option later in this Step.) Add the following to your Boxfile:</p><pre name=\"code\" class=\"php\">\ndb1:\n  name: mag-db\n  type: mysql\n  </pre><p>Your updated Boxfile should look like this:</p><pre name=\"code\" class=\"php\">\nweb1:\n  name: mag-app\n  shared_writable_dirs:\n    - media\n    - var\n  php_version: 5.3.8\n  php_extensions:\n    - pdo_mysql\n    - mysql\n    - simplexml\n    - mcrypt\n    - hash\n    - gd\n    - dom\n    - iconv\n    - curl\n    - soap\ndb1:\n  name: mag-db\n  type: mysql\n  </pre><p>Then commit changes to the updated file and push changes to Pagoda Box:</p><pre name=\"code\" class=\"php\">\n$ git commit -m \"pagoda config\"\n$ git push pagoda --all\n</pre><h3>Alternate: Create a DB in the Dashboard</h3><p>You can also create a database from the Pagoda Box Dashboard. This is where you add a larger, dedicated or redundant database.</p><p>First, click &#8220;Add Database&#8221; in the Dashboard.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-add-db.jpg\" border=\"0\" /></div><p>Pagoda Box will step through a series of screens to configure your database, depending on your choices. If you&#8217;ve chosen the Dedicated option, you will be asked to size your database as follows:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-dedicated-db.jpg\" border=\"0\" /></div><p>Cloud databases usually deploy within minutes. If you chosen Dedicated, don&#8217;t get impatient. You may wait for up to 90 minutes for a big server to be provisioned to your specifications.</p><hr\n/><h2> <span>Step 8:</span> Configure DB Credentials for Production</h2><p>Your database automatically generates credentials when it&#8217;s created on Pagoda Box. We&#8217;ll use those credentials to configure Magento in production.</p><p>However, since Magento will be used in both local environments and in production, we need to supply different database credentials for each. We&#8217;ll use Deploy Hooks in the Boxfile to simplify this process by executing scripts or commands during deploy.</p><p>In the case of Magento, we&#8217;ll swap the <code>local.xml</code> file upon deploy. That way, without manually switching credentials, the <code>app/etc/local.xml</code> file will automatically have local database credentials in development, but production database credentials on Pagoda Box.</p><h3>Create a local.xml for Production</h3><p>First, create a directory named <code>pagoda</code> in root, then copy Magento&#8217;s <code>app/etc/local.xml</code> to the new directory.</p><p>Next, edit <code>local.xml</code> to include Pagoda Box database credentials from your account dashboard. Note that Pagoda Box uses 3 levels of authentication, so that even if your credentials are compromised, other users cannot access your database.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-db-credentials.jpg\" border=\"0\" /></div><h3>Swap local.xml Configs on Deploy</h3><p>Add the following into your Boxfile, under the <code>web1</code> section to create the Deploy Hook.</p><pre name=\"code\" class=\"php\">\nafter_build:\n  \"mv pagoda/local.xml app/etc/local.xml\"\n</pre><p>Your updated Boxfile should look like this:</p><pre name=\"code\" class=\"php\">\nweb1:\n  name: mag-app\n  shared_writable_dirs:\n    - media\n    - var\n  php_version: 5.3.8\n  php_extensions:\n    - pdo_mysql\n    - mysql\n    - simplexml\n    - mcrypt\n    - hash\n    - gd\n    - dom\n    - iconv\n    - curl\n    - soap\n  after_build:\n  - \"mv pagoda/local.xml app/etc/local.xml\"\ndb1:\n  name: mag-db\n  type: mysql\n  </pre><p>Then commit changes and push to Pagoda Box:</p><pre name=\"code\" class=\"php\">\n$ git add .\n$ git commit -m \"pagoda config\"\n$ git push pagoda --all\n</pre><hr\n/><h2> <span>Step 9:</span> Migrate the Database</h2><blockquote><p>With the same tools you use to manage a local database, you can securely manage a live database on Pagoda Box. We&#8217;ll use Sequel Pro for this example, but the process is similar for tools like HeidiSQL.</p></blockquote><h3>Export Your Local DB</h3><p>When the Magento install script ran locally, it created several tables in the local database. Those tables need to be migrated to production.</p><p>First, export your local database using your database manager: File > Export.</p><p>Now choose a location, and Save the export.</p><h3>Establish a Secure DB Connection</h3><p>Now establish a database tunnel. Using the Pagoda Box Terminal Client, specify the app whose database you are trying to access, and the ID of the database component (e.g. db1), as in this example:</p><pre name=\"code\" class=\"php\">\n$ pagoda -a magento tunnel -c db1\n--OR--\n$ pagoda --app=magento tunnel --component=db1\n</pre><p>Once the tunnel is established, use Sequel Pro (or similar) to connect to the database using the Host and Port provided by the Pagoda Terminal Client&#8230;</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-host-port.png\" border=\"0\" /></div><p>And the username and password in your Pagoda database credentials. These were automatically created with your database, and may be found in the Pagoda Box Dashboard under the database component (see example in Step 8).</p><h3>Import and Update the Production DB</h3><p>Next, import your database into production using Sequel Pro (or similar): File > Import. Now select the database export file, and Open.</p><p>Finally, since we ran the install script locally, it&#8217;s necessary to adjust the base url directly in the database before browsing the site. While you are still connected to the Pagoda Box database in Sequel Pro, navigate/filter to the <code>core_config_data</code> table and edit the value for the following paths:</p><pre name=\"code\" class=\"php\">\nweb/unsecure/base_url\nweb/secure/base_url\n</pre></p><p>The values for each should look something like this:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-sequel-pro.jpg\" border=\"0\" /></div><hr\n/><h2> <span>Step 10:</span> Configure Mail</h2><p>To protect your IPs from being flagged as spam, Pagoda Box uses the SMTP mail protocol to send email via third party mail provider SMTP credentials. In English, that means you need a company (like Gmail) that provides mail services.</p><p>Regardless of which mail provider you choose, enter account credentials from that provider in your Pagoda Box dashboard. It should look something like this:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-mail-dash.jpg\" border=\"0\" /></div><hr\n/><h2> <span>Step 11:</span> Cron Jobs (Optional)</h2><p>A few recurring tasks in Magento (e.g. sending newsletters, log cleaning, customer notifications, etc.) need to happen periodically. The <code>cron.php</code> file located in Magento&#8217;s root will trigger these tasks. We&#8217;ll set up a Cron Job in the Pagoda Box admin panel to run <code>cron.php</code> every 15 minutes. (Note: To configure Magento specific tasks, see their <a\ntarget=\"_blank\" href=\"http://www.magentocommerce.com/wiki/1_-_installation_and_configuration/how_to_setup_a_cron_job#unixbsdlinux\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.magentocommerce.com\']);\">Official Guide.</a>)</p><h3>Cron Jobs in the Boxfile</h3><p>Cron Jobs can be added or updated via the Boxfile, then deployed to Pagoda Box. To schedule a task at 15 minute intervals, add the following to your Boxfile under the <code>web1:</code> component (change the &#8220;magento&#8221; to point to your own app name / subdomain):</p><pre name=\"code\" class=\"php\">\n  cron:\n    - \"*/15 * * * *\": \"curl -s -o /dev/null http://magento.pagodabox.com/cron.php\"\n    </pre><p>Your updated Boxfile should look like this:</p><pre name=\"code\" class=\"php\">\nweb1:\n  name: mag-app\n  shared_writable_dirs:\n    - media\n    - var\n  php_version: 5.3.8\n  php_extensions:\n    - pdo_mysql\n    - mysql\n    - simplexml\n    - mcrypt\n    - hash\n    - gd\n    - dom\n    - iconv\n    - curl\n    - soap\n  after_build:\n  - \"mv pagoda/local.xml app/etc/local.xml\"\ncron:\n    - \"*/15 * * * *\": \"curl -s -o /dev/null http://magento.pagodabox.com/cron.php\"\ndb1:\n  name: mag-db\n  type: mysql\n  </pre><h3>Alternate: Cron Jobs in the Dashboard</h3><p>In the Pagoda Box admin panel under the Cron tab, add the following (change the &#8220;magento&#8221; to point to your own app name):</p><p>Command: <code>curl -s -o /dev/null http://magento.pagodabox.com/cron.php</code></p><p>Schedule: <code>*/15 * * * *</code></p><p>It should look like this:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/2038_magentoScale/pagoda-cron-dash.jpg\" border=\"0\" /></div><hr\n/><h2> <span>Part 2 &#8211; Optimization:</span> Redis, Scaling &#038; Benchmarking</h2><p>You&#8217;ve already gotten the heavy lifting out of the way. Your Magento application is scalable, and changes are easily deployed across all instances with <code>$ git push pagoda --all</code>.</p><p>In the follow-up article, we&#8217;ll optimize Magento, add a Redis cache, SSL and Domain aliases, then scale the application for benchmarking and production. See you soon!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(48,3,1,1358049688,NULL,' Aspect-Oriented Programming in PHP ','There’s a new player in town, and he brought new toys: The PHP World welcomes FLOW3, an enterprise application framework written and backed by the community of the TYPO3 CMS. FLOW3 can be used as standalone full-stack framework for your applications. It’s interesting, because it introduces some concepts of software development that haven’t been adapted to PHP before.(Continue)','There’s a new player in town, and he brought new toys: The PHP World welcomes FLOW3, an enterprise application framework written and backed by the community of the TYPO3 CMS. FLOW3 can be used as standalone full-stack framework for your applications. It’s interesting, because it introduces some concepts of software development that haven’t been adapted to PHP before.(Continue)',1,0,'aspect-oriented-programming-in-php',136,0,'http://d2o0t5hpnwv4c1.cloudfront.net/2036_aspectOrientedProgramming/flow-3-aspect-oriented-programming.jpg','',1),(49,3,1,1358049688,NULL,' Advanced CodeIgniter Profiling With XHProf ','There are a number of ways to profile and monitor the performance of PHP code in a development environment, but once it’s been let loose on a production server its extremely difficult to know what’s going on when your app is getting accessed by your users.In March 2009, Facebook released XHProf, a function level profiler that allows you to identify bottlenecks in your application.  And it runs on a production server with little overhead.','There are a number of ways to profile and monitor the performance of PHP code in a development environment, but once it’s been let loose on a production server its extremely difficult to know what’s going on when your app is getting accessed by your users.In March 2009, Facebook released XHProf, a function level profiler that allows you to identify bottlenecks in your application.  And it runs on a production server with little overhead.',1,0,'advanced-codeigniter-profiling-with-xhprof',125,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1043_ajax_codeigniter/preview.png',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-24802\'), post_id: 24802, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>There are a number of ways to profile and monitor the performance of PHP code in a development environment, but once it&#8217;s been let loose on a production server its extremely difficult to know what&#8217;s going on when your app is getting accessed by your users.</p><p>In March 2009, <a\nhref=\"http://www.facebook.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.facebook.com\']);\">Facebook</a> released <a\nhref=\"https://github.com/facebook/xhprof\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">XHProf</a>, a function level profiler that allows you to identify bottlenecks in your application.  And it runs on a production server with little overhead.</p><p><span\nid=\"more-24802\"></span></p><p>XHProf will provide you with a hierarchical profile of the functions your application calls, allowing you to follow the chain of events that lead up to resource intensive code running.  You&#8217;ll be able to see exactly how much wall time (the actual time elapsed), CPU time and memory your application uses.</p><p>This tutorial will help you get XHProf installed on your server, and integrated with your CodeIgniter application via hooks so that you can start profiling your application, in a production environment, straight away.  Everything you see here was written for Ubuntu 10.04 &#8211; the latest LTS release at the time of writing.</p><hr\n/><h2>Installation</h2><p>Installation of XHProf can be done via PECL &#8211; that said, I&#8217;ve never been able to get the PECL version installed on Ubuntu easily so its easier to install from source. Start off by downloading the latest revision from the XHProf GitHub account.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n  	wget https://github.com/facebook/xhprof/tarball/master -O xhprof.tar.gz\n</pre><p>Extract the tarball and switch into the extracted folder &#8211; this will change depending on the latest revision available from GitHub.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n	tar -xvf xhprof.tar.gz\n	cd facebook-xhprof-bc8ef04/extension\n</pre><p>Then install as normal.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n	phpize\n	./configure\n	make\n	sudo make install\n</pre><p>Finally, we need to tell PHP to load the extension.  Create a config file for it &#8211; I do this for cleanliness but you can always drop it at the end of your main <code>php.ini</code>.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n	sudo nano /etc/php5/conf.d/xhprof.ini\n</pre><p>And paste in the following:</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n	extension=xhprof.so\n	xhprof.output_dir=&quot;/var/tmp/xhprof&quot;\n</pre><p>This tells XHProf to use the directory at <code>/var/tmp/xhprof</code> to save its run data.</p><p>You can check whether XHProf is installed correctly by entering <code>php -m</code> at the command line and checking that the module is available.  Remember to restart Apache so that it gets picked up in your PHP web applications as well.</p><p>If you want to render the callgraph images you&#8217;ll also need the graphviz package.  This can be obtained from apt.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n	sudo apt-get install graphviz\n</pre><hr\n/><h2>Integration With CodeIgniter</h2><p>XHProf can be used on an ad-hoc basis to evaluate small pieces of code, but it&#8217;s at its most useful when you let it profile the full page.  First of all, you&#8217;ll need to move the XHProf code into your web applications root so that it has access to the appropriate classes.</p><pre class=\"brush: bash; title: ; notranslate\" title=\"\">\n	sudo mv ~/facebook-xhprof-bc8ef04  /var/www/xhprof\n</pre><p>CodeIgniter has an excellent mechanism for injecting custom code into the execution of a page called &#8216;Hooks&#8217;.  This is what we&#8217;ll use to integrate XHProf with your application.  Enable hooks in your <code>application/config/config.php</code> file.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n	$config[\'enable_hooks\'] = true;\n</pre><p>Then specify your hooks in <code>application/config/hooks.php</code></p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n	$hook[\'pre_controller\'] = array(\n	  \'class\'  =&gt; \'XHProf\',\n	  \'function\' =&gt; \'XHProf_Start\',\n	  \'filename\' =&gt; \'xhprof.php\',\n	  \'filepath\' =&gt; \'hooks\',\n	  \'params\' =&gt; array()\n	);\n	$hook[\'post_controller\'] = array(\n		\'class\'  =&gt; \'XHProf\',\n		\'function\' =&gt; \'XHProf_End\',\n		\'filename\' =&gt; \'xhprof.php\',\n		\'filepath\' =&gt; \'hooks\',\n		\'params\' =&gt; array()\n	);\n</pre><p>Then create the hook that will load XHProf into your application at <code>application/hooks/xhprof.php</code>.  This class will provide the necessary minimum to get XHProf collecting data from your application.</p><pre class=\"brush: php; title: ; notranslate\" title=\"\">\n	class XHProf {\n		private $XHProfPath = \'xhprof/\';\n		private $applicationName = \'my_application\';\n		private $sampleSize = 1;\n		private static $enabled = false;\n		public function XHProf_Start() {\n			if (mt_rand(1, $this-&gt;sampleSize) == 1) {\n				include_once $this-&gt;XHProfPath . \'xhprof_lib/utils/xhprof_lib.php\';\n				include_once $this-&gt;XHProfPath . \'xhprof_lib/utils/xhprof_runs.php\';\n				xhprof_enable(XHPROF_FLAGS_NO_BUILTINS);\n				self::$enabled = true;\n			}\n		}\n		public function XHProf_End() {\n			if (self::$enabled) {\n				$XHProfData = xhprof_disable();\n				$XHProfRuns = new XHProfRuns_Default();\n				$XHProfRuns-&gt;save_run($XHProfData, $this-&gt;applicationName);\n			}\n		}\n	}\n</pre><p>There&#8217;s a few thing to point out in this code sample.</p><ul><li>The <code>$XHProfPath</code> variable should point to the directory you installed XHProf in.  In our example, we put it in the root of the web application, but you might be storing it somewhere central and symlinking it to multiple applications.</li><li>The <code>$applicationName</code> variable lets you specify the name of the application using XHProf.  This could be especially important in an environment where you&#8217;re running multiple applications on the same server.</li><li>The <code>$sampleSize</code> variable lets you specify a factor for how often XHProf profiles a run.  In a production environment where you&#8217;re receiving thousands of hits, it&#8217;s probably not worth storing every single run.  You can increase this variable to get a random sample of runs.  Changing it to 10, for example, will give you a report from one in every 10 visits to your application.</li></ul><p>The <code>xhprof_enable()</code> function can accept any combination of 3 constants.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><ul><li><code>XHPROF_FLAGS_NO_BUILTINS</code> &#8211; skip all internal php functions.  Adding this means you&#8217;ll only see time spent in functions that you have written (or are part of CodeIgniter)</li><li><code>XHPROF_FLAGS_CPU</code> &#8211; add additional CPU profiling information</li><li><code>XHPROF_FLAGS_MEMORY</code> &#8211; add additional memory profiling information</li></ul><p>Combine them using <code>+</code>.  eg. <code>xhprof_enable(XHPROF_FLAGS_NO_BUILTINS + XHPROF_FLAGS_MEMORY);</code></p><p>After running through your application a couple of times, point your browser at the XHProf application directory <code>http://localhost/xhprof/xhprof_html/index.php</code> &#8211; adjusting for the address of your development server &#8211; and you&#8217;ll see a list of your last application runs with the newest at the top.  Select one of the runs to see it&#8217;s profiling information.</p><hr\n/><h2>Evaluating the Results</h2><p>Storing all this profiling information is all very well and good but knowing how to evaluate it is the key to optimising your application.</p><p>The &#8216;Overall Summary&#8217; is a good place to start &#8211; it&#8217;ll show you:</p><ul><li>Total inclusive wall time &#8211; how long (in microseconds) it took for you page to be generated</li><li>Total memory use &#8211; the total memory used by this run of your application</li><li>Total peak memory use &#8211; the maximum amount of memory that was used by your application</li><li>Number of function calls &#8211; the number of functions that were called by your application</li></ul><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1153_ciprofiling/summary.png\" alt=\"Run summary\" title=\"\" /></div><p>These number should give you an overall base to start from and provide headline numbers to compare against when you start optimisation.</p><p>Below the summary is the detailed run report  The bottlenecks in your application should be fairly obvious &#8211; they&#8217;re the function calls at the top of the report.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1153_ciprofiling/wall.png\" alt=\"Wall report\" title=\"\" /></div><p>The most resource intensive things you&#8217;re likely to come across will be those that make calls to external services or your database. By default, the results are sorted by &#8216;inclusive wall time&#8217;.  This shows the functions that took the longest to run by the cumulative total of them and the functions they call.  Ordering by &#8216;exclusive wall time&#8217; allows you to see the specific functions that are using the most amount of resource.</p><p>Clicking a function allows you to drill down into more detail about that function and the functions it called.  From there, it&#8217;ll be easier to see exactly what your long running function was doing and spot any issues.</p><p>When debugging your CodeIgniter application, one of the best places to start is the controller being called for your page &#8211; <code>Welcome::index</code> in the example.  From there you can easily see the breakdown of where the controller spent most of it&#8217;s time.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1153_ciprofiling/controller.png\" alt=\"Controller summary\" title=\"\" /></div><h3>Callgraph</h3><p>XHProf can generate a call graph view that provides a visual clue to the main path of your application. The main bottlenecks are highlighted in red to show where most your resources are being spent.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1153_ciprofiling/callgraph.png\" alt=\"Callgraph\" title=\"\" /></div><h3>Comparing Runs</h3><p>XHProf provides a mechanism for comparing multiple runs &#8211; this will allow you to make a number of optimisations and then see how they&#8217;ve affected your application.</p><p><code>http://localhost/xhprof/xhprof_html/index.php?run1=run_id_1>&#038;run2=run_id_2&#038;source=applicationName</code></p><p>Note: <code>run_id_1</code> and <code>run_id_2</code> should be the ids from some of your previous runs and <code>applicationName</code> should be the name you specified when setting up the hook earlier.</p><p>This will provide the same information you see in a regular report but provide percentage statistics on any changes since the first run, allowing you to easily see if your optimisations are moving your performance in the right direction.</p><h3>Aggregating Runs</h3><p>Sometimes a single run might not be enough to evaluate exactly what&#8217;s going on.  Pages my work slightly differently depending on the query string or user input or there might be differences in caching mechanisms.</p><p>Aggregating a number of runs allows you to combine a number of runs and receive an average of the resources consumed.</p><p><code>http://localhost/xhprof/xhprof_html/index.php?run=run_id,run_id,run_id&#038;source=applicationName</code></p><p>Note: <code>run_id</code> should be the ids from some of your previous runs and <code>applicationName</code> should be the name you specified when setting up the hook earlier.</p><hr\n/><h2>Summary</h2><p>You should now have XHProf up and running in your CodeIgniter application and be able to see exactly where your code is spending most of it&#8217;s time.  Optimisation can be a difficult task.  Sometimes it&#8217;s not as simple as reimplementing a function, or adding a layer of caching.  Thinking about why you&#8217;re doing something and what the exact effect that is having on your application is just as important.</p><p>So let me know if you have any questions in the comments below. Thank you so much for reading!<div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(50,3,1,1358049689,NULL,' AJAX User Table Management in CodeIgniter: New on Premium ','Learn how to use CodeIgniter and the jQuery library to create a slick, AJAX-utilizing management page for a typical “Users” table, and discover some of the awesome features of jQuery UI.(Continue)','Learn how to use CodeIgniter and the jQuery library to create a slick, AJAX-utilizing management page for a typical “Users” table, and discover some of the awesome features of jQuery UI.(Continue)',1,0,'ajax-user-table-management-in-codeigniter-new-on-premium',143,0,'http://tutsplus.s3.amazonaws.com/tutspremium/web-development/164_ajaxTable/img/preview.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-24518\'), post_id: 24518, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Learn how to use CodeIgniter and the jQuery library to create a slick, AJAX-utilizing management page for a typical “Users” table, and discover some of the awesome features of jQuery UI.<br\n/> <span\nid=\"more-24518\"></span></p><p> This <a\nhref=\"http://tutsplus.com/tutorial/ajax-user-table-management-with-codeigniter-and-jquery/\" >Tuts+ Premium</a> exclusive tutorial will guide you through the process of creating a slick, AJAX-utilizing management page for a typical &#8220;Users&#8221; table in a MySQL database. We will cover a range of topics, in both CodeIgniter and jQuery, including creating and using Models, Controllers and Views, the <a\nhref=\"http://codeigniter.com/user_guide/libraries/form_validation.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'codeigniter.com\']);\">Form Validation</a> class, and <a\nhref=\"http://jqueryui.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jqueryui.com\']);\">jQuery UI</a>.</p><div\nclass=tutorial_image> <img\nsrc=http://tutsplus.s3.amazonaws.com/tutspremium/web-development/164_ajaxTable/img/step6_table.png alt=\"preview\"></div><div\nclass=tutorial_image> <img\nsrc=http://tutsplus.s3.amazonaws.com/tutspremium/web-development/164_ajaxTable/img/step8_nice_btns.png alt=\"preview\"></div><hr\n/><h2>Tuts+ Premium</h2><p><a\nstyle=\"float: right; margin-left: 20px;\" href=\"http://tutsplus.com/take-the-tour/\" ><img\nsrc=\"http://tutsplus.s3.amazonaws.com/banners/250x250.jpg\"></a>The recently re-launched <a\nhref=\"http://tutsplus.com\" >Tuts+ Premium</a> is a service that provides top-tier training in a variety of creative fields. Whether you prefer <a\nhref=\"http://tutsplus.com/ebook/getting-good-with-javascript-2/\" >books</a>, <a\nhref=\"http://tutsplus.com/course/wordpress-plugin-development-essentials/\" >visual training</a>, or <a\nhref=\"http://tutsplus.com/tutorial/a-guide-to-custom-theming-jquery-ui-widgets/\" >in depth tutorials</a>, we have you covered. While we unfortunately can&#8217;t afford to provide the service for free, it&#8217;s only $19 a month &#8211; less than you&#8217;d spend on dinner.</p><p>I hope you&#8217;ll consider <a\nhref=\"http://tutsplus.com\" >checking it out</a>! In addition to learning a huge variety of new skills, it&#8217;s also a fantastic way to say thank you to Nettuts+.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(51,4,1,1358049705,NULL,' Sass vs. LESS vs. Stylus: Preprocessor Shootout ','Wielding the true power of a CSS preprocessor is an adventure.  There are countless languages, syntaxes, and features, all ready for use right now.In this article, we will be covering the various features and benefits of using three different preprocessors—Sass, LESS, and Stylus.','Wielding the true power of a CSS preprocessor is an adventure.  There are countless languages, syntaxes, and features, all ready for use right now.In this article, we will be covering the various features and benefits of using three different preprocessors—Sass, LESS, and Stylus.',1,0,'sass-vs-less-vs-stylus-a-preprocessor-shootout',121,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1144_preprocshootout/200x200.png','',1),(52,4,1,1358049706,NULL,' An in Depth Analysis of HTML5 Multimedia and Accessibility ','In this tutorial, you’ll learn how HTML5 helps to provide you with several ways of presenting your media content to users. As a result, you’ll increase the availability of your media to users with different needs and requirements, making it more accessible.This tutorial comes courtesy of the recently released HTML5 Multimedia book.','In this tutorial, you’ll learn how HTML5 helps to provide you with several ways of presenting your media content to users. As a result, you’ll increase the availability of your media to users with different needs and requirements, making it more accessible.This tutorial comes courtesy of the recently released HTML5 Multimedia book.',1,0,'an-in-depth-overview-of-html5-multimedia-and-accessibility',324,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/html5-media-and-accessibility.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-23531\'), post_id: 23531, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this tutorial, you’ll learn how HTML5 helps to provide you with several ways of presenting your media content to users. As a result, you’ll increase the availability of your media to users with different<br\n/> needs and requirements, making it more accessible.</p><p>This tutorial comes courtesy of the recently released <a\nhref=\"http://enva.to/yW2AgQ\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'enva.to\']);\">HTML5 Multimedia</a> book.</p><p><span\nid=\"more-23531\"></span></p><hr\n/><h2>Media and Potential Accessibility Issues</h2><blockquote\nclass=\"pullquote\"><p> I’d strongly encourage you to think about making your content accessible&#8230;</p></blockquote><p>When thinking about the users who will be attempting to view your media content, you might make a number of assumptions:</p><ul><li>Users will view your content on a desktop, laptop, tablet, or phone.</li><li>Users will have some way of listening to the audio of your content, be it via<br\n/> headphones or speakers.</li><li>Users will be able to understand the language in which you deliver the media.</li><li>Users will be able to successfully download and play your media.</li></ul><p>All are fairly reasonable assumptions to make and most likely cover the vast majority of users who will want to access your content. You may be happy with your content being accessible to these users only; after all, majority rules, doesn’t it?</p><p>Well, I’d strongly encourage you to think about making your content accessible to users who do not fall into the category of the assumptions just listed. Who are these viewers? They include:</p><ul><li>Users who have a sensory impairment that prevents them from listening to your content’s audio or viewing video.<li> Users who don’t understand the language the media is delivered in.<li> Users who use devices such as screen readers and/or use keyboards to access<br\n/> media content on the web.</p><li> Users who can’t successfully hear or view your content due to the environment they are in or because of device limitations.</p></ul><p>Because most media content will usually include some audio, not being able to hear or understand the audio it contains is quite a showstopper in comprehending the content’s message and information.</p><p>Equally, being able to access the content through a device such as a screen reader but then not being able to actually use it due to the media controls not being properly set up (e.g., for keyboard access) would annoy any user.</p><p>You’ll explore the accessibility of media controls later in this tutorial. You’ll also take a look at what HTML5 brings to the table in an attempt to address the issue of users being unable to see, hear, or understand your media content. But first, let’s take a quick look at what led to HTML5’s attempt to confront this accessibility problem — SRT.</p><hr\n/><h2>A Brief Look at SRT</h2><blockquote\nclass=\"pullquote\"><p> SRT is an existing file format for containing video subtitles and their timings.</p></blockquote><p>SRT is an existing file format for containing video subtitles and their timings. An SRT file is often produced automatically using a Windows program called <a\nhref=\"http://zuggy.wz.cz\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'zuggy.wz.cz\']);\">SubRip</a>, which uses optical character recognition (OCR) to obtain the subtitles from the specified video source.</p><p>The SubRip file format is a basic text file with the .srt file extension that follows a basic format:</p><ul><li>Subtitle number</li><li>hh:mm:ss,msmsms &mdash;> hh:mm:ss,msmsms</li><li>Subtitle Text (one or more lines)</li><li>…</li></ul><p>Each subtitle set begins with a unique subtitle number, followed by the start and end timestamps of the timing the subtitle represents on a separate line, which is then followed by one or more lines of subtitle text. Each subsequent subtitle set is separated by a blank line. The timestamp format hh:mm:ss,msmsms specifies the hours, minutes, seconds, and milliseconds of the time in question. Note that the millisecond separator is a comma.</p><p>An example of such a file follows:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">1\n00:00:10,500 --&gt; 00:00:13,000\nElephant’s Dream\n2\n00:00:15,000 --&gt; 00:00:18,000\nAt the left we can see...\n</pre><p>The SRT file format is quite popular and is often the format that video subtitles are released in. This file format isn’t currently used as part of HTML5’s attempt to tackle accessibility, although it was to begin with but has now been extended and given a new name, WebVTT.</p><hr\n/><h2>Introducing WEBVTT</h2><p>WebVTT (Web Video Text Tracks) is a file format that is intended for marking up external text tracks. It was initially part of the WHATWG and the W3C HTML5 specifications, and was an extension of SRT called WebSRT (Web Subtitle Resource Tracks). But the W3C was concerned that HTML5 should be independent of any chosen captioning format, and therefore, it was removed from that specification.</p><blockquote><p>Note: even though the SRT in WebSRT stands for subtitle resource Tracks, the original acronym didn’t stand for anything and merely reflected<br\n/> the file extension used. WebSRT is a “backronym&#8221;; subtitle resource Tracks was shoe-horned into the three letters to actually mean something.</p></blockquote><p>The presence of WebVTT is currently one major difference between the WHATWG HTML5 specification and the W3C specification.</p><p>Although no browser currently supports WebVTT, major browser vendors have indicated that they will implement support for WebVTT in the future. This indication has led to the creation of a <a\nhref=\"www.%20w3.org/2011/05/google-webvtt-charter.html\">WebVTT Working Group Charter</a> at the W3C, whose mission is to:</p><blockquote><p>“create a W3C specification starting from the WHATWG WebVTT (Web Video Text Tracks) language and solidify it through the creation of a WebVTT test suite and through the creation of semantic mappings of other subtitle formats to or from WebVTT in order to facilitate browser implementation and market adoption.&#8221;</p></blockquote><p>This promise of vendor support will hopefully in turn eventually lead to a formal standardization of the WebVTT specification at the W3C. With browser support and that of the W3C, you can be sure that WebVTT is here to stay and is destined become the de facto method of marking up text tracks within audio and video content on the web.</p><p>So what is the WebVTT file format and how can it help you make your content accessible? Read on.</p><h3>What Can WebVTT Do?</h3><blockquote\nclass=\"pullquote\"><p> The WebVTT format also allows you to provide a textual description of the video content</p></blockquote><p>You use the WebVTT file format to define WebVTT files. One of the main uses of these files is to provide subtitles to video content, although the format of the file doesn’t indicate what its contents are used for.</p><p>The WebVTT format also allows you to provide a textual description of the video content, which can then be used by various accessibility devices (which might read the descriptions out loud) to describe the content of the video to those who cannot see it. You inform the browser of the WebVTT file and of its purpose using HTML markup; you’ll find out how this is done later in this tutorial, when you read about the track element.</p><p>Let’s take a look at the WebVTT file format in more detail.</p><h4>WEBVTT File Format</h4><p>A WebVTT file is a simple text file with the .vtt extension that needs to follow a specified format, which you will look at shortly. The file must be encoded as UTF-8 and labeled with the MIME type text/tt. The line terminators within the file can only be \\r (a carriage return), \\n (a new line), or \\r\\n (a carriage return followed by a new line). It must also contain a WebVTT file body, which consists of the following:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">WEBVTT\n[cue]\n[cue]\n...\n</pre><p>The WEBVTT string at the top identifies the contents as a WebVTT file and must then be followed by at least one blank line, which is then followed by any number of cues, each of which is separated by a blank line.</p><p>A cue is defined as:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">[idstring]\n[hh:]mm:ss.msmsms --&gt; [hh:]mm:ss.msmsms [cue settings]\nTextLine1\nTextLine2\n...\n</pre><p><code>idstring</code> is a unique identifier within the file that identifies the cue. It can consist of one or more characters that do not contain the substring “&mdash;>&#8221; or any of the line terminators mentioned earlier. [hh:]mm:ss.msmsms &mdash;> [hh:]mm:ss.msmsms indicates the timestamp range within the video file that the cue is specified for. [hh:]mm:ss.msmsms is a simple timestamp; the hour portion is optional (depending on the length of the video in question of course).</p><blockquote><p>Note: The millisecond separators are full stops, not commas as in SRT.</p></blockquote><p>cue settings allow you to specify the positioning of the text; you’ll read more about them in a moment.</p><p>TextLineN is the actual text in the video file that the timestamp range in the cue represents. The content can be all in one line or presented in any number of separate lines. Any lines will be contained within the cue until a blank line is encountered, which indicates the end of that particular cue.</p><p>Let’s take a quick look at a sample WebVTT file containing two timestamp ranges:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">WEBVTT\n1\n00:00:10.500 --&gt; 00:00:13.000\nElephant’s Dream\n2\n00:00:15.000 --&gt; 00:00:18.000\nAt the left we can see...\n</pre><p>This example defines two cues: The first one starts 10 seconds and 500 milliseconds into the video and ends at 13 seconds in, and the second one starts 15 seconds into the video and ends 3 seconds later. The subtitle text for each cue is given below its timestamp.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/dream.jpg\"><br\n/> <em>How a subtitle cue might appear on a video with no cue settings specified.</em></div><p>Using cues is relatively straightforward, and you can see how the file can be built up with a number of cues to cover the length of an entire video. You can also specify some settings on a per-cue basis. These affect the positioning of the cue on the related video. You can have a number of setting values, and a cue setting can contain one or more values, each one separated by a space. The various settings are listed below:</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/tableOne.jpg\"></div><p>If no cue settings are specified, the text will align to the middle, at the bottom of the video frame.</p><p>Let’s add some of these settings to the example used earlier:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">WEBVTT\n1\n00:00:10.500 --&gt; 00:00:13.000 A:start Elephant’s Dream\n2\n00:00:15.000 --&gt; 00:00:18.000 A:end L:10% At the left we can see...\n</pre><p>The text in the first cue will be aligned to the left of the video (much the same way as the CSS rule text-align:left works).</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/aStart.jpg\"><br\n/> <em>How a cue subtitle might appear on a video with a cue setting of A:start.</em></div><p>The second cue has two settings applied to it: The text will be aligned to the end of the line (similar to text-align:right in CSS) and will be placed on the line 10 percent down from the top of the video.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/aEnd.jpg\" alt=\"\" /><br\n/> <em>How a cue subtitle might appear on a video with a cue setting of A:end L:10%.</em></div></p><p>In addition to specifying cue settings for controlling the positioning and alignment of cue text, there are also a number of inline styles that you can apply to the text. These look and act the same as HTML elements. They contain a start and an end tag, and the formatting is applied to the text in between.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/table2.jpg\" alt=\"\" /></div></p><p>Let’s extend the example further and use some of the text tags to format the cue text:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">WEBVTT\n1\n00:00:00.000 --&gt; 00:00:14.999 Elephant’s &lt;c.dream&gt;Dream&lt;/c&gt;\n2\n00:00:15.000 --&gt; 00:00:18.000 A:end L:10% At the &lt;i&gt;left&lt;/i&gt; we can &lt;b&gt;see&lt;/b&gt; ...\n3\n00:00:18.167 --&gt; 00:00:22.000\nAt the right &lt;00:00:20.000&gt;we can see the...\n</pre><p>With the first cue, a class name of “dream&#8221; has been added, a style for which you can define within your HTML file in the same way as you’d create any CSS style rules.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/84.jpg\" alt=\"\" /><br\n/> <em>Video-cue text with a style defined using CSS and the WebVTT c text tag.</em></div></p><blockquote><p>Note: any CSS class names that you might use within your WebVTT subtitle definitions can be defined in the containing HTML file or an external css file in the same way as you’d specify any other css classes.</p></blockquote><p>The second cue now has tags that will display the word “left&#8221; in italics and “see&#8221; in bold type.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/85.jpg\" alt=\"\" /><br\n/> <em>Video-cue text that uses the i and b text tags.</em></div></p><p>An extra cue is added to this example to show how the timestamp is used to display the text “karaoke style.&#8221; When the cue starts, the words “At the right&#8221; will appear first. Then the text “we can see&hellip;&#8221; will be displayed at the appropriate time- stamp (Figure 8.6).</p><blockquote><p>Note: if you want the characters &amp;, <, and > to appear in the text of a video cue, you need to escape them with <code>&amp;amp;</code> <code>&amp;lt;</code> and <code>&amp;gt;</code> respectively.</p></blockquote><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/86.jpg\" alt=\"\" /><br\n/> <em>This video-cue text shows the text in stages.</em></div></p><h3>WEBVTT Future Developments</h3><p>It’s worth noting that because the WEBVTT file format is relatively new to the specification and with the recent creation of the WEBVTT Working Group Charter, additions to the specification are likely.</p><blockquote><p>If you want to keep abreast of any changes to this specification, keep an eye on the <a\nhref=\"www.w3.org/2011/05/google-webvtt%20-charter.html\">Working Group Charter’s site</a> and the blog of <a\nhref=\"http://blog.gingertech.net\" >Silvia Pfeiffer</a> who is currently editor of the Working Group Charter. Silvia also blogs regularly about HtML5-related accessibility topics.</p></blockquote><p>You can see how the complete narrative in a video could be added to a WebVTT text file with formatting and styling.</p><p>But how do you connect a WebVTT file with a particular video? This is where the new HTML5 track element steps in.</p><hr\n/><h2>The Track Element</h2><p>The track element is one of the new HTML5 elements. Its purpose is to allow external text tracks to be specified for media elements, such as audio and video. The track element does not represent anything on its own and must be used in conjunction with, and as a child of, a media element.<br\n/> The track element takes a number of attributes, which are listed below:</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/table83.jpg\" alt=\"\" /></div></p><p>The following example shows how a track element might be used in connection with a video to provide subtitles:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;video controls&gt;\n    &lt;source src=&quot;video-file.mp4&quot; type=&quot;video/mp4&quot;&gt;\n    &lt;source src=&quot;video-file.webm&quot; type=&quot;video/webm&quot;&gt;\n    &lt;track src=&quot;en.vtt&quot; kind=&quot;subtitles&quot; srclang=&quot;en&quot; label=&quot;English p subtitles&quot;&gt;\n&lt;/video&gt;\n</pre><p>The track element in the example specifies that the en.vtt file contains English subtitles (as the label says) in the English language (srclang is set to en) of kind: subtitles for the surrounding video element. From this example, you can see just how easy it would be to add a second subtitles file that might be in a different language:</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;video controls&gt;\n    &lt;source src=&quot;video-file.mp4&quot; type=&quot;video/mp4&quot;&gt;\n    &lt;source src=&quot;video-file.webm&quot; type=&quot;video/webm&quot;&gt;\n    &lt;track src=&quot;en.vtt&quot; kind=&quot;subtitles&quot; srclang=&quot;en&quot; label=&quot;English p subtitles&quot; default&gt;\n    &lt;track src=&quot;de.vtt&quot; kind=&quot;subtitles&quot; srclang=&quot;de&quot; label=&quot;German p subtitles&quot;&gt;\n&lt;/video&gt;\n</pre><p>Here, another track definition has been added, pointing to a de.vtt file that contains German subtitles; <code>srclang</code> is set to <code>de</code>.</p><p>Notice that the default attribute has been added to the English subtitles definition, marking it as the default subtitle set to be used if the user doesn’t specifically select one.</p><p>If you wanted to extend the example further and add a chapter listing in each language (English and German), you would do the following:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;video controls&gt;\n    &lt;source src=&quot;video-file.mp4&quot; type=&quot;video/mp4&quot;&gt;\n    &lt;source src=&quot;video-file.webm&quot; type=&quot;video/webm&quot;&gt;\n    &lt;track src=&quot;en.vtt&quot; kind=&quot;subtitles&quot; srclang=&quot;en&quot; label=&quot;English p subtitles&quot; default&gt;\n    &lt;track src=&quot;de.vtt&quot; kind=&quot;subtitles&quot; srclang=&quot;de&quot; label=&quot;German p subtitles&quot;&gt;\n    &lt;track src=&quot;ch-en.vtt&quot; kind=&quot;chapters&quot; srclang=&quot;en&quot; p label=&quot;English chapter listing&quot; default&gt;\n    &lt;track src=&quot;ch-de.vtt&quot; kind=&quot;chapters&quot; srclang=&quot;de&quot; p label=&quot;German chapter listing&quot;&gt;\n&lt;/video&gt;\n</pre><p>Once the various WebVTT files have been created with the content you want, it’s a fairly simple process to add them to the appropriate video.</p><p>Everything you’ve just read about WebVTT all sounds quite promising; however, even though some browsers support the track element to some degree, currently no browser supports the WebVTT file format.</p><blockquote><p>Note: at the time of this writing, the Webkit (which chrome and safari are based on) nightly build has some support for WebVTT.<br\n/> All is not lost, though, because several JavaScript libraries are available that enable you to start using WebVTT today.</p></blockquote><h2>Using WEBVTT and the Track Element Now</h2><p>A small number of browsers support the track element to some degree. The latest WebKit browsers (e.g., Chrome 12 and Safari 5.0.5) recognize the element but don’t do anything with it. The current version of Firefox (5) parses the element but also does nothing with it. Although these browsers are taking steps in the right direction, they don’t really help you implement WebVTT now.</p><blockquote><p> <strong>Update (March 19th, 2012): </strong>Internet Explorer 10 Preview 4 and upwards parses the track element and renders WebVTT. It&#8217;s also now available in Google Chrome (needs to be enabled via chrome:flags &#8211; &#8220;Enable <code>&lt;track></code> element&#8221;).</p></blockquote><p>Fortunately, four JavaScript libraries allow you to define the track element with WebVTT files in your web document that will deliver what you want:</p><ul><li><strong><a\nhref=\"http://www.delphiki.com/html5/playr\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.delphiki.com\']);\">J Playr</a></strong> &ndash;  Supports: subtitles, chapters, some cue settings Browsers: Opera, Chrome, Safari, Firefox</li><li><strong><a\nhref=\"http://dev.mennerich.name/showroom/html5_video\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'dev.mennerich.name\']);\">LeanBack Player</a></strong> &ndash;  Supports: subtitles<br\n/> Browsers: All major browsers with fallback to Flash if required</li><li><strong><a\nhref=\"https://github.com/cgiffard/Captionator \" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">Captionator</a></strong> &ndash;  Supports: subtitles, all cue settings Browsers: Opera, Chrome, Safari, Firefox, IE9</li><li><strong><a\nhref=\"http://mediaelementjs.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'mediaelementjs.com\']);\">MediaElementJS</a></strong> &ndash; Supports: subtitles (timing format uses SRT format)<br\n/> Browsers: All major browsers with fallback to Flash if required</li></ul><h3>SRT Support</h3><p>Although only a handful of JavaScript players support WEBVTT, a number of them support SRT subtitle files. those players that support WebVtt (Playr, LeanBack, Captionator, and MediaElementJS) also support SRT in addition to the following that provide support for SRT only:</p><ul><li><a\nhref=\"https://bitbucket.org/tagawa/jscaptions\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bitbucket.org\']);\">js_videosub</a></li><li><a\nhref=\"http://www.storiesinflight.com/js_videosub\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.storiesinflight.com\']);\">jscaptions</a></li><li><a\nhref=\"http://www.kaltura.org/project/HtML5_Video_Media_JavaScript_Library\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.kaltura.org\']);\">kaltura</a></li></ul><p>None of these libraries offer support for all the different values for the kind attribute of the track element: They only support the subtitle value (Playr also supports the chapter value). Because subtitles are one of the most important values, it’s a good start. This support also allows you to begin adding subtitles to your videos now and seeing them in action.</p><p>Let’s look at how you might use the Playr JavaScript library to add subtitles and chapters to a video.</p><h3>Playr Example</h3><p>To use Playr, you must first download it from the <a\nhref=\"https:// github.com/delphiki/Playr\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\' github.com\']);\">Playr download website</a>. Once downloaded, you need to include the Playr CSS file and JavaScript in your web document:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">&lt;link rel=&quot;stylesheet&quot; href=&quot;playr.css&quot; /&gt;\n&lt;script src=&quot;playr.js&quot;&gt;&lt;/script&gt;\n</pre><p>When defining your video, you simply add the CSS class “playr_video&#8221; to your video element, and Playr will automatically be used for that video.</p><p>A sample of Playr with a short animated film called Elephant’s Dream (© copyright 2006, Blender Foundation, Netherlands Media Art Institute, www.elephants dream.org) is available <a\nhref=\"www.html5multimedia.com\">here</a>.</p><p>The code used for this video is as follows:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;video class=&quot;playr_video&quot; preload=&quot;metadata&quot; controls p poster=&quot;elephants-dream.title.jpg&quot;&gt;\n   &lt;source src=&quot;elephants-dream-medium.mp4&quot; type=&quot;video/mp4&quot;&gt;\n   &lt;source src=&quot;elephants-dream-medium.webm&quot; type=&quot;video/webm&quot;&gt;\n   &lt;track label=&quot;English subtitles&quot; kind=&quot;subtitles&quot; srclang=&quot;en&quot; p src=&quot;elephants-dream-subtitles-en.vtt&quot; default&gt;\n   &lt;track label=&quot;German subtitles&quot; kind=&quot;subtitles&quot; srclang=&quot;de&quot; p src=&quot;elephants-dream-subtitles-de.vtt&quot;&gt;\n   &lt;track label=&quot;Chapters&quot; kind=&quot;chapters&quot; srclang=&quot;en&quot; p src=&quot;elephants-dream-chapters-en.vtt&quot;&gt;\n&lt;/video&gt;\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/87.jpg\" alt=\"\" /><br\n/> <em>The Playr video player with Elephant’s Dream.</em></div><p>Also, three track elements are used to point to English and German subtitles, and English chapters.</p><blockquote><p>Note: Playr currently doesn’t support multiple chapter files or the default attribute but will do so in a future release.</p></blockquote><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/88.jpg\" alt=\"\" /></p><div><em>Playr’s menu allows viewers to choose English and German subtitles plus chapters.</em></div></div><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/89.jpg\" alt=\"\" /></p><div><em>Subtitles have been placed 6 percent from the top (using L:6%) and bolded with <code>&lt;b></code>.</em></div></div><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/810.jpg\" alt=\"\" /></p><div><em>The same video with German subtitles chosen.</em></div></div><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/811.jpg\" alt=\"\" /></p><div><em>A sample of how chapter selection looks in Playr.</em></div></div><p>Playr is a handy video player, and its ability to display subtitles and chapters is very useful. Support for the other kinds of track element contents are planned, so like other available video players, it will keep on improving.</p><p>Another important part of making media content accessible are the controls. Next, you’ll learn how accessible the default players are and what can you do to make your own custom controls more accessible.<br\n/> ￼</p><hr\n/><h2>Media Controls and Accessibility</h2><blockquote\nclass=\"pullquote\"><p> It’s quite important for accessibility that the media controls can be accessed from the keyboard.</p></blockquote><p>As mentioned earlier, it’s quite important for accessibility that the media controls can be accessed from the keyboard. Browsers have their own set of controls for media elements, but how accessible are they from the keyboard? Unfortunately, at the moment, the answer is not very. Opera seems to be the only browser whose default control set is immediately accessible from the keyboard. You can easily tab from one control to the other, use the Return key to toggle the Play/Pause button, and use the arrow keys to control the seek bar and volume control.</p><p>So, if you want to make your media content fully accessible across all modern browsers, you need to implement your own custom controls.</p><h3>Improving the Accessibility of Custom Controls</h3><p>You’ve already used the HTML button element to implement nearly all of the controls. Using button elements immediately increases the accessibility of the controls because the button element is automatically accessible from the key- board. That fact alone makes the custom controls keyboard accessible. Because the controls are also listed in the same order as they appear on the player, their tab order is also pretty much in the required logical order. However, you might want to change the tab order of the progress bar and the Play/Pause button. Most likely, users would want to play the video first, so that button should be the first control that they can access.</p><p>You can specify the tab order of HTML controls using the <code>tabindex</code> attribute. The order specified by this attribute is the one that the browser will tell the key- board to follow. So you apply a <code>tabindex</code> of 1 to the Play/Pause button and 2 to the progress bar, and then apply subsequent tabindexes in the order in which they appear in the source:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;div id=&quot;controls&quot;&gt;\n    &lt;div id=&quot;progressBar&quot;&gt;&lt;span id=&quot;played&quot; tabindex=&quot;2&quot;&gt;&lt;/span&gt;&lt;/div&gt;\n    &lt;button id=&quot;playpause&quot; alt=&quot;play&quot; title=&quot;play&quot; tabindex=&quot;1&quot;&gt;play&lt;/button&gt;\n    &lt;button id=&quot;stop&quot; alt=&quot;stop&quot; title=&quot;stop&quot; tabindex=&quot;3&quot;&gt;stop&lt;/button&gt;\n    &lt;button id=&quot;rewind&quot; alt=&quot;rewind&quot; title=&quot;rewind&quot; tabindex=&quot;4&quot;&gt;&amp;laquo;&lt;/button&gt;\n    &lt;button id=&quot;ffwd&quot; alt=&quot;fast forward&quot; title=&quot;fast forward&quot; tabindex=&quot;5&quot;&gt;&amp;raquo;&lt;/button&gt;\n    &lt;button id=&quot;volumeDown&quot; alt=&quot;decrease volume&quot; title=&quot;-&quot; tabindex=&quot;6&quot;&gt;button&gt;\n    &lt;button id=&quot;volumeUp&quot; alt=&quot;increase volume&quot; title=&quot;+&quot; tabindex=&quot;7&quot;&gt;+&lt;/button&gt;\n    &lt;button id=&quot;mute&quot; alt=&quot;mute&quot; title=&quot;mute&quot; tabindex=&quot;8&quot;&gt;mute&lt;/button&gt;\n&lt;/div&gt;\n</pre><blockquote><p>In this code listing, the <code>onclick()</code> events have been omitted for brevity.</p></blockquote><h4>The Range Element</h4><blockquote><p>The range element would be ideal for use as a progress bar if support was better because it too automatically provides keyboard accessibility, and the seek bar would work via the keyboard (the up and down keys would toggle the seek when the element has focus) without any further requirements.</p></blockquote><p>Because the buttons provide keyboard accessibility automatically, all you need to tackle now is the progress bar, which uses a div and a span.<br\n/> You need to add an event listener for the <code>keypress</code> event, which fires when a key is pressed, and then act on it. You’re interested in just a key press on the progress bar, so the event is added to the progress bar only:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">var progressBar = document.getElementById(“progressBar&quot;);\nprogressBar.addEventListener(“keypress&quot;, function(e) {\n    checkKey(e.keyCode);\n}, false);\n</pre><p>The function that is called when a key press is detected is called <code>checkKey()</code> with a parameter indicating the numeric code of the key that was pressed:</p><pre class=\"brush: jscript; title: ; notranslate\" title=\"\">function checkKey(code) {\n    if (code == 38) { // up arrow key\n        video.currentTime += 0.5;\n    }\n    else if (code == 40) { // down arrow key\n        video.currentTime -= 0.5;\n    }\n}\n</pre><p>The <code>checkKey()</code> function simply checks the key code to see if it’s the up arrow key (code 38) or the down arrow key (code 40). Depending on which key it is, the video’s currentTime attribute is increased or decreased by 0.05 (an arbitrary time value, but it seems a good step to move the video forward or backward by).</p><p>And that’s it. The progress bar’s seek capabilities can now be accessed via the keyboard with the up and down arrow keys when it’s in focus. The end result renders your media custom controls a lot more accessible than they would have been.</p><hr\n/><h2>Wrapping Up</h2><p><a\nhref=\"http://enva.to/yW2AgQ\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'enva.to\']);\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1119_html5/book.jpg\" style=\"float: right; margin-left: 10px;\"></a></p><p>With regard to accessibility, HTML5 has advanced and expanded from its initial definition of the WebSRT file format to WebVTT. With browser vendors planning to support this format, a new W3C Working Group was formed with the intention of formalizing the WebVTT specification for browsers to start supporting. So hope- fully, browser support is only a matter of time.</p><p>Although native support is currently patchy, you can use existing JavaScript libraries to add subtitles to your videos now. These libraries will undoubtedly increase their functionality and capabilities in the future.</p><p>Overall, accessibility is a goal you should be thinking about when serving multimedia content to your users. The more users who can access your content the better, right?</p><p>Be sure to visit the <a\nhref=\"http://html5multimedia.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'html5multimedia.com\']);\">HTML5 Multimedia website</a>, or <a\nhref=\"http://enva.to/yW2AgQ\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'enva.to\']);\">buy the book</a> to learn more!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(53,4,1,1358049707,NULL,' Say Hello to Webkit Filters ','Earlier this month, a new specification, Filter Effects 1.0, was released. It presents some exciting new Photoshop-like effects that we can use in the browser. Even better, Webkit has already landed support (in the nightlies)!(Continue)','Earlier this month, a new specification, Filter Effects 1.0, was released. It presents some exciting new Photoshop-like effects that we can use in the browser. Even better, Webkit has already landed support (in the nightlies)!(Continue)',1,0,'say-hello-to-css3-filters',253,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1111_filters/css3-filters.jpg','',1),(54,4,1,1358049708,NULL,' Create a Sticky Note Effect in 5 Easy Steps with CSS3 and HTML5 ','Twice a month, we revisit some of our readers’ favorite posts from through out the history of Nettuts+. This tutorial was first published in August, 2010.In this tutorial, you’ll learn how to transform an HTML list into a wall of “sticky notes” that look and work like the following…','Twice a month, we revisit some of our readers’ favorite posts from through out the history of Nettuts+. This tutorial was first published in August, 2010.In this tutorial, you’ll learn how to transform an HTML list into a wall of “sticky notes” that look and work like the following…',1,0,'create-a-sticky-note-effect-in-5-easy-steps-with-css3-and-html5',226,0,'http://d2o0t5hpnwv4c1.cloudfront.net/771_sticky/sticky_notes.jpg','',1),(55,4,1,1358049708,NULL,' How to Inject Custom HTML and CSS into an iframe ','Ever been to a site like JSBin, where you can write HTML, CSS, and JavaScript, and then see the results in a panel to the right? An iframe is how we can accomplish this task. In today’s quick tip, I’ll show you how to inject HTML and CSS into an iframe.(Continue)','Ever been to a site like JSBin, where you can write HTML, CSS, and JavaScript, and then see the results in a panel to the right? An iframe is how we can accomplish this task. In today’s quick tip, I’ll show you how to inject HTML and CSS into an iframe.(Continue)',1,0,'how-to-inject-custom-html-and-css-into-an-iframe',172,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1089_iframe/iframe.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\"> <a\nhref=\"https://github.com/NETTUTS/Inject-HTML-and-CSS-into-iFrame/blob/master/iframe.html\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div><div\nclass=\"big_btn\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/1089_iframe/iframe/iframe.html\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-22826\'), post_id: 22826, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Ever been to a site like <a\nhref=\"http://jsbin.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">JSBin</a>, where you can write HTML, CSS, and JavaScript, and then see the results in a panel to the right? An <code>iframe</code> is how we can accomplish this task. In today&#8217;s quick tip, I&#8217;ll show you how to inject HTML and CSS into an <code>iframe</code>.</p><p><span\nid=\"more-22826\"></span></p><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"600\" height=\"375\" src=\"http://www.youtube.com/embed/MhODHoaats0?hd=1\" frameborder=\"0\" allowfullscreen></iframe></p><div><em>Select <strong>720p</strong> for optimal viewing. </em></div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(56,4,1,1358049709,NULL,' Quick Tip: The Awesome Details Element ','One of my favorite new HTML5 tags, which has only recently been integrated into Chrome (as of version 12), is the details element. I’ll show you to use it in today’s quick tip.(Continue)','One of my favorite new HTML5 tags, which has only recently been integrated into Chrome (as of version 12), is the details element. I’ll show you to use it in today’s quick tip.(Continue)',1,0,'quick-tip-the-awesome-details-element',103,0,'https://d2o0t5hpnwv4c1.cloudfront.net/1087_detials/html5-details-tag.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\"> <a\nhref=\"http://tinkerbin.com/4cTRbLfc\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div><div\nclass=\"big_btn\"> <a\nhref=\"http://tinkerbin.com/4cTRbLfc\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-22776\'), post_id: 22776, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>One of my favorite new HTML5 tags, which has only recently been integrated into Chrome (as of version 12), is the <code>details</code> element. I&#8217;ll show you to use it in today&#8217;s quick tip.</p><p><span\nid=\"more-22776\"></span></p><hr\n/><h2>What Does the <code>details</code> Tag Do?</h2><p>It essentially allows us to show and hide content with the click of a button. You&#8217;re surely familiar with this type of effect, but, up until now, it had always been achieved with JavaScript. Imagine a heading with an arrow next to it, and when you click on it, additional information below becomes visible. Clicking the arrow again hides the content. This sort of functionality is very common in FAQ pages.</p><blockquote><p>Here&#8217;s a <a\nhref=\"http://tinkerbin.com/cHRhR0cN\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'tinkerbin.com\']);\">two minute example</a> of this sort of effect. (Type <code>Control + Enter</code> to process the JavaScript.)</p></blockquote><p>The <code>details</code> element allows us to omit the JavaScript entirely. Or, better put, it eventually will. Browser support is still a bit sparse.</p><div\nclass=\"tutorial_image\"> <a\nhref=\"http://caniuse.com/#search=details\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'caniuse.com\']);\"><img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/1087_detials/detailsSupport.jpg\" alt=\"image\" title=\"\" /></a></div><hr\n/><h2>An Example</h2><p>So let&#8217;s dive in and learn how to use this new tag. We begin by creating a new <code>details</code> element.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;details&gt;\n&lt;/details&gt;\n</pre><p>Next, we need to give it a title, or <code>summary</code> of the content within.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;details&gt;\n	&lt;summary&gt; Who Goes to College? &lt;/summary&gt;\n&lt;/details&gt;\n</pre><p>By default, in browsers that understand the <code>details</code> element, everything within it &#8212; other than the <code>summary</code> tag &#8212; will be hidden. Let&#8217;s add a paragraph after the <code>summary</code>.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;details&gt;\n	&lt;summary&gt; Who Goes to College? &lt;/summary&gt;\n  &lt;p&gt; Your mom. &lt;/p&gt;\n&lt;/details&gt;\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/1087_detials/default.jpg\" alt=\"Default Display\" /></p><p>Go ahead and <a\nhref=\"http://tinkerbin.com/ToaxUYwI\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'tinkerbin.com\']);\">try the demo out</a> in Chrome 12 or higher (as of November 17th, 2011).</p></div><p>Okay, let&#8217;s do something a bit more practical. I want to display various Nettuts+ articles using the <code>details</code> element. We first create the markup for a single article.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;details&gt;\n   &lt;summary&gt;Dig Into Dojo&lt;/summary&gt;\n   &lt;img src=&quot;https://d2o0t5hpnwv4c1.cloudfront.net/1086_dojo/dojo.jpg&quot; alt=&quot;Dojo&quot; /&gt;\n   &lt;div&gt;\n      &lt;h3&gt; Dig into Dojo: DOM Basics &lt;/h3&gt;\n      &lt;p&gt;Maybe you saw that tweet: “jQuery is a gateway drug. It leads to full-on JavaScript usage.” Part of that addiction, I contend, is learning other JavaScript frameworks. And that’s what this four-part series on the incredible Dojo Toolkit is all about: taking you to the next level of your JavaScript addiction.\n     &lt;/p&gt;\n   &lt;/div&gt;\n&lt;/details&gt;\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/1087_detials/nostyle.jpg\" alt=\"image\" title=\"\" /></div><p>Next, we&#8217;ll give it just a touch of styling.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\nbody { font-family: sans-serif; }\ndetails {\n  overflow: hidden;\n  background: #e3e3e3;\n  margin-bottom: 10px;\n  display: block;\n}\ndetails summary {\n  cursor: pointer;\n  padding: 10px;\n}\ndetails div {\n  float: left;\n  width: 65%;\n}\ndetails div h3 { margin-top: 0; }\ndetails img {\n float: left;\n width: 200px;\n  padding: 0 30px 10px 10px;\n}\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/1087_detials/styled-1.jpg\" alt=\"image\" title=\"\" /></div><p>Please note that I&#8217;m showing you the <code>open</code> state for convenience, but, when the page loads, you&#8217;ll only see the <code>summary</code> text.</p><blockquote><p>If you&#8217;d prefer to be in this state by default, add the <code>open</code> attribute to the <code>details</code> element: <code>&lt;details open></code></p></blockquote><h3> Styling the Arrow</h3><p>It&#8217;s not quite as straight-forward to style the arrow itself as we might hope. Nonetheless, it is possible; the key is to use the <code>-webkit-details-marker</code> pseudo class.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\ndetails summary::-webkit-details-marker {\n  color: green;\n  font-size: 20px;\n}\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"https://d2o0t5hpnwv4c1.cloudfront.net/1087_detials/arrowStyle.jpg\" alt=\"Styling the arrow\" /></div><p>Should you need to use a custom icon, possibly the easiest solution is to hide the arrow (using the pseudo class above), and then either apply a background image to the <code>summary</code> element, or use the <code>:after</code> or <code>:before</code> pseudo elements.</p><p><a\nhref=\"http://tinkerbin.com/4cTRbLfc\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'tinkerbin.com\']);\">View the final project.</a></p><hr\n/><h2>Conclusion</h2><p>It&#8217;s certainly a simple effect, but it sure is nice to have such a common feature built-in. Until we can reliably use the <code>details</code> element across all browsers, you can use <a\nhref=\"https://github.com/manuelbieh/Details-Polyfill\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'github.com\']);\">this polyfill</a> to provide fallback support. One final note: at the time of this writing, there doesn&#8217;t seem to be a way to toggle the contents with a keyboard. This could potentially present some accessibility issues.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(57,4,1,1358049710,NULL,' Quick Tip: How to Keep the Count with CSS ',' Did you know that, with CSS, you can create a counter? This can be especially useful for instances where the count is purely needed for presentational purposes. I’ll show you how to use counter-increment in this useful quick tip.(Continue)',' Did you know that, with CSS, you can create a counter? This can be especially useful for instances where the count is purely needed for presentational purposes. I’ll show you how to use counter-increment in this useful quick tip.(Continue)',1,0,'quick-tip-how-to-keep-the-count-with-css',167,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1078_counterIncrement/counter-increment.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\"> <a\nhref=\"http://tinkerbin.com/hpyfxHbV\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div><div\nclass=\"big_btn\"> <a\nhref=\"http://tinkerbin.com/hpyfxHbV\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-22539\'), post_id: 22539, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p> Did you know that, with CSS, you can create a counter? This can be especially useful for instances where the count is purely needed for presentational purposes. I&#8217;ll show you how to use <code>counter-increment</code> in this useful quick tip.</p><p><span\nid=\"more-22539\"></span></p><hr\n/><h2>Screencast</h2><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"600\" height=\"376\" src=\"http://www.youtube.com/embed/Qc22JUDVaz8?hd=1\" frameborder=\"0\" allowfullscreen></iframe></p><div>Choose <strong>720p</strong> for the best picture.</div></div><hr\n/><h2>How Does it Work?</h2><p> It&#8217;s really quite simple. We&#8217;re not even talking CSS3 here; the <code>counter-increment</code> property has been around for a while now. It&#8217;s just that many of us aren&#8217;t familiar with it, or haven&#8217;t found a use for it.</p><p> We begin by applying the <code>counter-increment</code> property. Let&#8217;s imagine that we have a set of boxes, and each box should display a number that corresponds to the order that the box occurs it its sequence.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.box {\n  counter-increment: boxes;\n}\n</pre><blockquote><p>The <code>counter-increment</code> property can accept either one or two properties. The first is an <code>id</code> that you will later use to reference this specific counter. You may also pass a second parameter that refers to the increment. For example, instead of <em>1, 2, 3, 4</em>, you could switch to <em>5, 10, 15, 20</em> by applying: <code>counter-increment: boxes 5</code>.</p></blockquote><p> This code will now store a unique number for each element that has a <code>class</code> of <code>box</code>. But of course, we want to get this number on the page. Hopefully, we&#8217;ll, at some point in the future, be able to use the <code>content</code> property within standard selectors, but not quite yet. Instead, we&#8217;ll use pseudo elements to apply the content.</p><pre name=\"code\" class=\"css\">\n.box:after {\n  content: counter(boxes);\n}\n</pre><p> This will apply a unique number &#8211; again, based on the element&#8217;s order in the sequence &#8211; to the <code>.box</code> element. Should we need to reset this order back to <code>1</code> at some point, we could usethe <code>counter-reset: boxes</code> property.</p><hr\n/><h2>Why Do This, Again?</h2><p>Now, you still might be thinking: &#8220;Why would I ever use this?&#8221; There&#8217;s lots of situations when it might be handy. For example, consider a comments section of a blog. If you wanted to provide<br\n/> a number for each comment in the set &#8211; possibly slightly transparent &#8211; you could use this technique. The number isn&#8217;t vital to the markup, and is only used for presentation. In these cases, CSS<br\n/> counters will do the trick nicely!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(58,4,1,1358049712,NULL,' How to Create an HTML5 Microdata Powered Resume ','In May 2009, Google introduced Rich Snippets, a small block of information displayed in Google’s search engine results to make it easier for users to decide which pages are relevant to their search. In June 2011, Google announced the creation of Schema.org, a new initiative from Google, Bing and Yahoo! that aims to improve the web by creating structured data markup schema. This tutorial demonstrates how to create an online resume that incorporates Schema.org Microdata. The tutorial also includes instructions on how to use Authorship Markup!','In May 2009, Google introduced Rich Snippets, a small block of information displayed in Google’s search engine results to make it easier for users to decide which pages are relevant to their search. In June 2011, Google announced the creation of Schema.org, a new initiative from Google, Bing and Yahoo! that aims to improve the web by creating structured data markup schema. This tutorial demonstrates how to create an online resume that incorporates Schema.org Microdata. The tutorial also includes instructions on how to use Authorship Markup!',1,0,'how-to-create-an-html5-microdata-powered-resume',307,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1056_html5microdataresume/profile.jpg','',1),(59,4,1,1358049713,NULL,' How to Create a Beautiful Icon with CSS3 ','Today, I’d like to show you a neat trick. We’ll create a document icon with pure CSS3. Even better, this effect will only require a single HTML element.(Continue)','Today, I’d like to show you a neat trick. We’ll create a document icon with pure CSS3. Even better, this effect will only require a single HTML element.(Continue)',1,0,'create-a-document-icon-with-css3',333,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1050_icon/images/document-icon-with-css3.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/1050_icon/source-code.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div><div\nclass=\"big_btn\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/1050_icon/demo.html\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-21915\'), post_id: 21915, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Today, I&#8217;d like to show you a neat trick. We&#8217;ll create a document icon with pure CSS3. Even better, this effect will only require a single HTML element.</p><p><span\nid=\"more-21915\"></span></p><hr\n/><h2>The Game Plan</h2><ol><li>Create a square box</li><li>Round the edges</li><li>Use pseudo elements to create a curled corner</li><li>Create the illusion of text with a striped gradient</li></ol><p>Let&#8217;s get started!</p><hr\n/><h2> <span>Step 1:</span> Create a Box</h2><p>We&#8217;ll begin by adding our single HTML element: an anchor tag. This makes sense, as most icons also serve to be links.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n    &lt;a class=&quot;docIcon&quot; href=&quot;#&quot;&gt;Document Icon&lt;/a&gt;\n</pre><p>Let&#8217;s set the somewhat arbitrary dimensions for our icon. We&#8217;ll do 40x56px &#8211; simply for this demo. In a real world application, you&#8217;ll likely want to reduce this! Also, keep in mind that we need to add <code>display: block</code>, since all anchor tags are inline, by default.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.docIcon\n{\n    background:#eee;\n    background: linear-gradient(top, #ddd 0, #eee 15%, #fff 40%, #fff 70%, #eee 100%);\n    border:1px solid #ccc;\n    display:block;\n    width:40px;\n    height:56px;\n    position:relative;\n    margin:42px auto;\n}\n</pre><p>Note that, above, we&#8217;re setting a positioning context in order to work with pseudo elements shortly. You&#8217;ll find that I&#8217;ve only used the official CSS3 syntax for the gradient. You&#8217;ll likely want to use the various browser prefixes as well. To speed things up, you can use <a\nhref=\"http://prefixr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'prefixr.com\']);\">Prefixr.com</a>, or its API in your favorite code editor. Simply copy the code snippet above, paste it into Prefixr&#8217;s textarea, and click enter. It&#8217;ll then spit out all of the various prefixized properties, like so:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.docIcon {\n	background: #eee;\n	background: -webkit-linear-gradient(top, #ddd 0, #eee 15%, #fff 40%, #fff 70%, #eee 100%);\n	background: -moz-linear-gradient(top, #ddd 0, #eee 15%, #fff 40%, #fff 70%, #eee 100%);\n	background: -o-linear-gradient(top, #ddd 0, #eee 15%, #fff 40%, #fff 70%, #eee 100%);\n	background: -ms-linear-gradient(top, #ddd 0, #eee 15%, #fff 40%, #fff 70%, #eee 100%);\n	background: linear-gradient(top, #ddd 0, #eee 15%, #fff 40%, #fff 70%, #eee 100%);\n	border: 1px solid #ccc;\n	display: block;\n	width: 40px;\n	height: 56px;\n	position: relative;\n	margin: 42px auto;\n}\n</pre><div\nclass=\"tutorial_image\"> <a\nhref=\"http://prefixr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'prefixr.com\']);\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1050_icon/images/Prefixr.jpg\" alt=\"Prefixr\" /></a></div><p>Next, let&#8217;s add some shine using CSS box shadows. I&#8217;ve also used the <code>text-indent</code> property to hide the text.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.docIcon\n{\n   ...\n    -webkit-box-shadow:inset rgba(255,255,255,0.8) 0 1px 1px;\n    -moz-box-shadow:inset rgba(255,255,255,0.8) 0 1px 1px;\n    box-shadow:inset rgba(255,255,255,0.8) 0 1px 1px;\n    text-indent:-9999em;\n}\n</pre><h3>So Far, We Have:</h3><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1050_icon/images/plain-box.png\" border=\"0\" /></div><hr\n/><h2> <span>Step 2:</span> Rounded Corners</h2><p>Next, we need to create a rounded corner effect. Add the following:</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.docIcon\n{\n    ...\n    -webkit-border-radius:3px 15px 3px 3px;\n    -moz-border-radius:3px 15px 3px 3px;\n    border-radius:3px 15px 3px 3px;\n}\n</pre><p>By passing four values, we can specify the top, right, bottom, and left radii, accordingly. This is similar to the way you would apply margins or padding.</p><h3>Which Gives Us&#8230;</h3><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1050_icon/images/plain-box-rounded.png\" border=\"0\" /></div><hr\n/><h2> <span>Step 3:</span> One Curled Corner</h2><blockquote><p>To create the illusion of a curled corner, we&#8217;ll use generated content, or pseudo elements.</p></blockquote><p>First, add content <code>:before</code> our icon. In this case, we don&#8217;t require any specific text. Instead, we need to create a 15px box, and apply a background gradient.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.docIcon:before {\n	content: &quot;&quot;;\n	display: block;\n	position: absolute;\n	top: 0;\n	right: 0;\n	width: 15px;\n	height: 15px;\n	background: #ccc;\n	background: -webkit-linear-gradient(45deg, #fff 0, #eee 50%, #ccc 100%);\n	background: -moz-linear-gradient(45deg, #fff 0, #eee 50%, #ccc 100%);\n	background: -o-linear-gradient(45deg, #fff 0, #eee 50%, #ccc 100%);\n	background: -ms-linear-gradient(45deg, #fff 0, #eee 50%, #ccc 100%);\n	background: linear-gradient(45deg, #fff 0, #eee 50%, #ccc 100%);\n	-webkit-box-shadow: rgba(0,0,0,0.05) -1px 1px 1px, inset white 0 0 1px;\n	-moz-box-shadow: rgba(0,0,0,0.05) -1px 1px 1px, inset white 0 0 1px;\n	box-shadow: rgba(0,0,0,0.05) -1px 1px 1px, inset white 0 0 1px;\n	border-bottom: 1px solid #ccc;\n	border-left: 1px solid #ccc;\n}\n</pre><p>In order for our generated content to also receive the top-right rounded edge, we must, again, apply the same radii to align it.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n...\n-webkit-border-radius:3px 15px 3px 3px;\n-moz-border-radius:3px 15px 3px 3px;\nborder-radius:3px 15px 3px 3px;\n</pre><h3>Tada!</h3><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1050_icon/images/plain-box-curled.png\" border=\"0\" /></div><hr\n/><h2> <span>Step 4:</span> Adding Lines</h2><p>Next, we&#8217;re going to use the <code>:after</code> psuedo element to add some dashed lines to represent zoomed out text. Apply a width of 60%, and a <code>margin-left</code> and <code>margin-right</code> of 20% (which equals 100%). Next, we specify a height and position it at <code>0 0</code>.</p><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.docIcon:after\n{\n    content:&quot;&quot;;\n    display:block;\n    position:absolute;\n    left:0;\n    top:0;\n    width:60%;\n    margin:22px 20% 0;\n    height:15px;\n}\n</pre><p>Creating a set of lines is a bit tricky. If we&#8217;re clever, though, we can use CSS gradients to achieve this effect. First, divide the total height by five, and set each block with a solid fill. Refer to the image below for a clearer exemplification of this thinking. Nifty, ay? It&#8217;s a nice technique to have in your toolbelt.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1050_icon/images/plain-box-gradient-stripes.png\" border=\"0\" /></div><h3>Multiple Lines (Stripes) with CSS3 Gradienst</h3><pre class=\"brush: css; title: ; notranslate\" title=\"\">\n.docIcon:after\n{\n    ...\n    background:#ccc;\n    background: -webkit-linear-gradient(top, #ccc 0, #ccc 20%, #fff 20%, #fff 40%, #ccc 40%, #ccc 60%, #fff 60%, #fff 80%, #ccc 80%, #ccc 100%);\n    background: -moz-linear-gradient(top, #ccc 0, #ccc 20%, #fff 20%, #fff 40%, #ccc 40%, #ccc 60%, #fff 60%, #fff 80%, #ccc 80%, #ccc 100%);\n    background: -o-linear-gradient(top, #ccc 0, #ccc 20%, #fff 20%, #fff 40%, #ccc 40%, #ccc 60%, #fff 60%, #fff 80%, #ccc 80%, #ccc 100%);\n    background: -ms-linear-gradient(top, #ccc 0, #ccc 20%, #fff 20%, #fff 40%, #ccc 40%, #ccc 60%, #fff 60%, #fff 80%, #ccc 80%, #ccc 100%);\n    background:linear-gradient(top, #ccc 0, #ccc 20%, #fff 20%, #fff 40%, #ccc 40%, #ccc 60%, #fff 60%, #fff 80%, #ccc 80%, #ccc 100%);\n}\n</pre><hr\n/><h2>We&#8217;re Finished!</h2><div\nclass=\"tutorial_image\"><a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/1050_icon/demo.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1050_icon/images/CSS3-Document-Icon.png\" border=\"0\" /></a></p><div><a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/1050_icon/demo.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">Live Demo</a></div></div><p>Did you enjoy the post? Have other similar tricks? If so, link to them in the comments below.</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(60,4,1,1358049714,NULL,' Cross-Browser CSS in Seconds with Prefixr ',' A couple weeks ago, as I began to manually update my stylesheet with all of the various browser prefixes for the new CSS3 properties, I thought to myself, “This is such a waste of time. Surely, there’s an easier way.”(Continue)',' A couple weeks ago, as I began to manually update my stylesheet with all of the various browser prefixes for the new CSS3 properties, I thought to myself, “This is such a waste of time. Surely, there’s an easier way.”(Continue)',1,0,'cross-browser-css-in-seconds-with-prefixr',127,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1025_css/cross-browser-css-in-seconds-with-prefixr.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-21215\'), post_id: 21215, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p> A couple weeks ago, as I began to manually update my stylesheet with all of the various browser prefixes for the new CSS3 properties, I thought to myself, &#8220;This is such a waste of time. Surely, there&#8217;s an <a\nhref=\"http://prefixr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'prefixr.com\']);\">easier way.</a>&#8221;</p><p><span\nid=\"more-21215\"></span></p><hr\n/><h2>Video Overview</h2><div\nclass=\"tutorial_image\"> <iframe\nwidth=\"600\" height=\"338\" src=\"http://www.youtube.com/embed/x8va4o4Wl3g?hd=1\" frameborder=\"0\" allowfullscreen></iframe></div><p>Tools like Compass, or even a TextMate bundle are tremendously helpful &#8211; I use them often, actually. But, for many projects, they aren&#8217;t available. As a result, we&#8217;re left in the position of having to copy and paste over, and over&#8230;and over.</p><hr\n/><h2>Introducing <a\nhref=\"http://prefixr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'prefixr.com\']);\">Prefixr.com</a> (Alpha)</h2><div\nclass=\"tutorial_image\"><a\nhref=\"http://prefixr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'prefixr.com\']);\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1025_css/logo.jpg\" alt=\"Prefixr.com\" /></a></div><p>I built Prefixr to do all this tedious work for me. Simply paste in your stylesheet, press <em>Prefixize</em> (or hit <code>Control + Enter</code>), and Prefixr will filter through the applicable CSS3 properties and dynamically update them.</p><p>Can&#8217;t remember if Opera provides a prefixed version of, say, the <code>transition</code> property (<code>o-transition</code>)? Don&#8217;t worry about it; that&#8217;s already coded into Prefixr!</p><div\nclass=\"tutorial_image\"> <a\nhref=\"http://prefixr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'prefixr.com\']);\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1025_css/ss.jpg\" /></a></div><blockquote><p>With Prefixr, you <em>only</em> code your stylesheets using the official W3C-recommended markup. When ready for deployment, run the stylesheet through Prefixr, and be done with it!</p></blockquote><hr\n/><h2>Use the API</h2><p>Even better than visiting <a\nhref=\"http://prefixr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'prefixr.com\']);\">Prefixr.com</a> is using its API from directly within your favorite code editor. Many editors, like TextMate, offer the ability to execute shell scripts. To automatically update your stylesheet in TextMate, create a new command, and paste in:</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\ncurl -sSd &quot;css=$TM_SELECTED_TEXT&quot; &quot;http://prefixr.com/api/index.php&quot;\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1025_css/textmate-ss-1.jpg\" alt=\"TextMate Screenshot\" /></div><p>Now, select your stylesheet, and type the shortcut that you assigned. It will then be filtered through Prefixr, and dynamically updated. <em>(See video above for more details.)</em></p><hr\n/><h2>Squash Those Bugs</h2><p>This is officially an <em>Alpha</em> release, which means that there are still some bugs to squash. All the kinks should be ironed out within this next week. If you find any yourself, there&#8217;s a <strong>Feedback</strong> button on the left-hand side of <a\nhref=\"http://prefixr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'prefixr.com\']);\">Prefixr.com</a> that you can use to notify me.</p><p>I hope this tool will be of help to you! Be sure to <a\nhref=\"http://prefixr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'prefixr.com\']);\">bookmark it!</a></p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(61,4,1,1358049724,NULL,' Quick Tip: How to Add Syntax Highlighting to Any Project ','In this lesson, we’ll use a JavaScript based syntax highlighter to quickly add a syntax highlighting functionality to any web project — even on a simple HTML page!(Continue)','In this lesson, we’ll use a JavaScript based syntax highlighter to quickly add a syntax highlighting functionality to any web project — even on a simple HTML page!(Continue)',1,0,'quick-tip-how-to-add-syntax-highlighting-to-any-project',279,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1022_syntax/syntax_highlighting_in_seconds.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/1022_syntax/sample.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div><div\nclass=\"big_btn\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/1022_syntax/sample/index.html\" rel=\"external\"><span>Demo</span> <small>View It Online</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-21099\'), post_id: 21099, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this lesson, we&#8217;ll use a JavaScript based <a\nhref=\"http://code.google.com/p/google-code-prettify/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'code.google.com\']);\">syntax highlighter</a> to quickly add a syntax highlighting functionality to any web project &mdash; even on a simple HTML page!</p><p><span\nid=\"more-21099\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/_ggWarwhv9M?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/_ggWarwhv9M?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></div><hr\n/><h2> <span>Step 1 &mdash; </span>Download the Source Code</h2><p>You can download the syntax highlighter source files <a\nhref=\"http://code.google.com/p/google-code-prettify/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'code.google.com\']);\">here.</a></p><hr\n/><h2> <span>Step 2 &mdash; </span>Drag the <code>src</code> Directory into your Project</h2><p> I generally rename this folder to <code>highlighter</code>. Don&#8217;t delete anything within here, unless you don&#8217;t anticipate using some of the language specific JavaScript files.</p><hr\n/><h2> <span>Step 3 &mdash; </span>Import the Necessary Files</h2><p> Within your HTML file (or whichever page is responsible for displaying your view), import both the <code>prettify.css</code> and <code>prettify.js</code> files.</p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n   &lt;meta charset=&quot;utf&amp;mdash;8&quot;&gt;\n   &lt;title&gt;untitled&lt;/title&gt;\n   &lt;link rel=&quot;stylesheet&quot; href=&quot;highlighter/prettify.css&quot; /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script src=&quot;highlighter/prettify.js&quot;&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre><p>Notice how we&#8217;ve placed our script at the bottom of the page, just before the closing <code>body</code> tag. This is always a smart move, as it improves performance.</p><p> Next, we need something to work with! The syntax highlighter will search for either a <code>pre</code> or <code>code</code> element that has a class of <code>prettyprint</code>. Let&#8217;s add that now.</p></p><pre class=\"brush: xml; title: ; notranslate\" title=\"\">\n&lt;pre class=&quot;prettyprint&quot;&gt;\n(function() {\n   var jsSyntaxHighlighting = \'rocks\';\n})();\n&lt;/pre&gt;\n</pre><hr\n/><h2> <span>Step 4 &mdash; </span>Calling the <code>prettyPrint()</code> Function</h2><p>The last step is to execute the <code>prettyPrint()</code> function. We can place this bit of code at the bottom of the page as well.</p><pre class=\"brush: xml; highlight: [17]; title: ; notranslate\" title=\"\">\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n   &lt;meta charset=&quot;utf-8&quot;&gt;\n   &lt;title&gt;untitled&lt;/title&gt;\n   &lt;link rel=&quot;stylesheet&quot; href=&quot;highlighter/prettify.css&quot; /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;pre class=&quot;prettyprint&quot;&gt;\n(function() {\n   var jsSyntaxHighlighting = \'rocks\';\n})();\n&lt;/pre&gt;\n&lt;script src=&quot;highlighter/prettify.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;prettyPrint();&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre><p>If we now view the page in the browser&#8230;</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1022_syntax/highlight.jpg\" alt=\"final product\" /></div><p>Well that was easy! But, as a final bonus step, what if we want to change the highlighter theme? In that case, it all comes down to editing the stylesheet how you see fit. Even better, there are a handful of stylesheets in the <a\nhref=\"http://google&mdash;code&mdash;prettify.googlecode.com/svn/trunk/styles/index.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'google&mdash;code&mdash;prettify.googlecode.com\']);\">theme gallery</a> that you&#8217;re free to use. I personally like the <a\nhref=\"http://code.google.com/p/google&mdash;code&mdash;prettify/source/browse/trunk/styles/desert.css\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'code.google.com\']);\">Desert</a> theme. To apply it, copy the CSS from the link above, create a new stylesheet in your project, and paste the CSS into it. Next, update the stylesheet include from within the <code>head</code> section of your document.</p><pre class=\"brush: xml; highlight: [4]; title: ; notranslate\" title=\"\">\n&lt;head&gt;\n   &lt;meta charset=&quot;utf&amp;mdash;8&quot;&gt;\n   &lt;title&gt;untitled&lt;/title&gt;\n   &lt;link rel=&quot;stylesheet&quot; href=&quot;highlighter/dessert.css&quot; /&gt;\n&lt;/head&gt;\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/1022_syntax/desert-theme.jpg\" alt=\"Desert Theme Applied\" /></div><p>Seriously &mdash; can it get any simpler than that?</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(62,4,1,1358049724,NULL,' 28 HTML5 Features, Tips, and Techniques you Must Know ','Twice a month, we revisit some of our readers’ favorite posts from throughout the history of Nettuts+. This tutorial was first published in August, 2010. This industry moves fast — really fast! If you’re not careful, you’ll be left in its dust. So, if you’re feeling a bit overwhelmed with the coming changes/updates in HTML5, use this as a primer of the things you must know.','Twice a month, we revisit some of our readers’ favorite posts from throughout the history of Nettuts+. This tutorial was first published in August, 2010. This industry moves fast — really fast! If you’re not careful, you’ll be left in its dust. So, if you’re feeling a bit overwhelmed with the coming changes/updates in HTML5, use this as a primer of the things you must know.',1,0,'25-html5-features-tips-and-techniques-you-must-know',324,0,'http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/30_html5_features_tips_techniques.jpg','<div\nclass=\"session-post\"><em>This entry is part 2 of 14 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/html5-and-you/\" >HTML5 and You</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-html5-features-you-should-be-using-right-now/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-new-html5-form-features/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-html5-features-you-should-be-using-right-now/\" >HTML5 Features you Should be Using Right Now </a></li><li>28 HTML5 Features, Tips, and Techniques you Must Know</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-new-html5-form-features/\" >New HTML5 Form Features </a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/how-to-make-all-browsers-render-html5-mark-up-correctly-even-ie6/\" >How to Make All Browsers Render HTML5 Mark-up Correctly – Even IE6 </a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/html5-audio-and-video-what-you-must-know/\" >HTML5 Audio and Video: What you Must Know</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-learning-about-html5-local-storage/\" >Learning About HTML5 Local Storage </a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/the-official-guide-to-html5-boilerplate/\" >The Official Guide to HTML5 Boilerplate </a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/html5-globals-and-you/\" >HTML5 Globals and You</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/rethinking-forms-in-html5/\" >Rethinking Forms in HTML5 </a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/html5-microdata-welcome-to-the-machine/\" >HTML5 Microdata: Welcome to the Machine</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-getting-offline-access-with-html5-application-cache/\" >Getting Offline Access with HTML5 Application Cache </a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/building-persistant-sticky-notes-with-local-storage/\" >Building Persistent Sticky Notes with Local Storage </a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/html5-apps-what-why-and-how/\" >HTML5 Apps: What, Why, and How </a></li><li><a\nhref=\"http://net.tutsplus.com/articles/news/create-a-sticky-note-effect-in-5-easy-steps-with-css3-and-html5/\" >Create a Sticky Note Effect in 5 Easy Steps with CSS3 and HTML5 </a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-13520\'), post_id: 13520, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p><strong>Twice a month, we revisit some of our readers’ favorite posts from throughout the history of Nettuts+. This tutorial was first published in August, 2010.</strong></p><p> This industry moves fast &#8212; really fast! If you&#8217;re not careful, you&#8217;ll be left in its dust. So, if you&#8217;re feeling a bit overwhelmed with the coming changes/updates in HTML5, use this as a primer of the things you must know.</p><p><span\nid=\"more-13520\"></span></p><hr\n/><h2><span>1. </span>New Doctype</h2><p> Still using that pesky, impossible-to-memorize XHTML doctype?</p><pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n	\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n</pre><p>If so, why? Switch to the new HTML5 doctype. You&#8217;ll live longer &#8212; as Douglas Quaid might say.</p><pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE html>\n</pre><p>In fact, did you know that it truthfully isn&#8217;t even really necessary for HTML5? However, it&#8217;s used for current, and older browsers that require a specified <code>doctype</code>. Browsers that do not understand this doctype will simply render the contained markup in standards mode. So, without worry, feel free to throw caution to the wind, and embrace the new HTML5 doctype.</p><hr\n/><h2><span>2. </span>The Figure Element</h2><p> Consider the following mark-up for an image:</p><pre name=\"code\" class=\"html\">\n&lt;img src=\"path/to/image\" alt=\"About image\" />\n&lt;p>Image of Mars. &lt;/p>\n</pre><p>There unfortunately isn&#8217;t any easy or semantic way to associate the caption, wrapped in a paragraph tag, with the image element itself. HTML5 rectifies this, with the introduction of the <code>&lt;figure></code> element. When combined with the <code>&lt;figcaption></code> element, we can now semantically associate captions with their image counterparts.</p><pre name=\"code\" class=\"html\">\n&lt;figure>\n	&lt;img src=\"path/to/image\" alt=\"About image\" />\n	&lt;figcaption>\n		&lt;p>This is an image of something interesting. &lt;/p>\n	&lt;/figcaption>\n&lt;/figure>\n</pre><hr\n/><h2><span>3. </span>&lt;small> Redefined</h2><p>Not long ago, I utilized the <code>&lt;small></code> element to create subheadings that are closely related to the logo. It&#8217;s a useful presentational element; however, now, that would be an incorrect usage. The <code>small</code> element has been redefined, more appropriately, to refer to small print. Imagine a copyright statement in the footer of your site; according to the new HTML5 definition of this element; the <code>&lt;small></code> would  be the correct wrapper for this information.</p><blockquote><p>The <code>small</code> element now refers to &#8220;small print.&#8221;</p></blockquote><hr\n/><h2><span>4. </span>No More <code>Types</code> for Scripts and Links</h2><p>You possibly still add the <code>type</code> attribute to your <code>link</code> and <code>script</code> tags.</p><pre name=\"code\" class=\"html\">\n&lt;link rel=\"stylesheet\" href=\"path/to/stylesheet.css\" type=\"text/css\" />\n&lt;script type=\"text/javascript\" src=\"path/to/script.js\">&lt;/script>\n</pre><p>This is no longer necessary. It&#8217;s implied that both of these tags refer to stylesheets and scripts, respectively. As such, we can remove the <code>type</code> attribute all together.</p><pre name=\"code\" class=\"html\">\n&lt;link rel=\"stylesheet\" href=\"path/to/stylesheet.css\" />\n&lt;script src=\"path/to/script.js\">&lt;/script>\n</pre><hr\n/><h2><span>5. </span>To Quote or Not to Quote.</h2><p>&#8230;That is the question. Remember, HTML5 is not XHTML. You don&#8217;t have to wrap your attributes in quotation marks if you don&#8217;t want to you. You don&#8217;t have to close your elements. With that said, there&#8217;s nothing wrong with doing so, if it makes you feel more comfortable. I find that this is true for myself.</p><pre name=\"code\" class=\"html\">\n&lt;p class=myClass id=someId> Start the reactor.\n</pre><p>Make up your own mind on this one. If you prefer a more structured document, by all means, stick with the quotes.</p><hr\n/><h2><span>6. </span>Make your Content Editable</h2><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/contenteditable.png\" alt=\"Content Editable\" /></div><p>The new browsers have a nifty new attribute that can be applied to elements, called <code>contenteditable</code>. As the name implies, this allows the user to edit any of the text contained within the element, including its children. There are a variety of uses for something like this, including an app as simple as a to-do list, which also takes advantage of local storage.</p><pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n&lt;head>\n	&lt;meta charset=\"utf-8\">\n	&lt;title>untitled&lt;/title>\n&lt;/head>\n&lt;body>\n	&lt;h2> To-Do List &lt;/h2>\n     &lt;ul contenteditable=\"true\">\n		&lt;li> Break mechanical cab driver. &lt;/li>\n		&lt;li> Drive to abandoned factory\n		&lt;li> Watch video of self &lt;/li>\n	 &lt;/ul>\n&lt;/body>\n&lt;/html>\n</pre><p>Or, as we learned in the previous tip, we could write it as:</p><pre name=\"code\" class=\"html\">\n&lt;ul contenteditable=true>\n</pre><hr\n/><h2><span>7. </span>Email Inputs</h2><p>If we apply a <code>type</code> of &#8220;email&#8221; to form inputs, we can instruct the browser to <em>only</em> allow strings that conform to a valid email address structure. That&#8217;s right; built-in form validation will soon be here! We can&#8217;t 100% rely on this just yet, for obvious reasons. In older browsers that do not understand this &#8220;email&#8221; type, they&#8217;ll simply fall back to a regular textbox.</p><pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n&lt;head>\n	&lt;meta charset=\"utf-8\">\n	&lt;title>untitled&lt;/title>\n&lt;/head>\n&lt;body>\n	&lt;form action=\"\" method=\"get\">\n		&lt;label for=\"email\">Email:&lt;/label>\n		&lt;input id=\"email\" name=\"email\" type=\"email\" />\n		&lt;button type=\"submit\"> Submit Form &lt;/button>\n	&lt;/form>\n&lt;/body>\n&lt;/html>\n</pre><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/email_validation.png\" alt=\"Email Validation\" /></div><blockquote\nclass=\"pullquote\"><p>At this time, we cannot depend on browser validation. A server/client side solution must still be implemented.</p></blockquote><p>It should also be noted that all the current browsers are a bit wonky when it comes to what elements and attributes they do and don&#8217;t support. For example, Opera seems to support email validation, just as long as the <code>name</code> attribute is specified. However, it does not support the <code>placeholder</code> attribute, which we&#8217;ll learn about in the next tip. Bottom line, don&#8217;t depend on this form of validation just yet&#8230;but you can still use it!</p><hr\n/><h2><span>8. </span>Placeholders</h2><p> Before, we had to utilize a bit of JavaScript to create placeholders for textboxes. Sure, you can initially set the <code>value</code> attribute how you see fit, but, as soon as the user deletes that text and clicks away, the input will be left blank again. The <code>placeholder</code> attribute remedies this.</p><pre name=\"code\" class=\"html\">\n&lt;input name=\"email\" type=\"email\" placeholder=\"doug@givethesepeopleair.com\" />\n</pre><p>Again, support is shady at best across browsers, however, this will continue to improve with every new release. Besides, if the browser, like Firefox and Opera, don&#8217;t currently support the <code>placeholder</code> attribute, no harm done.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/validation.png\" alt=\"Validation\" /></div><hr\n/><h2><span>9. </span> Local Storage</h2><p> Thanks to local storage (not officially HTML5, but grouped in for convenience&#8217;s sake), we can make advanced browsers &#8220;remember&#8221; what we type, even after the browser is closed or is refreshed.</p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"375\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/h0uZIljjElo&#038;hl=en_US&#038;fs=1&#038;hd=1&#038;color1=0x3a3a3a&#038;color2=0x999999\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/h0uZIljjElo&#038;hl=en_US&#038;fs=1&#038;hd=1&#038;color1=0x3a3a3a&#038;color2=0x999999\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"600\" height=\"375\"></embed></object><br\n/> <span><a\nhref=\"http://www.youtube.com/user/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.youtube.com\']);\">Subscribe to our YouTube page to watch all of the video tutorials!</a><br\n/> Or, watch this video on <a\nhref=\"http://screenr.com/AaM\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'screenr.com\']);\">Screenr.com</a>.</span></div><blockquote><p>&#8220;localStorage sets fields on the domain. Even when you close the browser, reopen it, and go back to the site, it remembers all fields in localStorage.&#8221;<br\n/>-<a\nhref=\"http://www.quirksmode.org/blog/archives/2009/06/html5_storage_t.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.quirksmode.org\']);\">QuirksBlog</a></p></blockquote><p>While obviously not supported across all browsers, we can expect this method to work, most notably, in Internet Explorer 8, Safari 4, and Firefox 3.5. Note that, to compensate for older browsers that won&#8217;t recognize local storage, you should first test to determine whether window.localStorage exists.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://img.skitch.com/20100409-cp7baa12xdc53tmuytg4kaqqe6.jpg\" alt=\"Support matrix\" style=\"width: 600px;\"/></p><div><em>via http://www.findmebyip.com/litmus/</em></div></div><hr\n/><h2><span>10. </span> The Semantic <code>Header</code> and <code>Footer</code></h2><p> Gone are the days of:</p><pre name=\"code\" class=\"html\">\n&lt;div id=\"header\">\n	...\n&lt;/div>\n&lt;div id=\"footer\">\n	...\n&lt;/div>\n</pre><p>Divs, by nature, have no semantic structure &#8212; even after an <code>id</code> is applied. Now, with HTML5, we have access to the <code>&lt;header></code> and <code>&lt;footer></code> elements. The mark-up above can now be replaced with:</p><pre name=\"code\" class=\"html\">\n&lt;header>\n	...\n&lt;/header>\n&lt;footer>\n	...\n&lt;/footer>\n</pre><blockquote><p>It&#8217;s fully appropriate to have multiple <code>header</code>s and <code>footer</code>s in your projects.</p></blockquote><p>Try not to confuse these elements with the &#8220;header&#8221; and &#8220;footer&#8221; of your website. They simply refer to their container. As such, it makes sense to place, for example, meta information at the bottom of a blog post within the <code>footer</code> element. The same holds true for the <code>header</code>.</p><hr\n/><h2><span>11. </span>More HTML5 Form Features</h2><p>Learn about more helpful HTML5 form features in this quick video tip.</p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"267\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/spjOAFGxOP0&#038;hl=en_US&#038;fs=1&#038;color1=0x3a3a3a&#038;color2=0x999999&#038;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/spjOAFGxOP0&#038;hl=en_US&#038;fs=1&#038;color1=0x3a3a3a&#038;color2=0x999999&#038;hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"600\" height=\"267\"></embed></object><br\n/> <span><a\nhref=\"http://www.youtube.com/user/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.youtube.com\']);\">Subscribe to our YouTube page to watch all of the video tutorials!</a></span></div><hr\n/><h2><span>12. </span>Internet Explorer and HTML5</h2><p> Unfortunately, that dang Internet Explorer requires a bit of wrangling in order to understand the new HTML5 elements.</p><blockquote><p>All elements, by default, have a <code>display</code> of <code>inline</code>.</p></blockquote><p>In order to ensure that the new HTML5 elements render correctly as block level elements, it&#8217;s necessary at this time to style them as such.</p><pre name=\"code\" class=\"css\">\nheader, footer, article, section, nav, menu, hgroup {\n   display: block;\n}\n</pre><p>Unfortunately, Internet Explorer will still ignore these stylings, because it has no clue what, as an example, the <code>header</code> element even is. Luckily, there is an easy fix:</p><pre name=\"code\" class=\"js\">\ndocument.createElement(\"article\");\ndocument.createElement(\"footer\");\ndocument.createElement(\"header\");\ndocument.createElement(\"hgroup\");\ndocument.createElement(\"nav\");\ndocument.createElement(\"menu\");\n</pre><p>Strangely enough, this code seems to trigger Internet Explorer. To simply this process for each new application, Remy Sharp <a\nhref=\"http://remysharp.com/2009/01/07/html5-enabling-script/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'remysharp.com\']);\">created a script</a>, commonly referred to as the HTML5 shiv.  This script also fixes some printing issues as well.</p><pre name=\"code\" class=\"html\">\n&lt;!--[if IE]>\n&lt;script src=\"http://html5shim.googlecode.com/svn/trunk/html5.js\">&lt;/script>\n&lt;![endif]-->\n</pre><hr\n/><h2><span>13. </span>hgroup</h2><p> Imagine that, in my site&#8217;s header, I had the name of my site, immediately followed by a subheading. While we can use an <code>&lt;h1></code> and <code>&lt;h2></code> tag, respectively, to create the mark-up, there still wasn&#8217;t, as of HTML4, an easy way to semantically illustrate the relationship between the two. Additionally, the use of an <code>h2</code> tag presents more problems, in terms of hierarchy, when it comes to displaying other headings on the page. By using the <code>hgroup</code> element, we can group these headings together, without affecting the flow of the document&#8217;s outline.</p><pre name=\"code\" class=\"html\">\n&lt;header>\n	&lt;hgroup>\n		&lt;h1> Recall Fan Page &lt;/h1>\n		&lt;h2> Only for people who want the memory of a lifetime. &lt;/h2>\n	&lt;/hgroup>\n&lt;/header>\n</pre></p><hr\n/><h2><span>14. </span>Required Attribute</h2><p>Forms allow for a new <code>required</code> attribute, which specifies, naturally, whether a particular input is required. Dependent upon your coding preference, you can declare this attribute in one of two ways:</p><pre name=\"code\" class=\"html\">\n&lt;input type=\"text\" name=\"someInput\" required>\n</pre><p>Or, with a more structured approach.</p><pre name=\"code\" class=\"html\">\n&lt;input type=\"text\" name=\"someInput\" required=\"required\">\n</pre><p>Either method will do. With this code, and within browsers that support this attribute, a form cannot be submitted if that &#8220;someInput&#8221; input is blank. Here&#8217;s a quick example; we&#8217;ll also add the placeholder attribute as well, as there&#8217;s no reason not to.</p><pre name=\"code\" class=\"html\">\n&lt;form method=\"post\" action=\"\">\n	&lt;label for=\"someInput\"> Your Name: &lt;/label>\n	&lt;input type=\"text\" id=\"someInput\" name=\"someInput\" placeholder=\"Douglas Quaid\" required>\n	&lt;button type=\"submit\">Go&lt;/button>\n&lt;/form>\n</pre><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/placeholder_required.png\" alt=\"Required and Placeholder Attributes\" /></div><p>If the input is left blank, and the form is submitted, the textbox will be highlighted.</p><hr\n/><h2><span>15. </span>Autofocus Attribute</h2><p> Again, HTML5 removes the need for JavaScript solutions. If a particular input should be &#8220;selected,&#8221; or focused, by default, we can now utilize the <code>autofocus</code> attribute.</p><pre name=\"code\" class=\"html\">\n&lt;input type=\"text\" name=\"someInput\" placeholder=\"Douglas Quaid\" required autofocus>\n</pre><p>Interestingly enough, while I personally tend to prefer a more XHTML approach (using quotation marks, etc.), writing <code>\"autofocus=autofocus\"</code> feels odd. As such, we&#8217;ll stick with the single keyword approach.</p><hr\n/><h2><span>16. </span>Audio Support</h2><p>No longer do we have to rely upon third party plugins in order to render audio. HTML5 now offers the <code>&lt;audio></code> element. Well, at least, ultimately, we won&#8217;t have to worry about these plugins. For the time being, only the most recent of browsers offer support for HTML5 audio. At this time, it&#8217;s still a good practice to offer some form of backward compatibility.</p><pre name=\"code\" class=\"html\">\n&lt;audio autoplay=\"autoplay\" controls=\"controls\">\n	&lt;source src=\"file.ogg\" />\n	&lt;source src=\"file.mp3\" />\n	<a href=\"file.mp3\">Download this file.</a>\n&lt;/audio>\n</pre><p>Mozilla and Webkit don’t fully get along just yet, when it comes to the audio format. Firefox will want to see an .ogg file, while Webkit browsers will work just fine with the common .mp3 extension. This means that, at least for now, you should create two versions of the audio.</p><p>When Safari loads the page, it won’t recognize that .ogg format, and will skip it and move on to the mp3 version, accordingly. Please note that IE, per usual, doesn’t support this, and Opera 10 and lower can only work with .wav files.</p><hr\n/><h2><span>17. </span> Video Support</h2><p>Much like the <code>&lt;audio></code> element, we also, of course, have HTML5 video as well in the new browsers! In fact, just recently, <a\nhref=\"http://apiblog.youtube.com/2010/07/new-way-to-embed-youtube-videos.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'apiblog.youtube.com\']);\">YouTube announced a new HTML5 video embed</a> for their videos, for browsers which support it. Unfortunately, again, because the HTML5 spec doesn&#8217;t specify a specific codec for video, it&#8217;s left to the browsers to decide. While Safari, and Internet Explorer 9 can be expected to support video in the H.264 format (which Flash players can play), Firefox and Opera are sticking with the open source Theora and Vorbis formats. As such, when displaying HTML5 video, you must offer both formats.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre name=\"code\" class=\"html\">\n&lt;video controls preload>\n	&lt;source src=\"cohagenPhoneCall.ogv\" type=\"video/ogg; codecs=\'vorbis, theora\'\" />\n	&lt;source src=\"cohagenPhoneCall.mp4\" type=\"video/mp4; \'codecs=\'avc1.42E01E, mp4a.40.2\'\" />\n	&lt;p> Your browser is old. &lt;a href=\"cohagenPhoneCall.mp4\">Download this video instead.&lt;/a> &lt;/p>\n&lt;/video>\n</pre><blockquote\nclass=\"pullquote\"><p>Chrome can correctly display video that is encoded in both the &#8220;ogg&#8221; and &#8220;mp4&#8243; formats.</p></blockquote><p>There are a few things worth noting here.</p><ol><li>We aren&#8217;t technically required to set the <code>type</code> attribute; however, if we don&#8217;t, the browser has to figure out the type itself. Save some bandwidth, and declare it yourself.</li><li>Not all browsers understand HTML5 video. Below the <code>source</code> elements, we can either offer a download link, or embed a Flash version of the video instead. It&#8217;s up to you.</li><li> The <code>controls</code> and <code>preload</code> attributes will be discussed in the next two tips.</li></ol><hr\n/><h2><span>18. </span>Preload Videos</h2><p>The <code>preload</code> attribute does exactly what you&#8217;d guess. Though, with that said, you should first decide whether or not you want the browser to preload the video. Is it necessary? Perhaps, if the visitor accesses a page, which is specifically made to display a video, you should definitely preload the video, and save the visitor a bit of waiting time. Videos can be preloaded by setting <code>preload=\"preload\"</code>, or by simply adding <code>preload</code>. I prefer the latter solution; it&#8217;s a bit less redundant.</p><pre name=\"code\" class=\"html\">\n&lt;video preload>\n</pre><hr\n/><h2><span>19. </span>Display Controls</h2><p>If you&#8217;re working along with each of these tips and techniques, you might have noticed that, with the code above, the video above appears to be only an image, without any controls. To render these play controls, we must specify the <code>controls</code> attribute within the <code>video</code> element.</p><pre name=\"code\" class=\"html\">\n&lt;video preload controls>\n</pre><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/video.jpg\" alt=\"Options\" /></div><p>Please note that each browser renders its player differently from one another.</p><hr\n/><h2><span>20. </span>Regular Expressions</h2><p>How often have you found yourself writing some quickie regular expression to verify a particular textbox. Thanks to the new <code>pattern</code> attribute, we can insert a regular expression directly into our markup.</p><pre name=\"code\" class=\"html\">\n&lt;form action=\"\" method=\"post\">\n	&lt;label for=\"username\">Create a Username: &lt;/label>\n   	&lt;input type=\"text\"\n	   name=\"username\"\n	   id=\"username\"\n	   placeholder=\"4 &lt;> 10\"\n	   pattern=\"[A-Za-z]{4,10}\"\n	   autofocus\n	   required>\n	&lt;button type=\"submit\">Go &lt;/button>\n&lt;/form>\n</pre><p>If you&#8217;re moderately familiar with regular expressions, you&#8217;ll be aware that this pattern: <code>[A-Za-z]{4,10}</code> accepts only upper and lowercase letters. This string must also have a minimum of four characters, and a maximum of ten.</p><p>Notice that we&#8217;re beginning to combine all of these new awesome attributes!</p><p><em>If regular expressions are foreign to you, <a\nhref=\"http://net.tutsplus.com/tutorials/javascript-ajax/you-dont-know-anything-about-regular-expressions/\" >refer here</a>. </em></p><hr\n/><h2><span>21. </span>Detect Support for Attributes</h2><p>What good are these attributes if we have no way of determining whether the browser recognizes them? Well, good point; but there are several ways to figure this out. We&#8217;ll discuss two. The first option is to utilize the excellent <a\nhref=\"http://modernizr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'modernizr.com\']);\">Modernizr</a> library. Alternatively, we can create and dissect these elements to determine what the browsers are capable of. For instance, in our previous example, if we want to determine if the browser can implement the <code>pattern</code> attribute, we could add a bit of JavaScript to our page:</p><pre name=\"code\" class=\"js\">\nalert( \'pattern\' in document.createElement(\'input\') ) // boolean;\n</pre><p>In fact, this is a popular method of determining browser compatibility. The jQuery library utilizes this trick. Above, we&#8217;re creating a new <code>input</code> element, and determining whether the <code>pattern</code> attribute is recognized within. If it is, the browser supports this functionality. Otherwise, it of course does not.</p><pre name=\"code\" class=\"js\">\n&lt;script>\nif (!\'pattern\' in document.createElement(\'input\') ) {\n	// do client/server side validation\n}\n&lt;/script>\n</pre><p><em>Keep in mind that this relies on JavaScript! </em></p><hr\n/><h2><span>22. </span>Mark Element</h2><p> Think of the <code>&lt;mark></code> element as a highlighter. A string wrapped within this tag should be relevant to the current actions of the user. For example, if I searched for &#8220;Open your Mind&#8221; on some blog, I could then utilize some JavaScript to wrap each occurrence of this string within <code>&lt;mark></code> tags.</p><pre name=\"code\" class=\"html\">\n&lt;h3> Search Results &lt;/h3>\n&lt;p> They were interrupted, just after Quato said, &lt;mark>\"Open your Mind\"&lt;/mark>. &lt;/p>\n</pre></p><hr\n/><h2><span>23. </span>When to Use a &lt;div></h2><p>Some of us initially questioned when we should use plain-ole <code>div</code>s. Now that we have access to <code>header</code>s, <code>article</code>s, <code>section</code>s, and <code>footer</code>s, is there ever a time to use a&#8230;<code>div</code>? Absolutely.</p><blockquote><p><code>Div</code>s should be utilized when there&#8217;s no better element for the job.</p></blockquote><p>For example, if you find that you need to wrap a block of code within a wrapper element specifically for the purpose of positioning the content, a <code>&lt;div></code> makes perfect sense. However, if you&#8217;re instead wrapping a new blog post, or, perhaps, a list of links in your footer, consider using the <code>&lt;article></code> and <code>&lt;nav></code> elements, respectively. They&#8217;re more semantic.</p><hr\n/><h2><span>24. </span>What to Immediately Begin Using</h2><p> With all this talk about HTML5 <a\nhref=\"http://blogs.techrepublic.com.com/programming-and-development/?p=718\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'blogs.techrepublic.com.com\']);\">not being complete until 2022</a>, many people disregard it entirely &#8211; which is a big mistake. In fact, there are a handful of HTML5 features that we can use in all our projects right now! Simpler, cleaner code is always a good thing. In today&#8217;s video quick tip, I&#8217;ll show you a handful of options.</p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"375\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/HzCkSv3s0-k&#038;hl=en_US&#038;hd=1&#038;fs=1&#038;color1=0x3a3a3a&#038;color2=0x999999\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/HzCkSv3s0-k&#038;hl=en_US&#038;hd=1&#038;fs=1&#038;color1=0x3a3a3a&#038;color2=0x999999\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"600\" height=\"375\"></embed></object><br\n/> <span><a\nhref=\"http://www.youtube.com/user/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.youtube.com\']);\">Subscribe to our YouTube page to watch all of the video tutorials!</a></span></div><hr\n/><h2><span>25. </span> What is Not HTML5</h2><p> People can be forgiven for assuming that awesome JavaScript-less transitions are grouped into the all-encompassing HTML5. Hey &#8212; even Apple has inadvertently promoted this idea. For non-developers, who cares; it&#8217;s an easy way to refer to modern web standards. However, for us, though it may just be semantics, it&#8217;s important to understand exactly what <strong>is not</strong> HTML5.</p><ol><li> <strong>SVG: </strong> Not HTML5. It&#8217;s at least five years old.</li><li> <strong>CSS3: </strong>Not HTML5. It&#8217;s&#8230;CSS.</li><li> <strong>Geolocation: </strong>Not HTML5.</li><li> <strong>Client Storage: </strong> Not HTML5. It was at one point, but was removed from the spec, due to the fact that many worried that it, as a whole, was becoming too complicated. It now has its own specification.</li><li><strong>Web Sockets: </strong>Not HTML5. Again, was exported to its own specification.</li></ol><p>Regardless of how much distinction you require, all of these technologies can be grouped into the modern web stack. In fact, many of these branched specifications are still managed by the same people.</p><hr\n/><h2><span>26. </span> The Data Attribute</h2><p> We now officially have support for custom attributes within all HTML elements. While, before, we could still get away with things like:</p><pre name=\"code\" class=\"html\">\n&lt;h1 id=someId customAttribute=value> Thank you, Tony. &lt;/h1>\n</pre><p>&#8230;the validators would kick up a fuss! But now, as long as we preface our custom attribute with &#8220;data,&#8221; we can officially use this method. If you&#8217;ve ever found yourself attaching important data to something like a <code>class</code> attribute, probably for JavaScript usage, this will come as a big help!</p><h3> HTML Snippet</h3><pre name=\"code\" class=\"html\">\n&lt;div id=\"myDiv\" data-custom-attr=\"My Value\"> Bla Bla &lt;/div>\n</pre><h3> Retrieve Value of the Custom Attribute</h3><pre name=\"code\" class=\"Js\">\nvar theDiv = document.getElementById(\'myDiv\');\nvar attr = theDiv.getAttribute(\'data-custom-attr\');\nalert(attr); // My Val\n</pre><p>It can also even be used in your CSS, like for this silly and lame CSS text changing example.</p><pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n&lt;head>\n   &lt;meta charset=\"utf-8\">\n   &lt;title>Sort of Lame CSS Text Changing&lt;/title>\n&lt;style>\nh1 { position: relative; }\nh1:hover { color: transparent; }\nh1:hover:after {\n	content: attr(data-hover-response);\n	color: black;\n	position: absolute;\n	left: 0;\n}\n&lt;/style>\n&lt;/head>\n&lt;body>\n&lt;h1 data-hover-response=\"I Said Don\'t Touch Me!\"> Don\'t Touch Me  &lt;/h1>\n&lt;/body>\n&lt;/html>\n</pre><p>You can view a demo of the effect above <a\nhref=\"http://jsbin.com/okepo4\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">on JSBIN</a>.</p><hr\n/><h2><span>27. </span>The Output Element</h2><p>As you probably have guessed, the <code>output</code> element is used to display some sort of calculation. For example, if you&#8217;d like to display the coordinates of a mouse position, or the sum of a series of numbers, this data should be inserted into the <code>output</code> element.</p><p>As a simple example, let&#8217;s insert the sum of two numbers into an empty <code>output</code> with JavaScript, when a <code>submit</code> button is pressed.</p><pre name=\"code\" class=\"html\">\n&lt;form action=\"\" method=\"get\">\n	&lt;p>\n		10 + 5 = &lt;output name=\"sum\">&lt;/output>\n	&lt;/p>\n	&lt;button type=\"submit\"> Calculate &lt;/button>\n&lt;/form>\n&lt;script>\n(function() {\n	var f = document.forms[0];\n	if ( typeof f[\'sum\'] !== \'undefined\' ) {\n		f.addEventListener(\'submit\', function(e) {\n			f[\'sum\'].value = 15;\n			e.preventDefault();\n		}, false);\n	}\n	else { alert(\'Your browser is not ready yet.\'); }\n})();\n&lt;/script>\n</pre><p><em><a\nhref=\"http://jsbin.com/efedu3\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsbin.com\']);\">Try it out for yourself.</a> </em></p><p>Please note that support for the <code>output</code> element is still a bit wonky. At the time of this writing, I was only able to get Opera to play nice. This is reflected in the code above. If the browser does not recognize the element, the browser will simply alert a notice informing you of as much. Otherwise, it finds the output with a name of &#8220;sum,&#8221; and sets its value to <code>15</code>, accordingly, after the form has been submitted.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/output.png\" alt=\"Output element\" /></div><p>This element can also receive a <code>for</code> attribute, which reflects the name of the element that the <code>output</code> relates to, similar to the way that a <code>label</code> works.</p><hr\n/><h2><span>28. </span>Create Sliders with the Range Input</h2><p> HTML5 introduces the new <code>range</code> type of input.</p><pre name=\"code\" class=\"html\">\n&lt;input type=\"range\">\n</pre><p>Most notably, it can receive <code>min</code>, <code>max</code>, <code>step</code>, and <code>value</code> attributes, among others. Though only Opera seems to support this type of input right now fully, it&#8217;ll be fantastic when we can actually use this!</p><p>For a quick demonstration, let&#8217;s build a gauge that will allow users to decide how awesome &#8220;Total Recall&#8221; is. We won&#8217;t build a real-world polling solution, but we&#8217;ll review how it could be done quite easily.</p><h3>Step 1: Mark-up</h3><p> First, we create our mark-up.</p><pre name=\"code\" class=\"html\">\n&lt;form method=\"post\">\n	&lt;h1> Total Recall Awesomness Gauge &lt;/h1>\n	&lt;input type=\"range\" name=\"range\" min=\"0\" max=\"10\" step=\"1\" value=\"\">\n	&lt;output name=\"result\">  &lt;/output>\n&lt;/form>\n</pre><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/gaugeunstyled.png\" alt=\"Unstyled range input\" /></div><p>Notice that, in addition to setting <code>min</code> and <code>max</code> values, we can always specify what the <code>step</code> for each transition will be. If the <code>step</code> is set to <code>1</code>, there will then be 10 values to choose. We also take advantage of the new <code>output</code> element that we learned about in the previous tip.</p><h3> Step 2: CSS</h3><p>Next, we&#8217;ll style it just a bit. We&#8217;ll also utilize <code>:before</code> and <code>:after</code> to inform the user what our specified <code>min</code> and <code>max</code> values are. <em>Thanks so much to Remy and Bruce for teaching me this trick, via &#8220;<a\nhref=\"http://introducinghtml5.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'introducinghtml5.com\']);\">Introducing HTML5</a>.&#8221; </em></p><pre name=\"code\" class=\"css\">\nbody {\n	font-family: \'Myriad-Pro\', \'myriad\', helvetica, arial, sans-serif;\n	text-align: center;\n}\ninput { font-size: 14px; font-weight: bold;  }\ninput[type=range]:before { content: attr(min); padding-right: 5px; }\ninput[type=range]:after { content: attr(max); padding-left: 5px;}\noutput {\n	display: block;\n	font-size: 5.5em;\n	font-weight: bold;\n}\n</pre><p>Above, we create content before and after the range input, and make their values equal to the <code>min</code> and <code>max</code> values, respectively.</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/styledNoJS.png\" alt=\"Styled Range\" /></div><h3>Step 3: The JavaScript</h3><p>Lastly, we:</p><ul><li> Determine if the current browser knows what the range input is. If not, we alert the user that the demo won&#8217;t work.</li><li>Update the <code>output</code> element dynamically, as the user moves the slider.</li><li> Listen for when the user mouses off the slider, grab the value, and save it to local storage.</li><li>Then, the next time the user refreshes the page, the range and output will automatically be set to what they last selected.</li></ul><pre name=\"code\" class=\"js\">\n(function() {\n	var f = document.forms[0],\n		range = f[\'range\'],\n		result = f[\'result\'],\n		cachedRangeValue = localStorage.rangeValue ? localStorage.rangeValue : 5;\n	// Determine if browser is one of the cool kids that\n	// recognizes the range input.\n	var o = document.createElement(\'input\');\n	o.type = \'range\';\n	if ( o.type === \'text\' ) alert(\'Sorry. Your browser is not cool enough yet. Try the latest Opera.\');\n	// Set initial values of the input and ouput elements to\n	// either what\'s stored locally, or the number 5.\n	range.value = cachedRangeValue;\n	result.value = cachedRangeValue;\n	// When the user makes a selection, update local storage.\n	range.addEventListener(\"mouseup\", function() {\n		alert(\"The selected value was \" + range.value + \". I am using local storage to remember the value. Refresh and check on a modern browser.\");\n		localStorage ? (localStorage.rangeValue = range.value) : alert(\"Save data to database or something instead.\");\n	}, false);\n	// Display chosen value when sliding.\n	range.addEventListener(\"change\", function() {\n		result.value = range.value;\n	}, false);\n})();\n</pre><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/gauge.png\" alt=\"Styled Range with JS\" /></div><p>Ready for the real world? Probably not yet; but it&#8217;s still fun to play with and prep for!</P></p><p><a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/757_html5Tips/range.html.zip\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">Download the source code</a>, and try it out for yourself. But use Opera.</p><hr\n/><p>Thanks for reading! We&#8217;ve covered a lot, but have still only scratched the surface of what&#8217;s possible with HTML5. I hope this served as a helpful primer!</p></p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(63,4,1,1358049725,NULL,' Build your First Game with HTML5 ','HTML5 is growing up faster than anyone could have imagined. Powerful and professional solutions are already being developed…even in the gaming world! Today, you’ll make your first game using Box2D and HTML5′s canvas tag.(Continue)','HTML5 is growing up faster than anyone could have imagined. Powerful and professional solutions are already being developed…even in the gaming world! Today, you’ll make your first game using Box2D and HTML5′s canvas tag.(Continue)',1,0,'build-your-first-game-with-html5',203,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1009_html5game/images/pages.jpg','',1),(64,4,1,1358049726,NULL,' How to Create Diagonal Lines with CSS ',' A few days ago, I received my invite to Google Music. While browsing the app, I noticed a tiny, but neat trick they use to create tabs and diagonal borders with plain-old CSS. I’ll show you how to do the same in your projects today!(Continue)',' A few days ago, I received my invite to Google Music. While browsing the app, I noticed a tiny, but neat trick they use to create tabs and diagonal borders with plain-old CSS. I’ll show you how to do the same in your projects today!(Continue)',1,0,'how-to-create-diagonal-lines-with-css',231,0,'http://d2o0t5hpnwv4c1.cloudfront.net/1008_diagonal/diagonal.jpg','',1),(65,4,1,1358049727,NULL,' Web Development from Scratch: Helpful Dev Web Apps ','We’re going to step away from coding just long enough to bookmark ten very helpful web apps that you need to be familiar with.(Continue)','We’re going to step away from coding just long enough to bookmark ten very helpful web apps that you need to be familiar with.(Continue)',1,0,'web-development-from-scratch-helpful-dev-web-apps',210,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 15 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\"  class=\"left\">&laquo; Previous</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\" >The Style Attribute</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\" >External Stylesheets</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\" >Folder Organization</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\" >Lists, Blockquotes, and Images</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\" >Forms</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\" >Anchors</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\" >Navigation</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\" >Basic Layout</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\" >Layout Fragments</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\" >List Item Styling</a></li><li>Helpful Dev Web Apps</li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20857\'), post_id: 20857, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>We&#8217;re going to step away from coding just long enough to bookmark ten very helpful web apps that you need to be familiar with.</p><p><span\nid=\"more-20857\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/X3U7LVVEcLA?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/X3U7LVVEcLA?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Choose <strong>720p</strong> for the clearest picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><hr\n/><h2>Show Links</h2><ul><li><a\nhref=\"http://chopapp.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'chopapp.com\']);\">Chop</a></li><li><a\nhref=\"http://lorempixum.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'lorempixum.com\']);\">LoremPixum</a></li><li><a\nhref=\"http://lipsum.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'lipsum.com\']);\">Lipsum</a></li><li><a\nhref=\"http://snipplr.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'snipplr.com\']);\">Snipplr</a></li><li><a\nhref=\"http://www.copypastecharacter.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.copypastecharacter.com\']);\">CopyPasteCharacter</a></li><li><a\nhref=\"http://www.zurb.com/playground/css-grid-builder\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.zurb.com\']);\">CSS Grid Builder</a></li><li><a\nhref=\"http://border-radius.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'border-radius.com\']);\">Border-Radius</a></li><li><a\nhref=\"http://css3.mikeplate.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'css3.mikeplate.com\']);\">CSS3 Playground</a></li><li><a\nhref=\"http://css3please.com/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'css3please.com\']);\">CSS3Please</a></li></ul><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(66,4,1,1358049729,NULL,' Web Development from Scratch: List Item Styling ','You’re not only limited to the default disc symbol for list items. You can choose from a variety of built in options, or use custom images or symbols! I’ll show you how in this episode.(Continue)','You’re not only limited to the default disc symbol for list items. You can choose from a variety of built in options, or use custom images or symbols! I’ll show you how in this episode.(Continue)',1,0,'web-development-from-scratch-list-item-styling',330,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 14 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\" >The Style Attribute</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\" >External Stylesheets</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\" >Folder Organization</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\" >Lists, Blockquotes, and Images</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\" >Forms</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\" >Anchors</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\" >Navigation</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\" >Basic Layout</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\" >Layout Fragments</a></li><li>List Item Styling</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\" >Helpful Dev Web Apps</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20852\'), post_id: 20852, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>You&#8217;re not only limited to the default <code>disc</code> symbol for list items. You can choose from a variety of built in options, or use custom images or <a\nhref=\"www.copypastecharacter.com\">symbols</a>! I&#8217;ll show you how in this episode.</p><p><span\nid=\"more-20852\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/DNVslihTc5w?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/DNVslihTc5w?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Choose <strong>720p</strong> for the clearest picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(67,4,1,1358049730,NULL,' The 30 CSS Selectors you Must Memorize ','Twice a month, we revisit some of our readers’ favorite posts from throughout the history of Nettuts+. This tutorial was first published in November, 2010.So you learned the base id, class, and descendant selectors – and then called it a day? If so, you’re missing out on an enormous level of flexibility. While many of the selectors mentioned in this article are part of the CSS3 spec, and are, consequently, only available in modern browsers, you owe it to yourself to commit these to memory.','Twice a month, we revisit some of our readers’ favorite posts from throughout the history of Nettuts+. This tutorial was first published in November, 2010.So you learned the base id, class, and descendant selectors – and then called it a day? If so, you’re missing out on an enormous level of flexibility. While many of the selectors mentioned in this article are part of the CSS3 spec, and are, consequently, only available in modern browsers, you owe it to yourself to commit these to memory.',1,0,'the-30-css-selectors-you-must-memorize',224,0,'http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/30_css_selectors.png','<div\nclass=\"session-post\"><em>This entry is part 2 of 16 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/css3-mastery/\" >CSS3 Mastery</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/10-css3-properties-you-need-to-be-familiar-with/ \"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/getting-to-work-to-with-css3-power-tools/ \"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li>10 CSS3 Properties you Need to be Familiar With</li><li>The 30 CSS Selectors you Must Memorize</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/getting-to-work-to-with-css3-power-tools/ \" >Getting to Work with CSS3 Power Tools</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-mimic-equal-columns-with-css3-gradients/ \" >Mimic Equal Columns with CSS3 Gradients</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-a-crash-course-in-css-media-queries/ \" >A Crash-Course in CSS Media Queries</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-the-multi-column-css3-module/ \" >The Multi-Column CSS3 Module</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/design-a-prettier-web-form-with-css-3/ \" >Design a Prettier Web Form with CSS3</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/subtle-css3-typography-that-youd-swear-was-made-in-photoshop/\" >Typography that you\'d Swear Was Made in Photoshop</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-detect-css-support-in-browsers-with-javascript/\" >Detect CSS Support with JavaScript</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/css-fundametals-css-3-transitions/ \" >CSS3 Transitions: Fundamentals</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-ever-thought-about-using-font-face-for-icons/\" >Ever Thought About Using Font-Face for Icons?</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/the-intricacies-of-simplicity-css3/ \" >The Intricacy of Simplicity</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/the-state-of-css3-in-email-templates/ \" >The State of CSS3 in Email Templates</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-getting-clever-with-css3-shadows/ \" >Getting Clever with CSS3 Shadows</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/build-awesome-practical-css3-buttons/\" >Build Awesome Practical CSS3 Buttons</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/how-to-build-a-kick-butt-css3-mega-drop-down-menu/ \" >How to Build a Kick-Butt CSS3 Mega Drop-Down Menu</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-16048\'), post_id: 16048, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p><strong>Twice a month, we revisit some of our readers’ favorite posts from throughout the history of Nettuts+. This tutorial was first published in November, 2010.</strong></p><p>So you learned the base <code>id</code>, <code>class</code>, and <code>descendant</code> selectors &#8211; and then called it a day? If so, you&#8217;re missing out on an enormous level of flexibility. While many of the selectors mentioned in this article are part of the CSS3 spec, and are, consequently, only available in modern browsers, you owe it to yourself to commit these to memory.<br\n/> <span\nid=\"more-16048\"></span></p><hr\n/><h2><span> 1. </span>*</h2><pre name=\"code\" class=\"css\">\n* {\n margin: 0;\n padding: 0;\n}\n</pre><p>Let&#8217;s knock the obvious ones out, for the beginners, before we move onto the more advanced selectors.</p><p>The star symbol will target every single element on the page. Many developers will use this trick to zero out the <code>margin</code>s and <code>padding</code>. While this is certainly fine for quick tests, I&#8217;d advise you to never use this in production code. It adds too much <em>weight</em> on the browser, and is unnecessary.</p><p>The <code>*</code> can also be used with child selectors.</p><pre name=\"code\" class=\"css\">\n#container * {\n border: 1px solid black;\n}\n</pre><p>This will target every single element that is a child of the <code>#container</code> <code>div</code>. Again, try not to use this technique very much, if ever.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/star.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 2. </span>#X</h2><pre name=\"code\" class=\"css\">\n#container {\n   width: 960px;\n   margin: auto;\n}\n</pre><p>Prefixing the hash symbol to a selector allows us to target by <code>id</code>. This is easily the most common usage, however be cautious when using <code>id</code> selectors.</p><blockquote><p>Ask yourself: do I absolutely need to apply an <code>id</code> to this element in order to target it?</p></blockquote><p><code>id</code> selectors are rigid and don&#8217;t allow for reuse. If possible, first try to use a tag name, one of the new HTML5 elements, or even a pseudo-class.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/id.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 3. </span>.X</h2><pre name=\"code\" class=\"css\">\n.error {\n  color: red;\n}\n</pre><p>This is a <code>class</code> selector. The difference between <code>id</code>s and <code>class</code>es is that, with the latter, you can target multiple elements. Use <code>class</code>es when you want your styling to apply to a group of elements. Alternatively, use <code>id</code>s to find a needle-in-a-haystack, and style only that specific element.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/class.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 4. </span>X Y</h2><pre name=\"code\" class=\"css\">\nli a {\n  text-decoration: none;\n}\n</pre><p>The next most comment selector is the <code>descendant</code> selector. When you need to be more specific with your selectors, you use these. For example, what if, rather than targeting <em>all</em> anchor tags, you only need to target the anchors which are within an unordered list? This is specifically when you&#8217;d use a descendant selector.</p><blockquote><p><strong>Pro-tip</strong> &#8211; If your selector looks like <code>X Y Z A B.error</code>, you&#8217;re doing it wrong. Always ask yourself if it&#8217;s absolutely necessary to apply all of that <em>weight</em>.</p></blockquote><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/descend.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 5. </span>X</h2><pre name=\"code\" class=\"css\">\na { color: red; }\nul { margin-left: 0; }\n</pre><p>What if you want to target all elements on a page, according to their <code>type</code>, rather than an <code>id</code> or <code>class</code>name? Keep it simple, and use a type selector. If you need to target all unordered lists, use <code>ul {}</code>.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/tagName.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 6. </span>X:visited and X:link</h2><pre name=\"code\" class=\"css\">\na:link { color: red; }\na:visted { color: purple; }\n</pre><p>We use the <code>:link</code> pseudo-class to target all anchors tags which have yet to be clicked on.</p><p>Alternatively, we also have the <code>:visited</code> pseudo class, which, as you&#8217;d expected, allows us to apply specific styling to only the anchor tags on the page which <em>have</em> been clicked on, or <em>visited</em>.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/links.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span>7.</span> X + Y</h2><pre name=\"code\" class=\"css\">\nul + p {\n   color: red;\n}\n</pre><p>This is referred to as an adjacent selector. It will select <em>only</em> the element that is immediately preceded by the former element. In this case, only the first paragraph after each <code>ul</code> will have red text.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/adjacent.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span>8.</span> X > Y</h2><pre name=\"code\" class=\"css\">\ndiv#container > ul {\n  border: 1px solid black;\n}\n</pre><p>The difference between the standard <code>X Y</code> and <code>X &gt; Y</code> is that the latter will only select direct children. For example, consider the following markup.</p><pre name=\"code\" class=\"html\">\n   &lt;div id=\"container\">\n      &lt;ul>\n         &lt;li> List Item\n           &lt;ul>\n              &lt;li> Child &lt;/li>\n           &lt;/ul>\n         &lt;/li>\n         &lt;li> List Item &lt;/li>\n         &lt;li> List Item &lt;/li>\n         &lt;li> List Item &lt;/li>\n      &lt;/ul>\n   &lt;/div>\n</pre><p>A selector of <code>#container &gt; ul</code> will only target the <code>ul</code>s which are direct children of the <code>div</code> with an <code>id</code> of <code>container</code>. It will not target, for instance, the <code>ul</code> that is a child of the first <code>li</code>.</p><p>For this reason, there are performance benefits in using the child combinator. In fact, it&#8217;s recommended particularly when working with JavaScript-based CSS selector engines.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/childcombinator.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 9.</span> X ~ Y</h2><pre name=\"code\" class=\"css\">\nul ~ p {\n   color: red;\n}\n</pre><p>This sibling combinator is similar to <code>X + Y</code>, however, it&#8217;s less strict. While an adjacent selector (<code>ul + p</code>) will only select the first element that is <em>immediately</em> preceded by the former selector, this one is more generalized. It will select, referring to our example above, any <code>p</code> elements, as long as they follow a <code>ul</code>.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/generalcombinator.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 10.</span> X[title]</h2><pre name=\"code\" class=\"css\">\na[title] {\n   color: green;\n}\n</pre><p>Referred to as an <em>attributes selector</em>, in our example above, this will only select the anchor tags that have a <code>title</code> attribute. Anchor tags which do not will not receive this particular styling. But, what if you need to be more specific? Well&#8230;</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 11.</span> X[href=\"foo\"]</h2><pre name=\"code\" class=\"css\">\na[href=\"http://net.tutsplus.com\"] {\n  color: #1f6053; /* nettuts green */\n}\n</pre><p>The snippet above will style all anchor tags which link to <em>http://net.tutsplus.com</em>; they&#8217;ll receive our branded green color. All other anchor tags will remain unaffected.</p><blockquote><p> Note that we&#8217;re wrapping the value in quotes. Remember to also do this when using a JavaScript CSS selector engine. When possible, always use CSS3 selectors over unofficial methods.</p></blockquote><p>This works well, though, it&#8217;s a bit rigid. What if the link does indeed direct to Nettuts+, but, maybe, the path is <em>nettuts.com</em> rather than the full url? In those cases we can use a bit of the regular expressions syntax.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes2.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 12.</span> X[href*=\"nettuts\"]</h2><pre name=\"code\" class=\"css\">\na[href*=\"tuts\"] {\n  color: #1f6053; /* nettuts green */\n}\n</pre><p>There we go; that&#8217;s what we need. The star designates that the proceeding value must appear <em>somewhere</em> in the attribute&#8217;s value. That way, this covers <em>nettuts.com</em>, <em>net.tutsplus.com,</em> and even <em>tutsplus.com</em>.</p><p>Keep in mind that this is a broad statement. What if the anchor tag linked to some non-Envato site with the string <em>tuts</em> in the url? When you need to be more specific, use <code>^</code> and <code>&amp;</code>, to reference the beginning and end of a string, respectively.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes3.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 13. </span> X[href^=\"http\"]</h2><pre name=\"code\" class=\"css\">\na[href^=\"http\"] {\n   background: url(path/to/external/icon.png) no-repeat;\n   padding-left: 10px;\n}\n</pre><p>Ever wonder how some websites are able to display a little icon next to the links which are external? I&#8217;m sure you&#8217;ve seen these before; they&#8217;re nice reminders that the link will direct you to an entirely different website.</p><p>This is a cinch with the carat symbol. It&#8217;s most commonly used in regular expressions to designate the beginning of a string. If we want to target all anchor tags that have a <code>href</code> which begins with <code>http</code>, we could use a selector similar to the snippet shown above.</p><blockquote><p>Notice that we&#8217;re not searching for <code>http://</code>; that&#8217;s unnecessary, and doesn&#8217;t account for the urls that begin with <code>https://</code>.</p></blockquote><p>Now, what if we wanted to instead style all anchors which link to, say, a photo? In those cases, let&#8217;s search for the <em>end</em> of the string.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes4.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 14. </span>X[href$=\".jpg\"]</h2><pre name=\"code\" class=\"css\">\na[href$=\".jpg\"] {\n   color: red;\n}\n</pre><p>Again, we use a regular expressions symbol, <code>$</code>, to refer to the end of a string. In this case, we&#8217;re searching for all anchors which link to an image &#8212; or at least a url that ends with <code>.jpg</code>. Keep in mind that this certainly won&#8217;t work for <code>gifs</code> and <code>pngs</code>.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes5.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 15.</span> X[data-*=\"foo\"]</h2><pre name=\"code\" class=\"css\">\na[data-filetype=\"image\"] {\n   color: red;\n}\n</pre><p>Refer back to number eight; how do we compensate for all of the various image types: <code>png</code>, <code>jpeg,</code><code>jpg</code>, <code>gif</code>? Well, we could create multiple selectors, such as:</p><pre name=\"code\" class=\"css\">\na[href$=\".jpg\"],\na[href$=\".jpeg\"],\na[href$=\".png\"],\na[href$=\".gif\"] {\n   color: red;\n}\n</pre><p>But, that&#8217;s a pain in the butt, and is inefficient. Another possible solution is to use custom attributes. What if we added our own <code>data-filetype</code> attribute to each anchor that links to an image?</p><pre name=\"code\" class=\"html\">\n&lt;a href=\"path/to/image.jpg\" data-filetype=\"image\"> Image Link &lt;/a>\n</pre><p>Then, with that <em>hook</em> in place, we can use a standard attributes selector to target only those anchors.</p><pre name=\"code\" class=\"css\">\na[data-filetype=\"image\"] {\n   color: red;\n}\n</pre><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes6.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 16. </span>X[foo~=\"bar\"]</h2><pre name=\"code\" class=\"css\">\n a[data-info~=\"external\"] {\n   color: red;\n}\na[data-info~=\"image\"] {\n   border: 1px solid black;\n}\n</pre><p>Here&#8217;s a special one that&#8217;ll impress your friends. Not too many people know about this trick. The tilda (<code>~</code>) symbol allows us to target an attribute which has a spaced-separated list of values.</p><p>Going along with our custom attribute from number fifteen, above, we could create a <code>data-info</code> attribute, which can receive a space-separated list of anything we need to make note of. In this case, we&#8217;ll make note of external links and links to images &#8212; just for the example.</p><pre name=\"code\" class=\"html\">\n\"&lt;a href=\"path/to/image.jpg\" data-info=\"external image\"> Click Me, Fool &lt;/a>\n</pre><p>With that markup in place, now we can target any tags that have either of those values, by using the ~ attributes selector trick.</p><pre name=\"code\" class=\"css\">\n/* Target data-info attr that contains the value \"external\" */\na[data-info~=\"external\"] {\n   color: red;\n}\n/* And which contain the value \"image\" */\na[data-info~=\"image\"] {\n  border: 1px solid black;\n}\n</pre><p>Pretty nifty, ay?</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/attributes7.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 17.</span> X:checked</h2><pre name=\"code\" class=\"css\">\ninput[type=radio]:checked {\n   border: 1px solid black;\n}\n</pre><p>This pseudo class will only target a user interface element that has been <em>checked</em> - like a radio button, or checkbox. It\'s as simple as that.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/checked.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE9+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 18. </span>X:after</h2><p>The <code>before</code> and <code>after</code> pseudo classes kick butt. Every day, it seems, people are finding new and creative ways to use them effectively. They simply generate content around the selected element.</p><p>Many were first introduced to these classes when they encountered the clear-fix hack.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><pre name=\"code\" class=\"css\">\n.clearfix:after {\n    content: \"\";\n    display: block;\n    clear: both;\n    visibility: hidden;\n    font-size: 0;\n    height: 0;\n    }\n.clearfix {\n   *display: inline-block;\n   _height: 1%;\n}\n</pre><p>This <em>hack</em> uses the <code>:after</code> pseudo class to append a space after the element, and then clear it. It\'s an excellent trick to have in your tool bag, particularly in the cases when the <code>overflow: hidden;</code> method isn\'t possible.</p><p>For another creative use of this, <a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/quick-tip-getting-clever-with-css3-shadows/\" >refer to my quick tip on creating shadows</a>.</p><blockquote><p>According to the CSS3 Selectors specification, you should technically use the pseudo element syntax of two colons <code>::</code>. However, to remain compatible, the user-agent will accept a single colon usage as well. In fact, at this point, it\'s smarter to use the single-colon version in your projects.</p></blockquote><h3> Compatibility</h3><ul><li>IE8+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 19. </span>X:hover</h2><pre name=\"code\" class=\"css\">\ndiv:hover {\n  background: #e3e3e3;\n}\n</pre><p>Oh come on. You know this one. The official term for this is <code>user action pseudo class</code>. It sounds confusing, but it really isn\'t. Want to apply specific styling when a user hovers over an element? This will get the job done!</p><blockquote><p>Keep in mind that older version of Internet Explorer don\'t respond when the <code>:hover</code> pseudo class is applied to anything other than an anchor tag.</p></blockquote><p>You\'ll most often use this selector when applying, for example, a <code>border-bottom</code> to anchor tags, when hovered over.</p><pre name=\"code\" class=\"css\">\na:hover {\n border-bottom: 1px solid black;\n}\n</pre><blockquote><p><strong>Pro-tip</strong> - <code>border-bottom: 1px solid black;</code> looks better than <code>text-decoration: underline;</code>.</p></blockquote><h3> Compatibility</h3><ul><li>IE6+ (In IE6, :hover must be applied to an anchor element)</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 20. </span> X:not(selector)</h2><pre name=\"code\" class=\"css\">\ndiv:not(#container) {\n   color: blue;\n}\n</pre><p>The <code>negation</code> pseudo class is particularly helpful. Let\'s say I want to select all divs, except for the one which has an <code>id</code> of <code>container</code>. The snippet above will handle that task perfectly.</p><p>Or, if I wanted to select every single element (not advised) except for paragraph tags, we could do:</p><pre name=\"code\" class=\"css\">\n*:not(p) {\n  color: green;\n}\n</pre><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/not.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE9+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 21. </span> X::pseudoElement</h2><pre name=\"code\" class=\"css\">\np::first-line {\n   font-weight: bold;\n   font-size: 1.2em;\n}\n</pre><p>We can use pseudo elements (designated by <code>::</code>) to style fragments of an element, such as the first line, or the first letter. Keep in mind that these must be applied to block level elements in order to take effect.</p><blockquote><p>A pseudo-element is composed of two colons: <code>::</code></p></blockquote><h4>Target the First Letter of a Paragraph</h4><pre name=\"code\" class=\"css\">\np::first-letter {\n   float: left;\n   font-size: 2em;\n   font-weight: bold;\n   font-family: cursive;\n   padding-right: 2px;\n}\n</pre><p>This snippet is an abstraction that will find all paragraphs on the page, and then sub-target only the first letter of that element.</p><p>This is most often used to create newspaper-like styling for the first-letter of an article.</p><h4>Target the First Line of a Paragraph</h4><pre name=\"code\" class=\"css\">\np::first-line {\n   font-weight: bold;\n   font-size: 1.2em;\n}\n</pre><p>Similarly, the <code>::first-line</code> pseudo element will, as expected, style the first line of the element only.</p><blockquote><p>\"For compatibility with existing style sheets, user agents must also accept the previous one-colon notation for pseudo-elements introduced in CSS levels 1 and 2 (namely, :first-line, :first-letter, :before and :after). This compatibility is not allowed for the new pseudo-elements introduced in this specification.\" - <a\nhref=\"http://www.w3.org/TR/css3-selectors/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.w3.org\']);\">Source</a></p></blockquote><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/pseudoElements.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE6+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 22. </span>X:nth-child(n)</h2><pre name=\"code\" class=\"css\">\nli:nth-child(3) {\n   color: red;\n}\n</pre><p>Remember the days when we had no way to target specific elements in a stack? The <code>nth-child</code> pseudo class solves that!</p><p>Please note that <code>nth-child</code> accepts an integer as a parameter, however, this is not zero-based. If you wish to target the second list item, use <code>li:nth-child(2)</code>.</p><p>We can even use this to select a variable set of children. For example, we could do <code>li:nth-child(4n)</code> to select every fourth list item.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/nth.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE9+</li><li>Firefox 3.5+</li><li>Chrome</li><li>Safari</li></ul><hr\n/><h2><span> 23. </span>X:nth-last-child(n)</h2><pre name=\"code\" class=\"css\">\nli:nth-last-child(2) {\n   color: red;\n}\n</pre><p>What if you had a huge list of items in a <code>ul</code>, and only needed to access, say, the third to the last item? Rather than doing <code>li:nth-child(397)</code>, you could instead use the <code>nth-last-child</code> pseudo class.</p><p>This technique works almost identically from number sixteen above, however, the difference is that it begins at the end of the collection, and works its way back.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/nthLast.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE9+</li><li>Firefox 3.5+</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 24. </span>X:nth-of-type(n)</h2><pre name=\"code\" class=\"css\">\nul:nth-of-type(3) {\n   border: 1px solid black;\n}\n</pre><p>There will be times when, rather than selecting a <code>child</code>, you instead need to select according to the <code>type</code> of element.</p><p>Imagine mark-up that contains five unordered lists. If you wanted to style only the third <code>ul</code>, and didn\'t have a unique <code>id</code> to hook into, you could use the <code>nth-of-type(n)</code> pseudo class. In the snippet above, only the third <code>ul</code> will have a border around it.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/nthOfType.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE9+</li><li>Firefox 3.5+</li><li>Chrome</li><li>Safari</li></ul><hr\n/><h2><span> 25. </span>X:nth-last-of-type(n)</h2><pre name=\"code\" class=\"css\">\nul:nth-last-of-type(3) {\n   border: 1px solid black;\n}\n</pre><p>And yes, to remain consistent, we can also use <code>nth-last-of-type</code> to begin at the end of the selectors list, and work our way back to target the desired element.</p><h3> Compatibility</h3><ul><li>IE9+</li><li>Firefox 3.5+</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 26. </span>X:first-child</h2><pre name=\"code\" class=\"css\">\nul li:first-child {\n   border-top: none;\n}\n</pre><p>This structural pseudo class allows us to target only the first child of the element\'s parent. You\'ll often use this to remove borders from the first and last list items.</p><p>For example, let\'s say you have a list of rows, and each one has a <code>border-top</code> and a <code>border-bottom</code>. Well, with that arrangement, the first and last item in that set will look a bit odd.</p><p>Many designers apply classes of <code>first</code> and <code>last</code> to compensate for this. Instead, you can use these pseudo classes.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/firstChild.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE7+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 27. </span>X:last-child</h2><pre name=\"code\" class=\"css\">\nul > li:last-child {\n   color: green;\n}\n</pre><p>The opposite of <code>first-child</code>, <code>last-child</code> will target the last item of the element\'s parent.</p><h3>Example</h3><p>Let\'s build a simple example to demonstrate one possible use of these classes. We\'ll create a styled list item.</p><h4>Markup</h4><pre name=\"code\" class=\"html\">\n  &lt;ul>\n     &lt;li> List Item &lt;/li>\n     &lt;li> List Item &lt;/li>\n     &lt;li> List Item &lt;/li>\n  &lt;/ul>\n</pre><p>Nothing special here; just a simple list.</p><h4>CSS</h4><pre name=\"code\" class=\"css\">\nul {\n width: 200px;\n background: #292929;\n color: white;\n list-style: none;\n padding-left: 0;\n}\nli {\n padding: 10px;\n border-bottom: 1px solid black;\n border-top: 1px solid #3c3c3c;\n}\n</pre><p>This styling will set a background, remove the browser-default padding on the <code>ul</code>, and apply borders to each <code>li</code> to provide a bit of depth.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/extraBorders.png\" alt=\"Styled List\" /></div><blockquote><p>To add depth to your lists, apply a <code>border-bottom</code> to each <code>li</code> that is a shade or two darker than the <code>li</code>\'s background color. Next, apply a <code>border-top</code> which is a couple shades <em>lighter</em>.</p></blockquote><p>The only problem, as shown in the image above, is that a border will be applied to the very top and bottom of the unordered list - which looks odd. Let\'s use the <code>:first-child</code> and <code>:last-child</code> pseudo classes to fix this.</p><pre name=\"code\" class=\"css\">\nli:first-child {\n    border-top: none;\n}\nli:last-child {\n   border-bottom: none;\n}\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/fixed.png\" alt=\"Fixed\" /></div><p>There we go; that fixes it!</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/firstChild.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE9+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><p><em>Yep - IE8 supported <code>:first-child</code>, but not <code>:last-child</code>. Go figure. </em></p><hr\n/><h2><span> 28. </span>X:only-child</h2><pre name=\"code\" class=\"css\">\ndiv p:only-child {\n   color: red;\n}\n</pre><p>Truthfully, you probably won\'t find yourself using the <code>only-child</code> pseudo class too often. Nonetheless, it\'s available, should you need it.</p><p>It allows you to target elements which are the <em>only</em> child of its parent. For example, referencing the snippet above, only the paragraph that is the only child of the <code>div</code> will be colored, red.</p><p>Let\'s assume the following markup.</p><pre name=\"code\" class=\"html\">\n&lt;div>&lt;p> My paragraph here. &lt;/p>&lt;/div>\n&lt;div>\n   &lt;p> Two paragraphs total. &lt;/p>\n   &lt;p> Two paragraphs total. &lt;/p>\n&lt;/div>\n</pre><p>In this case, the second <code>div</code>\'s paragraphs will not be targeted; only the first <code>div</code>. As soon as you apply more than one child to an element, the <code>only-child</code> pseudo class ceases to take effect.</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/onlyChild.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE9+</li><li>Firefox</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 29. </span>X:only-of-type</h2><pre name=\"code\" class=\"css\">\nli:only-of-type {\n   font-weight: bold;\n}\n</pre><p>This structural pseudo class can be used in some clever ways. It will target elements that do not have any siblings within its parent container. As an example, let\'s target all <code>ul</code>s, which have only a single list item.</p><p>First, ask yourself how you would accomplish this task? You could do <code>ul li</code>, but, this would target <em>all</em> list items. The only solution is to use <code>only-of-type</code>.</p><pre name=\"code\" class=\"css\">\nul > li:only-of-type {\n   font-weight: bold;\n}\n</pre><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/onlyOfType.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE9+</li><li>Firefox 3.5+</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2><span> 30. </span>X:first-of-type</h2><p>The <code>first-of-type</code> pseudo class allows you to select the first siblings of its type.</p><h4>A Test</h4><p>To better understand this, let\'s have a test. Copy the following mark-up into your code editor:</p><pre name=\"code\" class=\"html\">\n&lt;div>\n   &lt;p> My paragraph here. &lt;/p>\n   &lt;ul>\n      &lt;li> List Item 1 &lt;/li>\n      &lt;li> List Item 2 &lt;/li>\n   &lt;/ul>\n   &lt;ul>\n      &lt;li> List Item 3 &lt;/li>\n      &lt;li> List Item 4 &lt;/li>\n   &lt;/ul>\n&lt;/div>\n</pre><p>Now, without reading further, try to figure out how to target only <em>\"List Item 2\"</em>. When you\'ve figured it out (or given up), read on.</p><h4>Solution 1</h4><p>There are a variety of ways to solve this test. We\'ll review a handful of them. Let\'s begin by using <code>first-of-type</code>.</p><pre name=\"code\" class=\"css\">\nul:first-of-type > li:nth-child(2) {\n   font-weight: bold;\n}\n</pre><p>This snippet essentially says, \"find the first unordered list on the page, then find only the immediate children, which are list items. Next, filter that down to only the second list item in that set.</p><h4>Solution 2</h4><p>Another option is to use the adjacent selector.</p><pre name=\"code\" class=\"css\">\np + ul li:last-child {\n   font-weight: bold;\n}\n</pre><p>In this scenario, we find the <code>ul</code> that immediately proceeds the <code>p</code> tag, and then find the very last child of the element.</p><h4>Solution 3</h4><p>We can be as obnoxious or as playful as we want with these selectors.</p><pre name=\"code\" class=\"css\">\nul:first-of-type li:nth-last-child(1) {\n   font-weight: bold;\n}\n</pre><p>This time, we grab the first <code>ul</code> on the page, and then find the very first list item, but starting from the bottom! :)</p><h5> <a\nhref=\"http://d2o0t5hpnwv4c1.cloudfront.net/840_cssSelectors/selectors/firstOfType.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'d2o0t5hpnwv4c1.cloudfront.net\']);\">View Demo </a></h5><h3> Compatibility</h3><ul><li>IE9+</li><li>Firefox 3.5+</li><li>Chrome</li><li>Safari</li><li>Opera</li></ul><hr\n/><h2> Conclusion</h2><p> If you\'re compensating for older browsers, like Internet Explorer 6, you still need to be careful when using these newer selectors. But, please don\'t let that deter you from learning these. You\'d be doing a huge disservice to yourself. Be sure to <a\nhref=\"http://www.quirksmode.org/css/contents.html\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.quirksmode.org\']);\">refer here for a browser-compatibility list.</a> Alternatively, you can use <a\nhref=\"http://code.google.com/p/ie7-js/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'code.google.com\']);\">Dean Edward\'s excellent IE9.js script</a> to bring support for these selectors to older browsers.</p><p>Secondly, when working with JavaScript libraries, like the popular jQuery, always try to use these native CSS3 selectors over the library\'s custom methods/selectors, when possible. I<a\nhref=\"http://jsperf.com/jquery-css3-not-vs-not\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jsperf.com\']);\">t\'ll make your code faster</a>, as the selector engine can use the browser\'s native parsing, rather than its own.</p><p>Thanks for reading, and I hope you picked up a trick or two!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(68,4,1,1358049732,NULL,' Build a Neat HTML5 Powered Contact Form ','In this tutorial, we are going to learn how to create a swanky HTML5 AJAX powered contact form. The form will use some of the new HTML5 input elements and attributes, and will be validated using the browser’s built-in form validation.We will use jQuery and Modernizr to help out with the older browsers, and PHP on the server side to validate the input.','In this tutorial, we are going to learn how to create a swanky HTML5 AJAX powered contact form. The form will use some of the new HTML5 input elements and attributes, and will be validated using the browser’s built-in form validation.We will use jQuery and Modernizr to help out with the older browsers, and PHP on the server side to validate the input.',1,0,'build-a-neat-html5-powered-contact-form',117,0,'http://d2o0t5hpnwv4c1.cloudfront.net/991_html5cf/html5-contact-form.jpg','',1),(69,4,1,1358049732,NULL,' Web Development from Scratch: Layout Fragments ','In this episode, I’m going to teach you how to take a layout fragment on the web, and recreate it with HTML and CSS.(Continue)','In this episode, I’m going to teach you how to take a layout fragment on the web, and recreate it with HTML and CSS.(Continue)',1,0,'web-development-from-scratch-layout-fragments',348,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 13 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\" >The Style Attribute</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\" >External Stylesheets</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\" >Folder Organization</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\" >Lists, Blockquotes, and Images</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\" >Forms</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\" >Anchors</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\" >Navigation</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\" >Basic Layout</a></li><li>Layout Fragments</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\" >List Item Styling</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\" >Helpful Dev Web Apps</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20698\'), post_id: 20698, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this episode, I&#8217;m going to teach you how to take a layout fragment on the web, and recreate it with HTML and CSS.</p><p><span\nid=\"more-20698\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/CbzVOHF2dmY?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/CbzVOHF2dmY?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Choose <strong>720p</strong> for the clearest picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/nTivLldfUlk?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/nTivLldfUlk?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"560\" height=\"349\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Choose <strong>720p</strong> for the clearest picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(70,4,1,1358049733,NULL,' Responsive Web Design: A Visual Guide ',' These days, “one size fits all” is quickly becoming a dated concept. Luckily, with CSS media queries, we can now easily build responsive web designs that accomodate everything from your mobile phone, up to your massive desktop!(Continue)',' These days, “one size fits all” is quickly becoming a dated concept. Luckily, with CSS media queries, we can now easily build responsive web designs that accomodate everything from your mobile phone, up to your massive desktop!(Continue)',1,0,'responsive-web-design-a-visual-guide',208,0,'https://d2o0t5hpnwv4c1.cloudfront.net/986_responsiveWebDesign/responsive-web-design.png','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"http://nettuts.s3.amazonaws.com/986_responsiveWebDesign/responsivewebdesign.zip\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20262\'), post_id: 20262, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p> These days, &#8220;one size fits all&#8221; is quickly becoming a dated concept. Luckily, with CSS media queries, we can now easily build responsive web designs that accomodate everything from your mobile phone, up to your massive desktop!</p><p><span\nid=\"more-20262\"></span></p><div\nclass=\"tutorial_image\"> <iframe\nsrc=\"http://blip.tv/play/gcMVgr6VSAA.html\" width=\"600\" height=\"338\" frameborder=\"0\" allowfullscreen></iframe><embed\ntype=\"application/x-shockwave-flash\" src=\"http://a.blip.tv/api.swf#gcMVgr6VSAA\" style=\"display:none\"></embed></p><div>Press the <strong>HD</strong> button for a clearer picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(71,4,1,1358049753,NULL,' Web Development from Scratch: Basic Layout ','In this lesson, I’ll introduce you to the new header and footer elements, as we build a basic, but common, web page layout.(Continue)','In this lesson, I’ll introduce you to the new header and footer elements, as we build a basic, but common, web page layout.(Continue)',1,0,'web-development-from-scratch-basic-layout',312,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 12 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\" >The Style Attribute</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\" >External Stylesheets</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\" >Folder Organization</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\" >Lists, Blockquotes, and Images</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\" >Forms</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\" >Anchors</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\" >Navigation</a></li><li>Basic Layout</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\" >Layout Fragments</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\" >List Item Styling</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\" >Helpful Dev Web Apps</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20453\'), post_id: 20453, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this lesson, I&#8217;ll introduce you to the new <code>header</code> and <code>footer</code> elements, as we build a basic, but common, web page layout.</p><p><span\nid=\"more-20453\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/CiXPF4Oz-J4?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/CiXPF4Oz-J4?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Choose <strong>720p</strong> for the clearest picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(72,4,1,1358049755,NULL,' Web Development from Scratch: Navigation ','In this lesson, we’re going to review the HTML5 nav element, as well as how to create a basic method for navigating through the pages of a website.(Continue)','In this lesson, we’re going to review the HTML5 nav element, as well as how to create a basic method for navigating through the pages of a website.(Continue)',1,0,'web-development-from-scratch-navigation',313,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 11 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\" >The Style Attribute</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\" >External Stylesheets</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\" >Folder Organization</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\" >Lists, Blockquotes, and Images</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\" >Forms</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\" >Anchors</a></li><li>Navigation</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\" >Basic Layout</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\" >Layout Fragments</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\" >List Item Styling</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\" >Helpful Dev Web Apps</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20448\'), post_id: 20448, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this lesson, we&#8217;re going to review the HTML5 <code>nav</code> element, as well as how to create a basic method for navigating through the pages of a website.</p><p><span\nid=\"more-20448\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/Ja4eAqlfcLc?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/Ja4eAqlfcLc?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Choose <strong>720p</strong> for the clearest picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(73,4,1,1358049756,NULL,' How to Create Presentation Slides with HTML and CSS ',' As I sifted through the various pieces of software that are designed for creating presentation slides, it occurred to me: why learn yet another program, when I can instead use the tools that I’m already familiar with? With a bit of fiddling, we can easily create beautiful presentations with HTML and CSS. I’ll show you how today!(Continue)',' As I sifted through the various pieces of software that are designed for creating presentation slides, it occurred to me: why learn yet another program, when I can instead use the tools that I’m already familiar with? With a bit of fiddling, we can easily create beautiful presentations with HTML and CSS. I’ll show you how today!(Continue)',1,0,'how-to-create-presentation-slides-with-html-and-css-2',325,0,'http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/slides-with-html-and-css.jpg','<div\nclass=\"download_wrap\"><div\nclass=\"big_btn\" style=\"margin-left:100px;\"> <a\nhref=\"https://github.com/JeffreyWay/Presentation-for-WordCamp\" rel=\"external\"><span>Download</span> <small>Source Files</small></a></div></div> <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-19870\'), post_id: 19870, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p> As I sifted through the various pieces of software that are designed for creating presentation slides, it occurred to me: why learn yet another program, when I can instead use the tools that I&#8217;m already familiar with? With a bit of fiddling, we can easily create beautiful presentations with HTML and CSS. I&#8217;ll show you how today!</p><p><span\nid=\"more-19870\"></span></p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/intro.jpg\" alt=\"The Business of WordPress Theme Design\" /><br\n/> <em>Prefer visual learning? Get the <a\nhref=\"http://marketplace.tutsplus.com/item/create-presentation-slides-with-html-and-css/238476\" >screencast course</a> of this tutorial on the <a\nhref=\"http://marketplace.tutsplus.com/item/create-presentation-slides-with-html-and-css/238476\" >Tuts+ marketplace.</a></em></div><hr\n/><h2> <span> 0 &#8211; </span>Directory Structure</h2><p> Before we get started, let&#8217;s go ahead and create our folder structure; it should be fairly simple. We&#8217;ll need:</p><ul><li> index.html</li><li> css/style.css</li><li> js/scripts.js</li><li> img/</li><li> slides/</li></ul><p> A simple base template. Your <code>slides/</code> directory can remain blank for the time being. We&#8217;ll fill that shortly.</p><hr\n/><h2> <span> 1 &#8211; </span>Beginning Markup</h2><p> Let&#8217;s begin by creating the base markup for our presentation page. Paste the following snippet into your <code>index.html</code> file.</p><pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE HTML>\n&lt;html>\n&lt;head>\n   &lt;meta charset=\"utf-8\">\n   &lt;link href=\"style.css\" rel=\"stylesheet\" />\n   &lt;title>My Great Presentation&lt;/title>\n&lt;/head>\n&lt;body>\n &lt;div class=\"wrap\">\n   &lt;div id=\"slides\">\n      &lt;!-- load in slides -->\n   &lt;/div>\n &lt;/div>\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js\">&lt;/script>\n&lt;/body>\n&lt;/html>\n</pre><p> Above we have some clean, HTML5 goodness. No more <code>type</code> attributes in our <code>script</code> and <code>link</code> elements, short <code>DOCTYPE</code>, a laughably simple <code>meta charset</code> tag, etc.</p><hr\n/><h2><span>2 &#8211; </span>Slides</h2><blockquote\nclass=\"pullquote\"><p>The <code>load()</code> method is an AJAX method that loads data from your server, and inserts the returned HTML into the selected element.</p></blockquote><p> Now you might be wondering how we&#8217;re going to deal with each slide. We have a couple options here. While we could wrap each slide in its own <code>div</code>, and place a massive block of HTML within the <code>#slides</code> container, my instinct is that this will make the process of editing individual slides more time consuming, as we then have to hunt through all that markup for the slide that we need.</p><p> Instead, for this tutorial, I&#8217;ve opted to place each slide within its own <code>.html</code> file. We can then use jQuery&#8217;s <code>load()</code> method to bring in each slide, and append them to our container.</p><p> Create a handful of numbered HTML files, and place them within your <code>slides/</code> directory, like so:</p><ul><li> slides/<ul><li> 0.html</li><li> 1.html</li><li> 2.html</li><li> 3.html</li><li> 4.html</li></ul></li></ul><p> Within each of these files, we&#8217;ll insert the markup for your desired slide. As an example, together, let&#8217;s create an &#8220;About Me&#8221; slide.</p><h4> <code>1.html</code></h4><pre name=\"code\" class=\"html\">\n&lt;div>\n   &lt;h3> About Me&lt;/h3>\n   &lt;ul>\n      &lt;li> Nettuts+ Editor&lt;/li>\n      &lt;li> Envato Marketplaces Manager&lt;/li>\n      &lt;li>Wicked WordPress Themes&lt;/li>\n      &lt;li>Theme Tumblr Like a Pro&lt;/li>\n   &lt;/ul>\n&lt;/div>\n</pre><p> Feel free to mix and match how you wish.</p><hr\n/><h2> <span> 3 &#8211; </span>Load the Slides</h2><p> Before we can focus on the styling of our presentation, we need to <code>load</code> those slides into our document with jQuery. But rather than creating a bunch of global variables and methods, we&#8217;ll store everything in an object, called <code>Slides</code>.</p><pre name=\"code\" class=\"js\">\nvar Slides = {\n};\n</pre><p> Next, the process of loading those slides into our document will be stored within, say, a <code>loadContent()</code> method. Let&#8217;s create that now.</p><pre name=\"code\" class=\"js\">\nvar Slides = {\n   loadContent : function() {\n   }\n}\n</pre><p> To load all of the slides within the <code>slides/</code> directory, we first need to know how many slides there are; though, JavaScript doesn&#8217;t have the ability to access the file system. Instead, we&#8217;ll pass in our total number of slides when we <em>initiate</em> our object.</p><p> With that in mind, let&#8217;s create an <code>init()</code> method that will serve as our controller, of sorts. This method will also receive an argument that specifies the total number of slides. This will then be assigned to a property of our <code>Slides</code> object.</p><pre name=\"code\" class=\"js\">\nvar Slides = {\n   totalSlides : \'\',\n   init : function( totalSlides ) {\n      // If nothing was passed to this function, we can\'t continue.\n      if ( !totalSlides ) throw new Error(\'Please pass the total number of slides to the init method\');\n      Slides.totalSlides = totalSlides;\n      // Load the slides\n      Slides.loadContent();\n   },\n   loadContent : function() {\n   }\n}\n</pre><p> That&#8217;s better. But, of course, none of this code will run until we call the <code>init()</code> method.</p><pre name=\"code\" class=\"js\">\nvar Slides = {\n   totalSlides : \'\',\n   init : function( totalSlides ) {\n      // If nothing was passed to this function, we can\'t continue.\n      if ( !totalSlides ) throw new Error(\"Please pass the total number of slides to the init method\");\n      Slides.totalSlides = totalSlides;\n      // Load the slides\n      Slides.loadContent();\n   },\n   loadContent : function() {\n   }\n}\n// All right; let\'s do this. We\'ll assume that we\'ve created 6 slides, total.\nSlides.init( 6 );\n</pre><hr\n/><h2> <span> 4 &#8211; </span>Three Ways to Load the Slides</h2><p> Let&#8217;s take our first crack at loading these slides &#8212; and then we&#8217;ll slowly improve upon our code, as we continue.</p><pre name=\"code\" class=\"js\">\nloadContent : function() {\n   for ( var i = 0; i < Slides.totalSlides; i++ ) {\n      $(\'&lt;div id=\"#slide-\' + i + \'\">&lt;/div>\')\n         .load(\'slides/\' + i + \'.html\')\n         .appendTo( $(\'#slides\') );\n   }\n}\n</pre><p> Above, we&#8217;re creating a new <code>div</code> element for the total number of slides that we&#8217;ve specified. Each <code>div</code> will have an <code>id</code> of <code>#slide-n</code>. After we&#8217;ve created each element, we then load the contents of the desired slide, which we stored within the <code>slides/</code> directory. Once this block of HTML has been retrieved from the server, we append the newly created <code>div</code> to the <code>#slides</code> container.</p><h3> We Can Do Better</h3><p> This code will indeed work, but we can do better. There are a couple issues with the code above:</p><ul><li><strong>Traversal: </strong> For every slide, we are traversing the DOM for the <code>#slides</code> element. This is wasteful and unnecessary. Also, as we&#8217;ll certainly be working with this <code>#slides</code> container element throughout our project, it makes sense to store it as a property of our <code>Slides</code> object. <em>We&#8217;ll do this shortly.</em></li><li> <strong>Reflows: </strong>This code will create any number of page reflows, which can increase the load time of our page. Rather than calling the <code>appendTo()</code> method dozens of times (or in our case: six), let&#8217;s limit our reflows to one.</li></ul><h3> Traversal</h3><p> Let&#8217;s first fix the traversal issue.</p><pre name=\"code\" class=\"js\">\nvar Slides = {\n   totalSlides : \'\',\n   container : $( \"#slides\" ),\n   init() { ... },\n   loadContent() { ... }\n}\n</pre><p> This way, we search our document for the <code>#slides</code> element exactly once, rather than over and over.</p><blockquote><p>If you&#8217;re still confused about the advantages to this, think of it as jumping into a pool, and searching for a coin. Every time you call <code>$(\'#slides\')</code>, the JavaScript engine jumps in the pool and looks for that coin again. Over and over. But, if we instead store the location of <code>$(\'#slides\')</code> in a variable, it never has to jump back into that pool. It <em>remembers</em> where that coin is.</p></blockquote><h3> Reflows</h3><p> Next, we&#8217;ll take care of that pesky reflow issue. There are two ways to limit our reflows. We&#8217;ll examine both methods.</p><h4>Document Fragments</h4><p> JavaScript document fragments allow us to store chunks of HTML. Then, rather than updating the DOM multiple times, as we did before, with this method, we only call <code>appendTo()</code> once.</p><blockquote><p><a\nhref=\"http://ejohn.org/blog/dom-documentfragments/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'ejohn.org\']);\">Refer here</a> for more information on document fragments.</p></blockquote><pre name=\"code\" class=\"js\">\nloadContent : function() {\n   var frag = document.createDocumentFragment(),\n      bit;\n   for ( var i = 0; i < Slides.totalSlides; i++ ) {\n      bit = $(\'&lt;div id=\"#slide-\' + i + \'\">\'&lt;/div>\')\n         .load(\'slides/\' + i + \'.html\')[0];\n      frag.appendChild(bit);\n      }\n   Slides.container.append(frag);\n}\n</pre><p> Note that we&#8217;re no longer calling <code>appendTo()</code> within the <code>for</code> statement. Instead, it&#8217;s only being called once. The only note worth mentioning is the <code>[0]</code> section, after we call the <code>load()</code> method. What do we need that for?</p><p> Document fragments store &#8212; wait for it &#8212; HTML fragments, or elements. However, when we called the <code>load()</code> method above, the jQuery object is, of course, returned. That&#8217;s not compatible. Instead, we want to filter down to the HTML element, itself. We can do so by using <code>[0]</code>, or the <code>get()</code> method. Either option will do.</p><h4>Hide the Container</h4><p>Our second option is to hide the container element. When we do so, regardless of how many times you append new elements to that element, no additional page reflows will take effect&#8230;because the element is hidden! It&#8217;s a nice little trick to have in your tool belt.</p><pre name=\"code\" class=\"js\">\nloadContent : function() {\n  // Hide the container.\n   Slides.container.hide();\n   for ( var i = 0; i < Slides.totalSlides; i++ ) {\n      $(\'\'&lt;div id=\"#slide-\' + i + \'\">\'&lt;/div>\')\n         .load(\'slides/\' + i + \'.html\')\n         .appendTo(Slides.container);\n      }\n   // Now display the slides container again - causing exactly one reflow.\n   Slides.container.show();\n}\n</pre><p>So either of these two options will do just fine. Choose whichever you prefer.</p><p> If you now view our project in the browser &#8212; assuming you&#8217;ve added some dummy slides to the <code>slides/</code> directory &#8212; you&#8217;ll see something along the lines of:</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/loadedContent.jpg\" alt=\"Loaded Content\" /></div><p> If we use a tool like Firebug or Chrome&#8217;s developer tools, we&#8217;ll see that, as expected, the slides have been inserted into the <code>#slides</code> container div.</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/source.jpg\" alt=\"Source code\" /></div><hr\n/><h2> <span> 5 &#8211; </span>Make it Pretty</h2><p> Our next step takes place within our stylesheet. We&#8217;ll be focusing on both aesthetics as well as function here. To make each slide translate from left to right, we&#8217;ll need to be clever with our styling.</p><p> We&#8217;ll begin by creating our canvas. If you refer back to our markup&#8230;</p><pre name=\"code\" class=\"html\">\n&lt;!DOCTYPE HTML>\n&lt;html>\n&lt;head>\n   &lt;meta charset=\"utf-8\">\n   &lt;link href=\"style.css\" rel=\"stylesheet\" />\n   &lt;title>My Great Presentation&lt;/title>\n&lt;/head>\n&lt;body>\n &lt;div class=\"wrap\">\n   &lt;div id=\"slides\">\n      &lt;!-- load in slides -->\n   &lt;/div>\n &lt;/div>\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js\">&lt;/script>\n&lt;/body>\n&lt;/html>\n</pre><p> &#8230;our wrapping container for our project is the <code>div</code> with a <code>class</code> of <code>wrap</code>. We&#8217;ll provide a width of <code>1180px</code> and center it on the page.</p><pre name=\"code\" class=\"css\">\n.wrap {\n   margin: auto;\n   width: 1180px;\n   overflow: hidden; /* because children will be floated */\n}\n</pre><p> Next, because each slide should translate horizontally, we need to make our <code>#slides</code> <code>div</code> as wide as possible.</p><pre name=\"code\" class=\"css\">\n#slides {\n	width: 999999px;\n}\n</pre><p> Now, the fun &#8212; and a little scary &#8212; part. Think of a traditional presentation slide. Isn&#8217;t the content typically both vertically and horizontally centered on the slide, or page? Absolutely. Because we have 100% control over this project, we don&#8217;t need to worry about browser compliance. As the slides will only ever be used by us (during our presentation), we&#8217;re free to tailor it to our favorite browser. This way, we get to use lots of fun new features that haven&#8217;t yet made their way into all the browsers, such as the <a\nhref=\"http://bit.ly/eN24rj\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bit.ly\']);\">Flexible Box Model</a>.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p> We&#8217;ll begin by specifying the dimensions for each slide, floating each slide, and providing some breathing room (margins).</p><pre name=\"code\" class=\"css\">\n#slides > div {\n	height: 600px;\n	width: 1180px;\n	float: left;\n	margin-right: 200px;\n	text-align: center;\n}\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/1.jpg\" alt=\"Floating Slides\" /></div><p> But remember: that text needs to be vertically centered. <a\nhref=\"http://bit.ly/eN24rj\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'bit.ly\']);\">Flexible Box Model</a> to the rescue!</p><pre name=\"code\" class=\"css\">\n#slides > div {\n	height: 600px;\n	width: 1180px;\n	float: left;\n	margin-right: 200px;\n	text-align: center;\n        /* Flexible Box Model */\n        display: -webkit-box;\n	-webkit-box-align: center;\n	-webkit-box-orient: horizontal;\n	-webkit-box-pack: center;\n	display: box;\n	box-align: center;\n	box-orient: horizontal;\n	box-pack: center;\n}\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/2.jpg\" alt=\"Adding flexibox\" /></div><p> Next, we&#8217;ll add a nice radial gradient background to our slides. To be honest, CSS radial gradients still baffle me. I rarely remember the syntax. As such, I typically either make note of gradients in the wild that I like, or use any of the various gradient generators on the web to make mine. Feel free to do the same.</p><pre name=\"code\" class=\"css\">\nbody {\n	background-image: -webkit-gradient(\n		radial,\n		50% 50%, 0,\n		50% 50%, 1000,\n		from(rgba(245,245,245,1)),\n		to(rgba(100,100,100,1))\n	);\n}\n</pre><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/radial.jpg\" alt=\"Applying a radial gradient\" /></div><p> And, with that, we have our basic structure in place. At this point, I encourage you to being styling your headings, perhaps creating a minimal grid, and anything else you can think of. We&#8217;ll finish our minimal styling by working on typography.</p></p><pre name=\"code\" class=\"css\">\n#slides h1,\n#slides h2,\n#slides h3,\n#slides h4,\n#slides h5 {\n	color: #292929;\n	font-family: \'League Gothic\', sans-serif;\n	letter-spacing: -5px;\n	margin-top: 0;\n	text-shadow: 5px 3px 0 white;\n}\n#slides > div h2 {\n	font-size: 180px;\n	line-height: 1em;\n	margin: 0;\n}\n</pre><p> It&#8217;s amazing what we can achieve when we tweak letter-spacing, and apply some clever text shadows! Looks much better now!</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/intro.jpg\" alt=\"The Business of WordPress Theme Design\" /></div><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/heading-text.jpg\" alt=\"Custom Text\" /></div><hr\n/><h2> <span> 6 &#8211; </span>Next Slide, Please</h2><p> The next step in this project is to handle the process of transitioning from slide to slide. Naturally, as there are no buttons in place, we should instead <em>listen</em> for when either the left or right arrow keys are pressed. We&#8217;ll store this functionality in a new <code>keyPress</code> method of our <code>Slides</code> object.</p><pre name=\"code\" class=\"js\">\nvar Slides = {\n   ...\n   init : function() { ... },\n   loadContent: function() { ... },\n   keyPress : function() {\n      $(document.body).keydown(function(e) {\n         // if left or right arrow key is pressed\n         if ( e.keyCode === 39 || e.keyCode === 37 ) {\n            e.preventDefault();\n            ( e.keyCode === 39 ) ? Slides.next() : Slides.prev();\n         }\n      });\n   }\n}\n</pre><p> jQuery provides the helpful <code>keydown</code> method, which will attach the necessary event listeners. This means that the passed callback function will run for every key that is pressed; however, we&#8217;re only interested in the right and left arrow key, or key codes 39 and 37, respectively. If one of these keys is pressed, we first cancel the default action of the arrow key, and then call either the <code>next()</code> or <code>prev()</code> method, dependent upon which key was pressed.</p><h3> Next Slide</h3><p> Let&#8217;s now work on that <code>next()</code> method that we called above. When this method is called, it needs to execute a few operations:</p><ul><li> Update the hash in the URL. That way, we can easily send out links to specific slides.</li><li> Animate the slide to the left, and reveal the next slide in the sequence.</li></ul><p> But before moving forward, how do we know <em>how</em> much to translate the slide? It needs to be the width of the <code>#slides</code> container, but we should try not to hardcode that value into our JavaScript if we don&#8217;t have to. The reason for this is because, if we later decide to change the dimensions of our canvas, we&#8217;d also need to dig into our JavaScript file and update the dimensions as well. Instead, let&#8217;s dynamically determine what the width and margins of the container is.</p><p> Let&#8217;s add a new property to the <code>Slides</code> object, called <code>slideWidth</code>. However, we won&#8217;t be able to determine the width of the slides until they&#8217;ve been inserted into the DOM, via the <code>loadContent</code> method.</p><pre name=\"code\" class=\"js\">\nvar Slides = {\n   ...\n   // New property stores the width of each slide\n   slideWidth : \'\',\n   ...\n   init : function( totalSlides ) { ... },\n   loadContent : function() { ... },\n   // Determine the width of the slide...\n   setSlideWidth : function() {\n      var each = Slides.container.children( \'div\' );\n      Slides.slideWidth = each.width() + ( parseInt( each.css(\'margin-right\'), 10 ) );\n   }\n}\n</pre><p> Yikes &#8211; this line looks a bit scary!</p><pre name=\"code\" class=\"js\">\nSlides.slideWidth = each.width() + ( parseInt( each.css(\'margin-right\'), 10 ) );\n</pre><p> But don&#8217;t worry; it&#8217;s really quite simple. We&#8217;re updating the <code>Slides.slideWidth</code> property, and are making it equal to the width of the slide plus its margin right. Because retrieving the <code>margin-right</code> value of the slides (specifically the first one) will return <code>px</code> as well, we need to slice that off, by using the <code>parseInt</code> function.</p><p> To clarify the need for casting, assuming that the margin right value is equal to <code>200px</code>&#8230;</p><pre name=\"code\" class=\"js\">\nconsole.log ( typeof each.css(\'margin-right\').split(\'px\')[0] ); // value is 200. Typeof is still string, not integer.\n</pre><p> And with that out of the way, we&#8217;re now dynamically determining the width of our slides. Back to our <code>next()</code>method; at all times, we need to track the positioning of our slides. That way, when we transition from slide four to five, we know exactly how much to translate the slide. We&#8217;ll store this value in a new property: <code>translateAmount</code>.</p><pre name=\"code\" class=\"js\">\ntranslateAmount : \'\',\nnext : function() {\n   Slides.translateAmount -= Slides.slideWidth;\n}\n</pre><p> Let&#8217;s break it down. When we press the <code>right</code> arrow key the first time, we set the <code>translateAmount</code> property equal to the <code>slideWidth</code>, or in our case, <code>1380px</code>. If we press <code>right</code> again, this value will be updated to <code>2760px</code>.</p><h3> Update the Hash</h3><p> Within this <code>next</code> method, we should also update the hash value in our url, such as <code>example.com/index.html#slide-1</code>, then <code>example.com/index.html#slide-2</code>, etc. To do so, we need to keep track of the current slide that the reader is viewing.</p><pre name=\"code\" class=\"js\">\ncurrentSlide : 0,\n...\nnext : function() {\n   Slides.translateAmount -= Slides.slideWidth;\n   Slides.updateHash( ++Slides.currentSlide );\n},\nupdateHash : function() {\n   location.hash = \'#slide-\' + Slides.currentSlide;\n}\n</pre><p> Note that we&#8217;re increasing the value of <code>currentSlide</code> by one before passing it to the <code>updateHash</code> function. This is appropriate; when we press the <code>right</code> arrow key, the hash should be updated to the next slide, not the current one.</p><h3> Animate the Slide</h3><p> Finally, now that we&#8217;ve tracked all of the necessary values, we can animate the slides.</p><pre name=\"code\" class=\"js\">\nnext : function() {\n   Slides.translateAmount -= Slides.slideWidth;\n   Slides.updateHash( ++Slides.currentSlide );\n   Slides.animate();\n},\nanimate : function() {\n   Slides.container\n      .children()\n         .css( \'-webkit-transform\', \'translateX(\' + Slides.translateAmount + \'px)\');\n}\n</pre><p> For best performance, we&#8217;ll take advantage of CSS3 to translate the slides. In order for this to not be an instant translation, we need to update our CSS file:</p><pre name=\"code\" class=\"css\">\n#slides div {\n   ...\n   -webkit-transition: all 1s linear;\n   transition: all 1s linear;\n}\n</pre><hr\n/><h2> And the Previous Slide, Please</h2><p> The <code>prev</code> method will be really similar to the <code>next</code> method, except for a couple things.</p><pre name=\"code\" class=\"js\">\nprev : function() {\n  // No more left to go back.\n   if ( Slides.translateAmount === 0 ) return;\n   Slides.translateAmount += Slides.slideWidth;\n   Slides.updateHash( --Slides.currentSlide );\n   Slides.animate();\n}\n</pre><p> This time, as we&#8217;re transitioning back to the beginning of the slides, we need to reverse the <code>translateAmount</code> and hash value. Also, we must consider the possibility that the user is pressing the <code>left</code> arrow key even when they&#8217;re on the very first slide. If that happens to be the case, we shouldn&#8217;t do anything, as there&#8217;s nothing left to transition to!</p><h3> Final JavaScript</h3><pre name=\"code\" class=\"js\">\nvar Slides = {\n   container : $(\'#slides\'),\n   totalSlides : \'\',\n   translateAmount : 0,\n   currentSlide : 0,\n   slideWidth : \'\',\n   init : function(totalSlides) {\n      var each;\n      if ( !totalSlides ) throw new Error(\'Please pass the total number of slides.\');\n      Slides.totalSlides = totalSlides;\n      Slides.loadContent();\n      each = Slides.container.children(\'div\');\n      // Determine the width of our canvas\n      Slides.slideWidth = each.width() + ( parseInt( each.css(\'margin-right\'), 10 ) );\n      Slides.keyPress();\n   },\n   loadContent : function() {\n      Slides.container.hide();\n      for ( var i = 0; i < Slides.totalSlides; i++ ) {\n         $(\'&lt;div id=\"#slide-\' + i + \'\">&lt;/div>\')\n            .load(\'slides/\' + i + \'.html\')\n            .appendTo(Slides.container);\n         }\n      Slides.container.show();\n   },\n   keyPress : function() {\n      $(document.body).keydown(function(e) {\n         // if left or right arrow key is pressed\n         if ( e.keyCode === 39 || e.keyCode === 37 ) {\n            e.preventDefault();\n            ( e.keyCode === 39 ) ? Slides.next() : Slides.prev();\n         }\n      });\n   },\n   next : function( ) {\n      Slides.translateAmount -= Slides.slideWidth;\n      Slides.updateHash( ++Slides.currentSlide );\n      Slides.animate();\n   },\n  prev : function() {\n     // No more left to go back.\n      if ( Slides.translateAmount === 0 ) return;\n      Slides.translateAmount += Slides.slideWidth;\n      Slides.updateHash( --Slides.currentSlide );\n      Slides.animate();\n  },\n  animate : function() {\n     Slides\n      .container\n      .children()\n         .css( \'-webkit-transform\', \'translateX(\' + Slides.translateAmount + \'px)\' );\n  },\n  updateHash : function( direction ) {\n     // Update current Slides and hash.\n     location.hash = \'#slide-\' + Slides.currentSlide;\n  }\n};\n// All right; let\'s do this.\nSlides.init(6);\n</pre><hr\n/><h2> Complete</h2><p> All finished. That wasn&#8217;t too hard, once we dug in a bit! The great thing is that, if you view the presentation on a really high or low resolution, you can simply zoom in or out a few clicks to compensate, by pressing <code>Command</code> or <code>Control +-</code>. Let me know if you have any questions or recommendations!</p><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/intro.jpg\" alt=\"The Business of WordPress Theme Design\" /></div><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/slide-ex.jpg\" alt=\"A Slide Example\" /></div><div\nclass=\"tutorial_image\"> <img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/972_slides/license-types.jpg\" alt=\"License Slides\" /></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(74,4,1,1358049757,NULL,' Web Development from Scratch: Anchors ','In this lesson, we’ll review the process of linking to both absolute and relative urls within our markup.(Continue)','In this lesson, we’ll review the process of linking to both absolute and relative urls within our markup.(Continue)',1,0,'web-development-from-scratch-anchors',209,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 10 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\" >The Style Attribute</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\" >External Stylesheets</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\" >Folder Organization</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\" >Lists, Blockquotes, and Images</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\" >Forms</a></li><li>Anchors</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\" >Navigation</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\" >Basic Layout</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\" >Layout Fragments</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\" >List Item Styling</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\" >Helpful Dev Web Apps</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20442\'), post_id: 20442, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this lesson, we&#8217;ll review the process of linking to both absolute and relative urls within our markup.</p><p><span\nid=\"more-20442\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/D-gPF8Hgjd4?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/D-gPF8Hgjd4?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Choose <strong>720p</strong> for the clearest picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(75,4,1,1358049758,NULL,' Web Development from Scratch: Forms ','In lesson nine of our Session, we’ll review forms, or more specifically, the method by which we capture user data. When you build registration or contact pages, you use forms and inputs.(Continue)','In lesson nine of our Session, we’ll review forms, or more specifically, the method by which we capture user data. When you build registration or contact pages, you use forms and inputs.(Continue)',1,0,'web-development-from-scratch-forms',264,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 9 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\" >The Style Attribute</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\" >External Stylesheets</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\" >Folder Organization</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\" >Lists, Blockquotes, and Images</a></li><li>Forms</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\" >Anchors</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\" >Navigation</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\" >Basic Layout</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\" >Layout Fragments</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\" >List Item Styling</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\" >Helpful Dev Web Apps</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20370\'), post_id: 20370, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In lesson nine of our Session, we&#8217;ll review forms, or more specifically, the method by which we capture user data. When you build registration or contact pages, you use forms and inputs.</p><p><span\nid=\"more-20370\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/9E7TGYZ3r1U?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/9E7TGYZ3r1U?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Choose <strong>720p</strong> for the clearest picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(76,4,1,1358049758,NULL,' Web Development from Scratch: Lists, Blockquotes, and Images ','In this episode, we continue learning about the available HTML elements. Specifically, we’ll review three forms of lists, blockquotes, and images.(Continue)','In this episode, we continue learning about the available HTML elements. Specifically, we’ll review three forms of lists, blockquotes, and images.(Continue)',1,0,'web-development-from-scratch-lists-blockquotes-and-images',282,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 8 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\" >The Style Attribute</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\" >External Stylesheets</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\" >Folder Organization</a></li><li>Lists, Blockquotes, and Images</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\" >Forms</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\" >Anchors</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\" >Navigation</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\" >Basic Layout</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\" >Layout Fragments</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\" >List Item Styling</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\" >Helpful Dev Web Apps</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20369\'), post_id: 20369, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this episode, we continue learning about the available HTML elements. Specifically, we&#8217;ll review three forms of lists, blockquotes, and images.</p><p><span\nid=\"more-20369\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/EQP9FBihmvU?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/EQP9FBihmvU?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Choose <strong>720p</strong> for the clearest picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(77,4,1,1358049760,NULL,' Web Development from Scratch: Folder Organization ','Up until this point, we’ve stored all of our files on our desktop. In real-world projects, though, we’d never do this. Instead, let’s create a template folder structure for each new project.(Continue)','Up until this point, we’ve stored all of our files on our desktop. In real-world projects, though, we’d never do this. Instead, let’s create a template folder structure for each new project.(Continue)',1,0,'web-development-from-scratch-folder-organization',222,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 7 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\" >The Style Attribute</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\" >External Stylesheets</a></li><li>Folder Organization</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\" >Lists, Blockquotes, and Images</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\" >Forms</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\" >Anchors</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\" >Navigation</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\" >Basic Layout</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\" >Layout Fragments</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\" >List Item Styling</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\" >Helpful Dev Web Apps</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20361\'), post_id: 20361, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>Up until this point, we&#8217;ve stored all of our files on our desktop. In real-world projects, though, we&#8217;d never do this. Instead, let&#8217;s create a template folder structure for each new project.</p><p><span\nid=\"more-20361\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/6ak3_iyyamk?version=3&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/6ak3_iyyamk?version=3&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Choose <strong>720p</strong> for the clearest picture. <br\n/>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(78,4,1,1358049762,NULL,' Web Development from Scratch: External Stylesheets ','In this lesson, we’ll review the process of creating and linking to external CSS stylesheets. We’ll discuss why this is preferable to using inline styling.(Continue)','In this lesson, we’ll review the process of creating and linking to external CSS stylesheets. We’ll discuss why this is preferable to using inline styling.(Continue)',1,0,'web-development-from-scratch-external-stylesheets',120,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 6 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-the-style-attribute/\" >The Style Attribute</a></li><li>External Stylesheets</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\" >Folder Organization</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\" >Lists, Blockquotes, and Images</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\" >Forms</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\" >Anchors</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\" >Navigation</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\" >Basic Layout</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\" >Layout Fragments</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\" >List Item Styling</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\" >Helpful Dev Web Apps</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20112\'), post_id: 20112, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p>In this lesson, we&#8217;ll review the process of creating and linking to external CSS stylesheets. We&#8217;ll discuss why this is preferable to using inline styling.</p><p><span\nid=\"more-20112\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/_iDWTsSzHqw?fs=1&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/_iDWTsSzHqw?fs=1&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(79,4,1,1358049763,NULL,' Web Development from Scratch: The Style Attribute ',' In this episode, we’ll discuss the HTML style attribute, and how it can be used to style the element, or tag, that it is applied to.(Continue)',' In this episode, we’ll discuss the HTML style attribute, and how it can be used to style the element, or tag, that it is applied to.(Continue)',1,0,'web-development-from-scratch-the-style-attribute',321,0,'http://d2o0t5hpnwv4c1.cloudfront.net/977_webdesign_from_scratch/web-design-from_scratch.jpg','<div\nclass=\"session-post\"><em>This entry is part 5 of 15 in the <strong><a\nhref=\"http://net.tutsplus.com/sessions/web-design-from-scratch/\" >Web Development from Scratch</a></strong> Session</em><br\n/><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\"  class=\"left\">&laquo; Previous</a><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\"  class=\"right\">Next &raquo;</a></div><div\nclass=\"session-post session-list\" style=\"display:none;padding:15px 20px 5px 20px\"><ul><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-choosing-an-editor/\" >Choosing an Editor</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-html-tags/\" >HTML Tags</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-design-from-scratch-the-obligatory-hello-world/\" >The Obligatory Hello World</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-headings/\" >Headings</a></li><li>The Style Attribute</li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-external-stylesheets/\" >External Stylesheets</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-folder-organization/\" >Folder Organization</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-lists-blockquotes-and-images/\" >Lists, Blockquotes, and Images</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-forms\" >Forms</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-anchors/\" >Anchors</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-navigation/\" >Navigation</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-basic-layout/\" >Basic Layout</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-layout-fragments/\" >Layout Fragments</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-list-item-styling\" >List Item Styling</a></li><li><a\nhref=\"http://net.tutsplus.com/tutorials/html-css-techniques/web-development-from-scratch-helpful-dev-web-apps\" >Helpful Dev Web Apps</a></li></ul></div><script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-20109\'), post_id: 20109, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p> In this episode, we&#8217;ll discuss the HTML style attribute, and how it can be used to style the element, or tag, that it is applied to.</p><p><span\nid=\"more-20109\"></span></p><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/jvJ8CAIEquA?fs=1&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/jvJ8CAIEquA?fs=1&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" width=\"600\" height=\"338\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed></object></p><div>Subscribe to our <a\nhref=\"http://youtube.com/nettutsplus\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'youtube.com\']);\">YouTube</a> and <a\nhref=\"http://http://nettuts.blip.tv/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'nettuts.blip.tv\']);\">Blip.tv</a> channels to watch more screencasts.</div></div><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(80,4,1,1358049764,NULL,' Automated Optimization with HTML5 Boilerplate Build ','HTML5 Boilerplate is widely recognized as a rock-solid foundation for building new web-based sites and applications. That said, few are aware that the tool offers more than simply setting up your development environment. It also helps you “wrap up” your work by providing an awesome cross-platform build process.(Continue)','HTML5 Boilerplate is widely recognized as a rock-solid foundation for building new web-based sites and applications. That said, few are aware that the tool offers more than simply setting up your development environment. It also helps you “wrap up” your work by providing an awesome cross-platform build process.(Continue)',1,0,'automated-optimization-with-html5-boilerplate-build',282,0,'http://d2o0t5hpnwv4c1.cloudfront.net/764_boilerPlateFreebie/html5_boilerplate.jpg',' <script type=\"text/javascript\">/*<![CDATA[*///\n(function($) { $(function() { WpPostRatings({context: $(\'#post-17679\'), post_id: 17679, rpc: \'http://net.tutsplus.com/wp-admin/admin-ajax.php\', base_url: \'http://net.tutsplus.com\', allow_voting: true}).init() })})(jQuery)\n//]]&gt;/*]]>*/</script><p><a\nhref=\"http://html5boilerplate.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'html5boilerplate.com\']);\">HTML5 Boilerplate</a> is widely recognized as a rock-solid foundation for building new web-based sites and applications. That said, few are aware that the tool offers more than simply <em>setting up</em> your development environment. It also helps you &#8220;wrap up&#8221; your work by providing an awesome cross-platform build process.</p><p><span\nid=\"more-17679\"></span></p><hr\n/><h2>The Build Script, with Paul Irish</h2><div\nclass=\"tutorial_image\"> <object\nwidth=\"600\" height=\"338\"><param\nname=\"movie\" value=\"http://www.youtube.com/v/OXpCB3U_4Ig?fs=1&amp;hl=en_US&amp;hd=1\"></param><param\nname=\"allowFullScreen\" value=\"true\"></param><param\nname=\"allowscriptaccess\" value=\"always\"></param><embed\nsrc=\"http://www.youtube.com/v/OXpCB3U_4Ig?fs=1&amp;hl=en_US&amp;hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"600\" height=\"338\"></embed></object></div><hr\n/><h2>Overview</h2><p>So why might you need this build tool? Because it&#8217;s baked into HTML5 Boilerplate, and can help you automate web performance optimization. We chose to go with Apache Ant to handle the workload. How come?</p><blockquote><p> All other tools have limitations that Ant&#8217;s original author couldn&#8217;t live with when developing software across multiple platforms.</p></blockquote><p> Many developers are unfamiliar with the build process. But don&#8217;t worry; a build tool isn&#8217;t a scary monster. Everything can be configured through a relatively simple XML file. This article will help you understand how to set up the build tool, customize the build process and finally change variables and run the build.</p><hr\n/><h2>The Directory Structure</h2><p>The build script makes some assumptions about how your files are sorted and structured.  Here is the folder structure of HTML5 Boilerplate:</p><div\nclass=\"tutorial_image\"><img\nsrc=\"http://d2o0t5hpnwv4c1.cloudfront.net/901_optimizationhtml5/tree.png\" alt=\"Tutorial image\" /></div><ul><li><code>/js/libs/</code> &#8211; contains common script libraries: <a\nhref=\"http://modernizr.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'modernizr.com\']);\">Modernizr</a>, <a\nhref=\"http://jquery.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'jquery.com\']);\">jQuery</a> and a pngfix for IE6</li><li><code>/js/mylibs/</code> &#8211; contains site specific custom library scripts</li><li><code>/plugins.js</code> &#8211; all jQuery plugins</li><li><code>/script.js</code> &#8211; site/page specific JavaScript</li></ul><hr\n/><h2>The Build Folder Structure</h2><p>The <code>build/</code> folder contains the following elements:</p><h4>build.xml</h4><p>Apache Ant&#8217;s build files are written in XML. This file contains our project (Boilerplate Build) and targets. Targets contain task elements. Each task element of the buildfile can have an <code>id</code> attribute and can later be referred to by the value supplied to it, which must be unique.</p><h4>default.properties</h4><p><code>default.properties</code> contains the default build options, project structure and hardcore build options, which we&#8217;ll review shortly.</p><h4>build.properties</h4><p>This file defines overrides for <code>default.properties</code>. This should be created by a user when he or she needs to override particular values. Consequently, it should not be placed under version control.</p><h4>tools</h4><p>Tools are a set of bundles, which include <code>opyipng, JPEGTran, YUI compressor</code> and <code>HTML compressor</code>.</p><hr\n/><h2>Set up the Build Tool</h2><p>Because the goal of the build tool is to be platform agnostic, we&#8217;ll review the necessary steps to set it up, dependent upon your OS of choice.</p><ul><li><strong>Windows</strong> &#8211; Grab and <a\nhref=\"http://code.google.com/p/winant/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'code.google.com\']);\">install WinAnt</a>.</li><li> <strong>Mac OSX</strong> &#8211; Using homebrew, install the following packages: <code>brew install libjpeg optipng</code>. With MacPorts, use the following install command: <code>port install jpeg optipng</code></li><li> <strong>Ubuntu (Linux)</strong> &#8211; Using apt, install the following packages: <code>apt-get install libjpeg-progs optipng</code></li></ul><hr\n/><h2>Walkthrough of the buildfile</h2><p>The build tool is nothing more than an XML file that is based on Apache Ant. Below is a walk through of the pre-defined build process. These elements can be configured by editing the <code>build.xml</code> file.</p><h3>Concatening / Minifying JavaScript</h3><pre name=\"code\" class=\"xml\">\n&lt;!-- Optimize javascript files --&gt;\n&lt;target name=\"js.all\" depends=\"js.remove.console, js.all.min, js.main.concat, js.libs.concat, js.concat.scripts,\njs.minifyonly.min, js.delete\"&gt;&lt;/target&gt;\n&lt;!--  JS: Concat primary scripts --&gt;\n...\n&lt;!-- JS, Delete concatenated libs file (only if concat.scripts and delete.unoptimized are defined) --&gt;\n&lt;target name=\"js.if.concat.scripts\" if=\"build.delete.unoptimized, build.concat.scripts\"&gt;\n	&lt;delete file=\"./${dir.publish}/${dir.js}/libs-${build.number}.min.js\"/&gt;\n	&lt;delete file=\"./${dir.publish}/${dir.js}/scripts-${build.number}.min.js\"/&gt;\n&lt;/target&gt;\n</pre><ul><li>The <code>/js/libs/</code> files are minified, but not concatenated. Modernizr should be alone in the <code>head</code> of the document. jQuery might be pulled from a CDN, and the pngfix will be included for IE6 only.</li><li><code>/js/mylibs/</code> contains your other various JavaScript libraries and plugins. All files stored here here will be minified (unless they end with .<code>min.js</code>), and then concatenated together.</li><li><code>plugins.js</code> and <code>script.js</code>, in the <code>/js/</code> folder, are all yours. These will also be minified and concatenated with the <code>mylibs/</code> files.</li></ul><h3>Minifying CSS</h3><pre name=\"code\" class=\"xml\">\n&lt;target name=\"css\" depends=\"copy\"&gt;\n    &lt;echo message=\"Minifying css...\"/&gt;\n    &lt;concat destfile=\"./${dir.publish}/${dir.css}/style-${build.number}.css\"&gt;\n     &lt;fileset file=\"./${dir.css}/style.css\"/&gt;\n    &lt;/concat&gt;\n    ...\n&lt;/target&gt;\n</pre><p>All CSS files are minified using <a\nhref=\"http://developer.yahoo.com/yui/compressor/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'developer.yahoo.com\']);\">YUI compressor</a>. The above Ant script will run <code>style.css</code> through YUI compressor for minification.</p><h3>Image Optimization</h3><pre name=\"code\" class=\"xml\">\n&lt;target name=\"imagespng\" depends=\"copy\"&gt;\n	&lt;echo message=\"Optimizing images\"/&gt;\n    &lt;apply executable=\"optipng\" osfamily=\"unix\"&gt;\n     &lt;arg value=\"-o7\"/&gt;\n     &lt;fileset dir=\"./${dir.publish}/\"&gt;\n       &lt;include name=\"**/*.png\"/&gt;\n     &lt;/fileset&gt;\n    &lt;/apply&gt;\n    ...\n&lt;/target&gt;\n</pre><p>In HTML5 Boilerplate, we chose to use <code>OptiPng</code> and <code>jpegtran</code> for image optimization for PNG and JPG images, respectively. That said, there are plenty of image optimization tools. Should you wish to do so, you&#8217;re free to replace the tools with your own favorite image optimization tools.</p><div\nclass=\"tutorial_image\"><script type=\"text/javascript\">google_ad_client = \"pub-9093712935949486\";\n/* 300x250 nettuts middle tutsads */\ngoogle_ad_slot = \"1775681443\";\ngoogle_ad_width = 300;\ngoogle_ad_height = 250;</script> <script type=\"text/javascript\"\nsrc=\"http://pagead2.googlesyndication.com/pagead/show_ads.js\"></script></div><p>For instance, <a\nhref=\"http://www.smush.it\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'www.smush.it\']);\">Smush.it</a> uses ImageMagick to identify the image type and convert GIF files to PNG files. It then uses gifsicle to optimize GIF animations by stripping repeating pixels in different frames.</p><h3>Removing Development-Only Coding</h3><pre name=\"code\" class=\"xml\">\n&lt;exclude name=\"**/${dir.js}/profiling/**\"/&gt;\n&lt;exclude name=\"**/${dir.test}/**\"/&gt;\n...\n&lt;target name=\"js.remove.console\" description=\"Comment out console.log lines\"&gt;\n	&lt;echo&gt;Commenting out console.log lines&lt;/echo&gt;\n	&lt;replaceregexp match=\"(console.log\\(.*\\))\" replace=\"/\\*\\1\\*/\" flags=\"g\" &gt;\n		&lt;fileset dir=\"./${dir.publish}/${dir.js}/\"&gt;\n			&lt;include name=\"**/*.js\"/&gt;\n			&lt;exclude name=\"**/*.min.js\"/&gt;\n		&lt;/fileset&gt;\n	&lt;/replaceregexp&gt;\n&lt;/target&gt;\n</pre><p>Files like <code>console.log</code>, profiling and unit testing files are not needed for the release of the site.</p><h3>Minifying HTML</h3><pre name=\"code\" class=\"xml\">\n&lt;target name=\"htmlbuildkit\" depends=\"html\" &gt;\n&lt;apply executable=\"java\" parallel=\"false\" force=\"true\" dest=\"./${dir.publish}/\" &gt;\n     &lt;fileset dir=\"./${dir.publish}/\" includes=\"*.html\"/&gt;\n     &lt;arg value=\"-jar\"/&gt;\n     &lt;arg path=\"./${dir.build}/tools/htmlcompressor-0.9.3.jar\"/&gt;\n&lt;/apply&gt;\n&lt;/target&gt;\n</pre><p>Listed below are some various options for minifying your HTML files:</p><ul><li><code>htmlbuildkit</code> &#8211; Preserves comments, multiple spaces and compresses inline JavaScript and CSS.</p></li><li><code>htmlclean</code> &#8211; Preserves multiple spaces, removes unneeded quotes and compress inline JavaScript and CSS</p></li><li><code>htmlcompress</code> &#8211; Removes unneeded quotes and compresses inline JavaScript and CSS.</p></li></ul><h3>Automated Baseline Numbering / Cache Busting</h3><blockquote\nclass=\"pullquote\"><p>HTML5 Boilerplate uses query string for JavaScript/CSS versioning and cache busting.</p></blockquote><p>HTML5 Boilerplate by default uses query string for JavaScript/CSS versioning and cache busting. The drawback with this approach is that some intermediate proxies &#8211; and potentially other clients &#8211; may not cache assets that contain query strings. This is due to basic heuristics that flag such requests as dynamic data.</p><p> The build tool will first remove the query string versioning and use automated baseline numbering for release control and cache busting.</p><h3>Configuring Excludes</h3><pre name=\"code\" class=\"xml\">\n&lt;exclude name=\".gitignore\"/&gt;\n&lt;exclude name=\".project\"/&gt;\n&lt;exclude name=\".settings\"/&gt;\n&lt;exclude name=\"README.markdown\"/&gt;\n&lt;exclude name=\"**/.git/**\"/&gt;\n&lt;exclude name=\"**/.svn/**\"/&gt;\n&lt;exclude name=\".gitignore\"/&gt;\n&lt;exclude name=\"*.conf*\"/&gt;\n&lt;exclude name=\"mime.types\"/&gt;\n&lt;exclude name=\"**/${dir.build}/**\"/&gt;\n&lt;exclude name=\"**/${dir.test}/**\"/&gt;\n&lt;exclude name=\"**/${dir.demo}/**\"/&gt;\n&lt;exclude name=\"**/${dir.js}/profiling/**\"/&gt;\n</pre><p>Not all files will need to be published. A perfect example of this would be files generated by versioning control system like subversion and git.</p><p>By default, there is a list of file types and directories that will be excluded. To add to this list, you can search and find <code>&lt;!-- configurable excludes --&gt;</code> and append your custom exludes to it.</p><hr\n/><h2>Walkthrough of default.properties</h2><p>Variables inside the build file are defined in <code>default.properties</code> and <code>build.properties</code>.</p><h3>Build options</h3><ul><li> <code>build.concat.scripts = true</code> &#8211; If set, multiple script files will be smushed together to a single, cohesive file.</li><li><code>build.delete.unoptimized = true</code> &#8211; If set, unoptimized files will be deleted.</li><li><code>file.exclude = nonexistentfile</code> &#8211; Excludes file filter for publishing (can&#8217;t be empty).</li></ul><h3>Project Structure</h3><pre name=\"code\" class=\"xml\">\ndir.publish	= publish\ndir.build	= build\ndir.tools	= ${dir.build}/tools\ndir.test	= test\ndir.demo	= demo\ndir.js		= js\n...\n</pre><p> The project structure contains directory names, like the ones shown above, as well as the core JS folder, JS utility libraries, and folders which should only be minified but not concatenated.</p><h3>Other Build Options</h3><ul><li><code>build.info	= buildinfo.properties</code> &#8211; Build versioning is defined</li><li><code>tool.yuicompressor	= yuicompressor-2.4.2.jar</code> &#8211; YUI Compressor is defined with <code>yuicompressor-2.4.2.jar</code></li></ul><hr\n/><h2>Okay &#8211; But How Do I Use This?</h2><p>Finally, we&#8217;ll learn exactly how you can use the build tool in your projects! Refer to the following steps to run the build tool.</p><ul><li>Open a command line interface, and navigate to your project folder.</li><li>Navigate into the build folder: <code>cd build/</code></li><li>There are four different ways to build your site: the default way is: <code>ant build</code></li><li>When the build script changes your HTML to reference the new minified script (usually named something like <code>scripts-002.min.js</code>), it looks for some HTML comments which refer to the beginning and end of the script block. Currently, it looks for &lt;!&#8211; scripts concatenated and &lt;!&#8211; end concatenated and minified scripts&#8211;&gt;.</li></ul><h3> Build Options</h3><p>Here&#8217;s a list of various build options that you can choose from to suit your particular need:</p><ul><li><code>ant build</code> &#8211; minor html optimizations (extra quotes removed). inline script/style minified (default)</li><li><code>ant buildkit</code> &#8211; all html whitespace retained. inline script/style minified</li><li><code>ant minify</code> &#8211; above optimizations plus full html minification</li><li><code>ant text</code> &#8211; same as build but without image (png/jpg) optimizing</li></ul><hr\n/><h2>Conclusion</h2><p>Performance optimization doesn’t have to be expensive or time consuming. With some reusable rules, one can slowly setup a build process to automate the repetitive aspects of optimization work. <a\nhref=\"http://ant.apache.org/\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'ant.apache.org\']);\">Apache Ant</a> provides a powerful, yet easy to use, framework, while <a\nhref=\"http://html5boilerplate.com\" onclick=\"javascript:_gaq.push([\'_trackEvent\',\'outbound-article\',\'html5boilerplate.com\']);\">HTML5 Boilerplate</a> leverages that to make web optimization as easy as possible for front-end web developers. Thank you so much for reading!</p><div\nstyle=\"clear:both;padding-bottom:20px;\"><fb:like layout=\"standard\" width=\"450\" height=\"30\"></fb:like></div><p\nstyle=\"text-align: center;\"><div\nid=\"bsap_1260864\" class=\"bsarocks bsap_d754f1e9ba63a736ba8ff5ece958f7dd\"></div></p>',1),(81,3,NULL,1359817758,NULL,'Php tutorials','Meta description for Php tutorials','Description for Php tutorials',1,1,'php-tutorials',0,1,NULL,'<p>Content</p>',1);

/*Table structure for table `post_tag` */

CREATE TABLE `post_tag` (
  `id_post` int(11) unsigned NOT NULL,
  `id_tag` int(11) unsigned NOT NULL,
  PRIMARY KEY (`id_post`,`id_tag`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `post_tag` */

insert  into `post_tag`(`id_post`,`id_tag`) values (81,1),(81,2),(81,3);

/*Table structure for table `setting` */

CREATE TABLE `setting` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `value` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

/*Data for the table `setting` */

insert  into `setting`(`id`,`name`,`value`) values (1,'site_title','My site'),(2,'site_email','lehoangduc.vt@gmail.com'),(3,'date_format','dd/mm/YYYY'),(4,'time_format','H:i:s'),(5,'mail_server_name','mail@mail.com'),(6,'mail_server_port','965'),(7,'mail_server_login','leduc'),(8,'mail_server_password','pass'),(9,'comment_notify_email','on'),(10,'comment_black_list','sex,fuck'),(11,'image_thumbnail_size_w','100'),(12,'image_thumbnail_size_h','101'),(13,'image_medium_size_w','200'),(14,'image_medium_size_h','201'),(15,'image_large_size_w','300'),(16,'image_large_size_h','301');

/*Table structure for table `tag` */

CREATE TABLE `tag` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(60) NOT NULL,
  `slug` varchar(60) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `slug` (`slug`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

/*Data for the table `tag` */

insert  into `tag`(`id`,`name`,`slug`) values (1,'php','php'),(2,'php tutorial','php-tutorial'),(3,'php post','php-post'),(4,'thủ thuật php','thu-thuat-php'),(5,'công nghệ di động','cong-nghe-di-dong'),(6,'ứng dụng php','ung-dung-php');

/*Table structure for table `user` */

CREATE TABLE `user` (
  `id` tinyint(3) unsigned NOT NULL AUTO_INCREMENT,
  `email` varchar(60) NOT NULL,
  `name` varchar(100) NOT NULL,
  `username` varchar(60) NOT NULL,
  `password` char(40) NOT NULL,
  `last_login` int(11) unsigned DEFAULT NULL,
  `creation_ip` varbinary(16) DEFAULT NULL,
  `last_login_ip` varbinary(16) DEFAULT NULL,
  `modified_date` int(11) unsigned DEFAULT NULL,
  `avatar` varchar(255) DEFAULT NULL,
  `level` enum('super_admin','mod') NOT NULL DEFAULT 'mod',
  `salt` char(22) NOT NULL,
  `creation_date` int(11) unsigned NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

/*Data for the table `user` */

insert  into `user`(`id`,`email`,`name`,`username`,`password`,`last_login`,`creation_ip`,`last_login_ip`,`modified_date`,`avatar`,`level`,`salt`,`creation_date`) values (1,'duc@gmail.com','duc','admin','49362fabde85aabd63cae5e3997d0616027418c6',1359807962,NULL,'127.0.0.1',NULL,NULL,'super_admin','719fc8b57817a56c15d39d',0);

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
